!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	.\dma_decode_16b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\dma_decode_16b.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\dma_tfbuffer.v	/^parameter [DEC_SZ-1:0]   DEC_REG = {{DEC_SZ-1{1'b0}},1'b1};                         \/\/0000_0001$/;"	c
1	.\dma_tfbuffer.v	/^wire      [DEC_WD-1:0] reg_addr = {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\omsp_clock_module.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_dbg.v	/^                             cpu_stat, 1'b0, dbg_halt_st};$/;"	n
1	.\omsp_dbg.v	/^parameter           BASE_D       = {{NR_REG-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_dbg.v	/^wire  [7:0] mem_ctl_full  = {4'b0000, mem_ctl, 1'b0};$/;"	n
1	.\omsp_dbg_i2c.v	/^                               shift_buf_tx_init  ? {shift_tx_val,   1'b1}   : \/\/ TX Init$/;"	n
1	.\omsp_frontend.v	/^wire [15:0] irq_addr    = {9'h1ff, irq_num, 1'b0};$/;"	n
1	.\omsp_frontend.v	/^wire [15:0] pc_incr = pc + {14'h0000, fetch, 1'b0};$/;"	n
1	.\omsp_gpio.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_multiplier.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_multiplier.v	/^wire [DEC_WD-1:0] reg_addr    =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\omsp_sfr.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_timerA.v	/^parameter [DEC_SZ-1:0] BASE_REG   =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_timerA.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\omsp_watchdog.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\omsp_watchdog.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\template_periph_16b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
1	.\template_periph_16b.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
1	.\template_periph_8b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
3	.\omsp_dbg.v	/^wire  [7:0] cpu_ctl_full = {1'b0, cpu_ctl, 3'b000};$/;"	n
32	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 32'h0000_0000}      |$/;"	n
48	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 48'h0000_0000_0000} |$/;"	n
6	.\omsp_timerA.v	/^wire [15:0] tacctl0_full = tacctl0 | {5'h00, scci0, 6'h00, cci0_s, 3'h0};$/;"	n
6	.\omsp_timerA.v	/^wire [15:0] tacctl1_full = tacctl1 | {5'h00, scci1, 6'h00, cci1_s, 3'h0};$/;"	n
6	.\omsp_timerA.v	/^wire [15:0] tacctl2_full = tacctl2 | {5'h00, scci2, 6'h00, cci2_s, 3'h0};$/;"	n
8	.\omsp_multiplier.v	/^wire        [31:0] product_xp = cycle[0] ? {product[23:0], 8'h00} :$/;"	n
8	.\omsp_multiplier.v	/^wire       [15:0] per_din_msk =  per_din & {{8{per_we[1]}}, 8'hff};$/;"	n
A1	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A1	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A10	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A10	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A2	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A2	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A3	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A3	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A4	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A4	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A5	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A5	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A6	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A6	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A7	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A7	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A8	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A8	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
A9	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
A9	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
ABS	.\openMSP430_defines.v	/^`define ABS      6$/;"	c
ACLK_DIVIDER	.\openMSP430_defines.v	/^`define ACLK_DIVIDER$/;"	c
ADD	.\openMSP430_defines.v	/^`define ADD    1$/;"	c
ADDC	.\openMSP430_defines.v	/^`define ADDC   2$/;"	c
ADDER_ROUND_BITS	.\altera_mf.v	/^    `define ADDER_ROUND_BITS (((adder1_rounding == "NO") && (adder3_rounding == "NO"))? 1 :(int_width_a + int_width_b) - 17)$/;"	c
ADDR_MSB	.\ram.v	/^parameter ADDR_MSB   =  6;         \/\/ MSB of the address bus$/;"	c
ADDR_MSB	.\rom.v	/^parameter ADDR_MSB   =  6;         \/\/ MSB of the address bus$/;"	c
ALTERA_DEVICE_FAMILIES	.\altera_mf.v	/^module ALTERA_DEVICE_FAMILIES;$/;"	m
ALTERA_DEVICE_FAMILIES	.\work\@a@l@t@e@r@a_@d@e@v@i@c@e_@f@a@m@i@l@i@e@s\_primary.vhd	/^entity ALTERA_DEVICE_FAMILIES is$/;"	e
ALTERA_MF_HINT_EVALUATION	.\altera_mf.v	/^module ALTERA_MF_HINT_EVALUATION;$/;"	m
ALTERA_MF_HINT_EVALUATION	.\work\@a@l@t@e@r@a_@m@f_@h@i@n@t_@e@v@a@l@u@a@t@i@o@n\_primary.vhd	/^entity ALTERA_MF_HINT_EVALUATION is$/;"	e
ALTERA_MF_MEMORY_INITIALIZATION	.\altera_mf.v	/^module ALTERA_MF_MEMORY_INITIALIZATION;$/;"	m
ALTERA_MF_MEMORY_INITIALIZATION	.\work\@a@l@t@e@r@a_@m@f_@m@e@m@o@r@y_@i@n@i@t@i@a@l@i@z@a@t@i@o@n\_primary.vhd	/^entity ALTERA_MF_MEMORY_INITIALIZATION is$/;"	e
ALU_ADD	.\openMSP430_defines.v	/^`define ALU_ADD       3$/;"	c
ALU_AND	.\openMSP430_defines.v	/^`define ALU_AND       4$/;"	c
ALU_DADD	.\openMSP430_defines.v	/^`define ALU_DADD      7$/;"	c
ALU_INC	.\openMSP430_defines.v	/^`define ALU_INC       1$/;"	c
ALU_INC_C	.\openMSP430_defines.v	/^`define ALU_INC_C     2$/;"	c
ALU_OR	.\openMSP430_defines.v	/^`define ALU_OR        5$/;"	c
ALU_SHIFT	.\openMSP430_defines.v	/^`define ALU_SHIFT    10$/;"	c
ALU_SRC_INV	.\openMSP430_defines.v	/^`define ALU_SRC_INV   0$/;"	c
ALU_STAT_7	.\openMSP430_defines.v	/^`define ALU_STAT_7    8$/;"	c
ALU_STAT_F	.\openMSP430_defines.v	/^`define ALU_STAT_F    9$/;"	c
ALU_XOR	.\openMSP430_defines.v	/^`define ALU_XOR       6$/;"	c
AND	.\openMSP430_defines.v	/^`define AND   11$/;"	c
ARRIAII_RX_STYLE	.\altera_mf.v	/^    parameter ARRIAII_RX_STYLE = ((((intended_device_family == "Arria II GX") || (intended_device_family == "ARRIA II GX") || (intended_device_family == "arria ii gx") || (intended_device_family == "ArriaIIGX") || (intended_device_family == "ARRIAIIGX") || (intended_device_family == "arriaiigx") || (intended_device_family == "Arria IIGX") || (intended_device_family == "ARRIA IIGX") || (intended_device_family == "arria iigx") || (intended_device_family == "ArriaII GX") || (intended_device_family == "ARRIAII GX") || (intended_device_family == "arriaii gx") || (intended_device_family == "Arria II") || (intended_device_family == "ARRIA II") || (intended_device_family == "arria ii") || (intended_device_family == "ArriaII") || (intended_device_family == "ARRIAII") || (intended_device_family == "arriaii") || (intended_device_family == "Arria II (GX\/E)") || (intended_device_family == "ARRIA II (GX\/E)") || (intended_device_family == "arria ii (gx\/e)") || (intended_device_family == "ArriaII(GX\/E)") || (intended_device_family == "ARRIAII(GX\/E)") || (intended_device_family == "arriaii(gx\/e)") || (intended_device_family == "PIRANHA") || (intended_device_family == "piranha"))$/;"	c
ARRIAII_RX_STYLE	.\altera_mf.v	/^    parameter ARRIAII_RX_STYLE = 0;$/;"	c
ASIC	.\openMSP430_defines.v	/^`define ASIC$/;"	c
ASIC_CLOCKING	.\openMSP430_defines.v	/^`define ASIC_CLOCKING$/;"	c
AWORD	.\altera_mf.v	/^`define AWORD           8$/;"	c
BASE_ADDR	.\dma_decode_16b.v	/^parameter       [14:0] BASE_ADDR   = 15'h0100;$/;"	c
BASE_ADDR	.\dma_tfbuffer.v	/^ parameter [14:0]               BASE_ADDR = 15'h0190;$/;"	c
BASE_ADDR	.\omsp_clock_module.v	/^parameter       [14:0] BASE_ADDR   = 15'h0050;$/;"	c
BASE_ADDR	.\omsp_gpio.v	/^parameter       [14:0] BASE_ADDR   = 15'h0000;$/;"	c
BASE_ADDR	.\omsp_multiplier.v	/^parameter       [14:0] BASE_ADDR   = 15'h0130;$/;"	c
BASE_ADDR	.\omsp_sfr.v	/^parameter       [14:0] BASE_ADDR   = 15'h0000;$/;"	c
BASE_ADDR	.\omsp_timerA.v	/^parameter       [14:0] BASE_ADDR  = 15'h0100;$/;"	c
BASE_ADDR	.\omsp_watchdog.v	/^parameter       [14:0] BASE_ADDR   = 15'h0120;$/;"	c
BASE_ADDR	.\template_periph_16b.v	/^parameter       [14:0] BASE_ADDR   = 15'h0190;$/;"	c
BASE_ADDR	.\template_periph_8b.v	/^parameter       [14:0] BASE_ADDR   = 15'h0090;$/;"	c
BASE_D	.\omsp_dbg.v	/^parameter           BASE_D       = {{NR_REG-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\dma_decode_16b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_clock_module.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_gpio.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_multiplier.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_sfr.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_timerA.v	/^parameter [DEC_SZ-1:0] BASE_REG   =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\omsp_watchdog.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\template_periph_16b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BASE_REG	.\template_periph_8b.v	/^parameter [DEC_SZ-1:0] BASE_REG    =  {{DEC_SZ-1{1'b0}}, 1'b1};$/;"	c
BCSCTL1	.\omsp_clock_module.v	/^parameter [DEC_WD-1:0] BCSCTL1     =  'h7,$/;"	c
BCSCTL1_D	.\omsp_clock_module.v	/^parameter [DEC_SZ-1:0] BCSCTL1_D   = (BASE_REG << BCSCTL1),$/;"	c
BCSCTL2	.\omsp_clock_module.v	/^                       BCSCTL2     =  'h8;$/;"	c
BCSCTL2_D	.\omsp_clock_module.v	/^                       BCSCTL2_D   = (BASE_REG << BCSCTL2);$/;"	c
BIC	.\openMSP430_defines.v	/^`define BIC    8$/;"	c
BIS	.\openMSP430_defines.v	/^`define BIS    9$/;"	c
BIT	.\openMSP430_defines.v	/^`define BIT    7$/;"	c
BPS9600	.\tb_openMSP430_fpga.v	/^parameter BPS9600   = 32'd104_167;      \/\/104167ns= 5207 * 20  在50M时钟下面就是5207个clk上升沿 cnt = mclk\/bps(50 000 000 \/9600 = 5207) (100 000 000 \/ 9600 = 104167)$/;"	c
BPS_PARA	.\uart_speed_select.v	/^`define        BPS_PARA        5207    \/\/波特率为9600时的分频计数值    50M\/9600-1$/;"	c
BPS_PARA_2	.\uart_speed_select.v	/^`define        BPS_PARA_2      2603    \/\/波特率为9600时的分频计数值的一半，用于数据采样$/;"	c
BRK0_ADDR0	.\omsp_dbg.v	/^parameter           BRK0_ADDR0   = 6'h0A;$/;"	c
BRK0_ADDR0_D	.\omsp_dbg.v	/^parameter           BRK0_ADDR0_D = (BASE_D << BRK0_ADDR0);$/;"	c
BRK0_ADDR1	.\omsp_dbg.v	/^parameter           BRK0_ADDR1   = 6'h0B;$/;"	c
BRK0_ADDR1_D	.\omsp_dbg.v	/^parameter           BRK0_ADDR1_D = (BASE_D << BRK0_ADDR1);$/;"	c
BRK0_CTL	.\omsp_dbg.v	/^parameter           BRK0_CTL     = 6'h08;$/;"	c
BRK0_CTL_D	.\omsp_dbg.v	/^parameter           BRK0_CTL_D   = (BASE_D << BRK0_CTL);$/;"	c
BRK0_STAT	.\omsp_dbg.v	/^parameter           BRK0_STAT    = 6'h09;$/;"	c
BRK0_STAT_D	.\omsp_dbg.v	/^parameter           BRK0_STAT_D  = (BASE_D << BRK0_STAT);$/;"	c
BRK1_ADDR0	.\omsp_dbg.v	/^parameter           BRK1_ADDR0   = 6'h0E;$/;"	c
BRK1_ADDR0_D	.\omsp_dbg.v	/^parameter           BRK1_ADDR0_D = (BASE_D << BRK1_ADDR0);$/;"	c
BRK1_ADDR1	.\omsp_dbg.v	/^parameter           BRK1_ADDR1   = 6'h0F;$/;"	c
BRK1_ADDR1_D	.\omsp_dbg.v	/^parameter           BRK1_ADDR1_D = (BASE_D << BRK1_ADDR1);$/;"	c
BRK1_CTL	.\omsp_dbg.v	/^parameter           BRK1_CTL     = 6'h0C;$/;"	c
BRK1_CTL_D	.\omsp_dbg.v	/^parameter           BRK1_CTL_D   = (BASE_D << BRK1_CTL);$/;"	c
BRK1_STAT	.\omsp_dbg.v	/^parameter           BRK1_STAT    = 6'h0D;$/;"	c
BRK1_STAT_D	.\omsp_dbg.v	/^parameter           BRK1_STAT_D  = (BASE_D << BRK1_STAT);$/;"	c
BRK2_ADDR0	.\omsp_dbg.v	/^parameter           BRK2_ADDR0   = 6'h12;$/;"	c
BRK2_ADDR0_D	.\omsp_dbg.v	/^parameter           BRK2_ADDR0_D = (BASE_D << BRK2_ADDR0);$/;"	c
BRK2_ADDR1	.\omsp_dbg.v	/^parameter           BRK2_ADDR1   = 6'h13;$/;"	c
BRK2_ADDR1_D	.\omsp_dbg.v	/^parameter           BRK2_ADDR1_D = (BASE_D << BRK2_ADDR1);$/;"	c
BRK2_CTL	.\omsp_dbg.v	/^parameter           BRK2_CTL     = 6'h10;$/;"	c
BRK2_CTL_D	.\omsp_dbg.v	/^parameter           BRK2_CTL_D   = (BASE_D << BRK2_CTL);$/;"	c
BRK2_STAT	.\omsp_dbg.v	/^parameter           BRK2_STAT    = 6'h11;$/;"	c
BRK2_STAT_D	.\omsp_dbg.v	/^parameter           BRK2_STAT_D  = (BASE_D << BRK2_STAT);$/;"	c
BRK3_ADDR0	.\omsp_dbg.v	/^parameter           BRK3_ADDR0   = 6'h16;$/;"	c
BRK3_ADDR0_D	.\omsp_dbg.v	/^parameter           BRK3_ADDR0_D = (BASE_D << BRK3_ADDR0);$/;"	c
BRK3_ADDR1	.\omsp_dbg.v	/^parameter           BRK3_ADDR1   = 6'h17;$/;"	c
BRK3_ADDR1_D	.\omsp_dbg.v	/^parameter           BRK3_ADDR1_D = (BASE_D << BRK3_ADDR1);$/;"	c
BRK3_CTL	.\omsp_dbg.v	/^parameter           BRK3_CTL     = 6'h14;$/;"	c
BRK3_CTL_D	.\omsp_dbg.v	/^parameter           BRK3_CTL_D   = (BASE_D << BRK3_CTL);$/;"	c
BRK3_STAT	.\omsp_dbg.v	/^parameter           BRK3_STAT    = 6'h15;$/;"	c
BRK3_STAT_D	.\omsp_dbg.v	/^parameter           BRK3_STAT_D  = (BASE_D << BRK3_STAT);$/;"	c
BRK_ADDR0	.\omsp_dbg_hwbrk.v	/^          BRK_ADDR0 = 2,$/;"	c
BRK_ADDR1	.\omsp_dbg_hwbrk.v	/^          BRK_ADDR1 = 3;$/;"	c
BRK_CTL	.\omsp_dbg_hwbrk.v	/^parameter BRK_CTL   = 0,$/;"	c
BRK_EN	.\openMSP430_defines.v	/^`define BRK_EN      2$/;"	c
BRK_I_EN	.\openMSP430_defines.v	/^`define BRK_I_EN    3$/;"	c
BRK_MODE	.\openMSP430_defines.v	/^`define BRK_MODE    1:0$/;"	c
BRK_MODE_RD	.\openMSP430_defines.v	/^`define BRK_MODE_RD 0$/;"	c
BRK_MODE_WR	.\openMSP430_defines.v	/^`define BRK_MODE_WR 1$/;"	c
BRK_RANGE	.\openMSP430_defines.v	/^`define BRK_RANGE   4$/;"	c
BRK_STAT	.\omsp_dbg_hwbrk.v	/^          BRK_STAT  = 1,$/;"	c
BURST_MODE_LATENCY_COUNT	.\altera_mf.v	/^    parameter    BURST_MODE_LATENCY_COUNT    =    4;$/;"	c
C	.\omsp_alu.v	/^wire    C           = inst_bw ?  alu_out[8]       : alu_out_nxt[16];$/;"	n
C0	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C0	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C0	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C0	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C0_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C0_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C0_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C0_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C1	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C1	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C1	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C1	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C1_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C1_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C1_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C1_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C2	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C2	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C2	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C2	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C2_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C2_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C2_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C2_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C3	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C3	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C3	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C3	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C3_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C3_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C3_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C3_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C4	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C4	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C4	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C4	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C4_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C4_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C4_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C4_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C5	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C5	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C5	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C5	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5;$/;"	r
C5_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C5_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
C5_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C5_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode;$/;"	r
C6	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C6	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C6_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C6_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C7	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C7	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C7_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C7_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C8	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C8	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C8_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C8_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
C9	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C9	.\altera_mf.v	/^    integer C0, C1, C2, C3, C4, C5, C6, C7, C8, C9;$/;"	r
C9_mode	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
C9_mode	.\altera_mf.v	/^    reg [8*6:1] C0_mode, C1_mode, C2_mode, C3_mode, C4_mode, C5_mode, C6_mode, C7_mode, C8_mode, C9_mode;$/;"	r
CALL	.\openMSP430_defines.v	/^`define CALL   5$/;"	c
CARRIAGE_RETURN	.\altera_mf.v	/^`define CARRIAGE_RETURN  8'h0D$/;"	c
CDR_ST	.\altera_mf.v	/^`define CDR_ST  5'b00111$/;"	c
CHA0	.\dma_pri.v	/^parameter CHA0       = 4'b0010;$/;"	c
CHA1	.\dma_pri.v	/^parameter CHA1       = 4'b0100;$/;"	c
CHA2	.\dma_pri.v	/^parameter CHA2       = 4'b1000;$/;"	c
CIR_ST	.\altera_mf.v	/^`define CIR_ST  5'b01010$/;"	c
CLK_PERIOD	.\altera_mf.v	/^`define CLK_PERIOD 100000$/;"	c
CLOCK_GATING	.\openMSP430_defines.v	/^`define CLOCK_GATING$/;"	c
CLOCK_PERIOD	.\altera_mf.v	/^    parameter CLOCK_PERIOD = (deserialization_factor > 2) ? inclock_period : 10000;$/;"	c
CLOCK_PERIOD	.\altera_mf.v	/^    parameter CLOCK_PERIOD = (deserialization_factor > 2)$/;"	c
CLOSE_BRACKET	.\altera_mf.v	/^`define CLOSE_BRACKET   "]"$/;"	c
CMP	.\openMSP430_defines.v	/^`define CMP    5$/;"	c
CNTRL1	.\template_periph_16b.v	/^parameter [DEC_WD-1:0] CNTRL1      = 'h0,$/;"	c
CNTRL1	.\template_periph_8b.v	/^parameter [DEC_WD-1:0] CNTRL1      =  'h0,$/;"	c
CNTRL1_D	.\template_periph_16b.v	/^parameter [DEC_SZ-1:0] CNTRL1_D    = (BASE_REG << CNTRL1),$/;"	c
CNTRL1_D	.\template_periph_8b.v	/^parameter [DEC_SZ-1:0] CNTRL1_D  = (BASE_REG << CNTRL1),$/;"	c
CNTRL2	.\template_periph_16b.v	/^                       CNTRL2      = 'h2,$/;"	c
CNTRL2	.\template_periph_8b.v	/^                       CNTRL2      =  'h1,$/;"	c
CNTRL2_D	.\template_periph_16b.v	/^                       CNTRL2_D    = (BASE_REG << CNTRL2),$/;"	c
CNTRL2_D	.\template_periph_8b.v	/^                       CNTRL2_D  = (BASE_REG << CNTRL2), $/;"	c
CNTRL3	.\template_periph_16b.v	/^                       CNTRL3      = 'h4,$/;"	c
CNTRL3	.\template_periph_8b.v	/^                       CNTRL3      =  'h2,$/;"	c
CNTRL3_D	.\template_periph_16b.v	/^                       CNTRL3_D    = (BASE_REG << CNTRL3),$/;"	c
CNTRL3_D	.\template_periph_8b.v	/^                       CNTRL3_D  = (BASE_REG << CNTRL3), $/;"	c
CNTRL4	.\template_periph_16b.v	/^                       CNTRL4      = 'h6;$/;"	c
CNTRL4	.\template_periph_8b.v	/^                       CNTRL4      =  'h3;$/;"	c
CNTRL4_D	.\template_periph_16b.v	/^                       CNTRL4_D    = (BASE_REG << CNTRL4);$/;"	c
CNTRL4_D	.\template_periph_8b.v	/^                       CNTRL4_D  = (BASE_REG << CNTRL4); $/;"	c
CODE_CTRLOUT	.\dma_tfbuffer.v	/^                         CODE_CTRLOUT                = 'h4,$/;"	c
CODE_CTRLOUT_D	.\dma_tfbuffer.v	/^                         CODE_CTRLOUT_D      = (DEC_REG << CODE_CTRLOUT),$/;"	c
COLON	.\altera_mf.v	/^`define COLON           ":"$/;"	c
CONST	.\openMSP430_defines.v	/^`define CONST    7$/;"	c
CPUOFF_EN	.\openMSP430_defines.v	/^`define CPUOFF_EN$/;"	c
CPU_CTL	.\omsp_dbg.v	/^parameter           CPU_CTL      = 6'h02;$/;"	c
CPU_CTL_D	.\omsp_dbg.v	/^parameter           CPU_CTL_D    = (BASE_D << CPU_CTL);$/;"	c
CPU_ID_HI	.\omsp_dbg.v	/^parameter           CPU_ID_HI    = 6'h01;$/;"	c
CPU_ID_HI	.\omsp_sfr.v	/^                       CPU_ID_HI   =  'h6,$/;"	c
CPU_ID_HI_D	.\omsp_dbg.v	/^parameter           CPU_ID_HI_D  = (BASE_D << CPU_ID_HI);$/;"	c
CPU_ID_HI_D	.\omsp_sfr.v	/^                       CPU_ID_HI_D = (BASE_REG << CPU_ID_HI),$/;"	c
CPU_ID_LO	.\omsp_dbg.v	/^parameter           CPU_ID_LO    = 6'h00;$/;"	c
CPU_ID_LO	.\omsp_sfr.v	/^                       CPU_ID_LO   =  'h4,$/;"	c
CPU_ID_LO_D	.\omsp_dbg.v	/^parameter           CPU_ID_LO_D  = (BASE_D << CPU_ID_LO);$/;"	c
CPU_ID_LO_D	.\omsp_sfr.v	/^                       CPU_ID_LO_D = (BASE_REG << CPU_ID_LO),$/;"	c
CPU_NR	.\omsp_dbg.v	/^parameter           CPU_NR       = 6'h18;$/;"	c
CPU_NR	.\omsp_sfr.v	/^                       CPU_NR      =  'h8;$/;"	c
CPU_NR_D	.\omsp_dbg.v	/^parameter           CPU_NR_D     = (BASE_D << CPU_NR);$/;"	c
CPU_NR_D	.\omsp_sfr.v	/^                       CPU_NR_D    = (BASE_REG << CPU_NR);$/;"	c
CPU_RST	.\openMSP430_defines.v	/^`define CPU_RST     6$/;"	c
CPU_STAT	.\omsp_dbg.v	/^parameter           CPU_STAT     = 6'h03;$/;"	c
CPU_STAT_D	.\omsp_dbg.v	/^parameter           CPU_STAT_D   = (BASE_D << CPU_STAT);$/;"	c
CPU_VERSION	.\openMSP430_defines.v	/^`define CPU_VERSION   3'h3$/;"	c
CYCIIIGL_PLL_WORD_LENGTH	.\altera_mf.v	/^`define CYCIIIGL_PLL_WORD_LENGTH 18$/;"	c
CYCIII_PLL_WORD_LENGTH	.\altera_mf.v	/^`define CYCIII_PLL_WORD_LENGTH 18$/;"	c
CYCLONEIII_RX_STYLE	.\altera_mf.v	/^    parameter CYCLONEIII_RX_STYLE = ((((intended_device_family == "Cyclone III") || (intended_device_family == "CYCLONE III") || (intended_device_family == "cyclone iii") || (intended_device_family == "CycloneIII") || (intended_device_family == "CYCLONEIII") || (intended_device_family == "cycloneiii") || (intended_device_family == "Barracuda") || (intended_device_family == "BARRACUDA") || (intended_device_family == "barracuda") || (intended_device_family == "Cuda") || (intended_device_family == "CUDA") || (intended_device_family == "cuda") || (intended_device_family == "CIII") || (intended_device_family == "ciii"))$/;"	c
CYCLONEIII_TX_STYLE	.\altera_mf.v	/^    parameter CYCLONEIII_TX_STYLE = ((((intended_device_family == "Cyclone III") || (intended_device_family == "CYCLONE III") || (intended_device_family == "cyclone iii") || (intended_device_family == "CycloneIII") || (intended_device_family == "CYCLONEIII") || (intended_device_family == "cycloneiii") || (intended_device_family == "Barracuda") || (intended_device_family == "BARRACUDA") || (intended_device_family == "barracuda") || (intended_device_family == "Cuda") || (intended_device_family == "CUDA") || (intended_device_family == "cuda") || (intended_device_family == "CIII") || (intended_device_family == "ciii"))$/;"	c
CYCLONEII_RX_STYLE	.\altera_mf.v	/^    parameter CYCLONEII_RX_STYLE = ((((intended_device_family == "Cyclone II") || (intended_device_family == "CYCLONE II") || (intended_device_family == "cyclone ii") || (intended_device_family == "Cycloneii") || (intended_device_family == "CYCLONEII") || (intended_device_family == "cycloneii") || (intended_device_family == "Magellan") || (intended_device_family == "MAGELLAN") || (intended_device_family == "magellan") || (intended_device_family == "CycloneII") || (intended_device_family == "CYCLONEII") || (intended_device_family == "cycloneii"))$/;"	c
CYCLONEII_TX_STYLE	.\altera_mf.v	/^    parameter CYCLONEII_TX_STYLE = ((((intended_device_family == "Cyclone II") || (intended_device_family == "CYCLONE II") || (intended_device_family == "cyclone ii") || (intended_device_family == "Cycloneii") || (intended_device_family == "CYCLONEII") || (intended_device_family == "cycloneii") || (intended_device_family == "Magellan") || (intended_device_family == "MAGELLAN") || (intended_device_family == "magellan") || (intended_device_family == "CycloneII") || (intended_device_family == "CYCLONEII") || (intended_device_family == "cycloneii"))$/;"	c
CYCLONE_RX_STYLE	.\altera_mf.v	/^    parameter CYCLONE_RX_STYLE = ((((intended_device_family == "Cyclone") || (intended_device_family == "CYCLONE") || (intended_device_family == "cyclone") || (intended_device_family == "ACEX2K") || (intended_device_family == "acex2k") || (intended_device_family == "ACEX 2K") || (intended_device_family == "acex 2k") || (intended_device_family == "Tornado") || (intended_device_family == "TORNADO") || (intended_device_family == "tornado"))$/;"	c
CYCLONE_TX_STYLE	.\altera_mf.v	/^    parameter CYCLONE_TX_STYLE = ((((intended_device_family == "Cyclone") || (intended_device_family == "CYCLONE") || (intended_device_family == "cyclone") || (intended_device_family == "ACEX2K") || (intended_device_family == "acex2k") || (intended_device_family == "ACEX 2K") || (intended_device_family == "acex 2k") || (intended_device_family == "Tornado") || (intended_device_family == "TORNADO") || (intended_device_family == "tornado"))$/;"	c
C_	.\omsp_alu.v	/^   input       C_;$/;"	p
DADD	.\openMSP430_defines.v	/^`define DADD   6$/;"	c
DBG_DCO_FREQ	.\openMSP430_defines.v	/^`define DBG_DCO_FREQ  20000000$/;"	c
DBG_EN	.\openMSP430_defines.v	/^`define DBG_EN$/;"	c
DBG_RST_BRK_EN	.\openMSP430_defines.v	/^`define DBG_RST_BRK_EN$/;"	c
DBG_SWBRK_OP	.\openMSP430_defines.v	/^`define DBG_SWBRK_OP 16'h4343$/;"	c
DBG_UART	.\openMSP430_defines.v	/^`define DBG_UART$/;"	c
DBG_UART_ADDR	.\openMSP430_defines.v	/^`define DBG_UART_ADDR 16:11$/;"	c
DBG_UART_AUTO_SYNC	.\openMSP430_defines.v	/^`define DBG_UART_AUTO_SYNC$/;"	c
DBG_UART_BAUD	.\openMSP430_defines.v	/^`define DBG_UART_BAUD 2000000$/;"	c
DBG_UART_BW	.\openMSP430_defines.v	/^`define DBG_UART_BW   17$/;"	c
DBG_UART_CNT	.\openMSP430_defines.v	/^`define DBG_UART_CNT ((`DBG_DCO_FREQ\/`DBG_UART_BAUD)-1)$/;"	c
DBG_UART_WR	.\openMSP430_defines.v	/^`define DBG_UART_WR   18$/;"	c
DBG_UART_XFER_CNT_W	.\openMSP430_defines.v	/^`define DBG_UART_XFER_CNT_W 16$/;"	c
DECODED_SCANS_LENGTH	.\altera_mf.v	/^`define DECODED_SCANS_LENGTH (sld_node_total_length + ((sld_node_n_scan * `DEFAULT_BIT_LENGTH) * 2) + (sld_node_n_scan * `TYPE_BIT_LENGTH) - 1)$/;"	c
DECODER_BUFFEROUT	.\dma_tfbuffer.v	/^                         DECODER_BUFFEROUT           = 'h2,$/;"	c
DECODER_BUFFEROUT_D	.\dma_tfbuffer.v	/^                         DECODER_BUFFEROUT_D = (DEC_REG << DECODER_BUFFEROUT),      \/\/0000_0100$/;"	c
DEC_REG	.\dma_tfbuffer.v	/^parameter [DEC_SZ-1:0]   DEC_REG = {{DEC_SZ-1{1'b0}},1'b1};                         \/\/0000_0001$/;"	c
DEC_SZ	.\dma_decode_16b.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\dma_tfbuffer.v	/^parameter                DEC_SZ  = (1 << DEC_WD);                                   \/\/8$/;"	c
DEC_SZ	.\omsp_clock_module.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\omsp_gpio.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\omsp_multiplier.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\omsp_sfr.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\omsp_timerA.v	/^parameter              DEC_SZ     =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\omsp_watchdog.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\template_periph_16b.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_SZ	.\template_periph_8b.v	/^parameter              DEC_SZ      =  (1 << DEC_WD);$/;"	c
DEC_WD	.\dma_decode_16b.v	/^parameter              DEC_WD      =  8;$/;"	c
DEC_WD	.\dma_tfbuffer.v	/^ parameter DEC_WD    = 3;$/;"	c
DEC_WD	.\omsp_clock_module.v	/^parameter              DEC_WD      =  4;$/;"	c
DEC_WD	.\omsp_gpio.v	/^parameter              DEC_WD      =  6;$/;"	c
DEC_WD	.\omsp_multiplier.v	/^parameter              DEC_WD      =  4;$/;"	c
DEC_WD	.\omsp_sfr.v	/^parameter              DEC_WD      =  4;$/;"	c
DEC_WD	.\omsp_timerA.v	/^parameter              DEC_WD     =  7;$/;"	c
DEC_WD	.\omsp_watchdog.v	/^parameter              DEC_WD      =  2;$/;"	c
DEC_WD	.\template_periph_16b.v	/^parameter              DEC_WD      =  3;$/;"	c
DEC_WD	.\template_periph_8b.v	/^parameter              DEC_WD      =  2;$/;"	c
DEFAULT_BIT_LENGTH	.\altera_mf.v	/^`define DEFAULT_BIT_LENGTH 32$/;"	c
DEFAULT_SCAN_LENGTH	.\altera_mf.v	/^`define DEFAULT_SCAN_LENGTH (sld_node_n_scan * `DEFAULT_BIT_LENGTH)$/;"	c
DELAY_RESOLUTION	.\altera_mf.v	/^`define DELAY_RESOLUTION 10000$/;"	c
DIR	.\openMSP430_defines.v	/^`define DIR      0$/;"	c
DIVAx	.\openMSP430_defines.v	/^`define DIVAx       5:4$/;"	c
DIVMx	.\openMSP430_defines.v	/^`define DIVMx       5:4$/;"	c
DIVSx	.\openMSP430_defines.v	/^`define DIVSx       2:1$/;"	c
DMA0CTL	.\dma_decode_16b.v	/^                       DMA0CTL     = 'hE0,$/;"	c
DMA0CTL_D	.\dma_decode_16b.v	/^                       DMA0CTL_D     = (BASE_REG << DMA0CTL  ),$/;"	c
DMA0DA	.\dma_decode_16b.v	/^					             DMA0DA      = 'hE4,$/;"	c
DMA0DA_D	.\dma_decode_16b.v	/^					             DMA0DA_D      = (BASE_REG << DMA0DA   ),$/;"	c
DMA0SA	.\dma_decode_16b.v	/^                       DMA0SA      = 'hE2,$/;"	c
DMA0SA_D	.\dma_decode_16b.v	/^                       DMA0SA_D      = (BASE_REG << DMA0SA   ),$/;"	c
DMA0SZ	.\dma_decode_16b.v	/^					             DMA0SZ      = 'hE6,$/;"	c
DMA0SZ_D	.\dma_decode_16b.v	/^					             DMA0SZ_D      = (BASE_REG << DMA0SZ   ),$/;"	c
DMA0TSELx	.\dma_pri.v	/^wire  [3:0]                            DMA0TSELx       ;$/;"	n
DMA1CTL	.\dma_decode_16b.v	/^					             DMA1CTL     = 'hE8,$/;"	c
DMA1CTL_D	.\dma_decode_16b.v	/^					             DMA1CTL_D     = (BASE_REG << DMA1CTL  ),$/;"	c
DMA1DA	.\dma_decode_16b.v	/^					             DMA1DA      = 'hEC,$/;"	c
DMA1DA_D	.\dma_decode_16b.v	/^					             DMA1DA_D      = (BASE_REG << DMA1DA   ),$/;"	c
DMA1SA	.\dma_decode_16b.v	/^					             DMA1SA      = 'hEA,$/;"	c
DMA1SA_D	.\dma_decode_16b.v	/^					             DMA1SA_D      = (BASE_REG << DMA1SA   ),$/;"	c
DMA1SZ	.\dma_decode_16b.v	/^					             DMA1SZ      = 'hEE,$/;"	c
DMA1SZ_D	.\dma_decode_16b.v	/^					             DMA1SZ_D      = (BASE_REG << DMA1SZ   ),$/;"	c
DMA1TSELx	.\dma_pri.v	/^wire  [3:0]                            DMA1TSELx       ;$/;"	n
DMA2CTL	.\dma_decode_16b.v	/^					             DMA2CTL     = 'hF0,$/;"	c
DMA2CTL_D	.\dma_decode_16b.v	/^					             DMA2CTL_D     = (BASE_REG << DMA2CTL  ),$/;"	c
DMA2DA	.\dma_decode_16b.v	/^					             DMA2DA      = 'hF4,$/;"	c
DMA2DA_D	.\dma_decode_16b.v	/^					             DMA2DA_D      = (BASE_REG << DMA2DA   ),$/;"	c
DMA2SA	.\dma_decode_16b.v	/^					             DMA2SA      = 'hF2,$/;"	c
DMA2SA_D	.\dma_decode_16b.v	/^					             DMA2SA_D      = (BASE_REG << DMA2SA   ),$/;"	c
DMA2SZ	.\dma_decode_16b.v	/^					             DMA2SZ      = 'hF6,$/;"	c
DMA2SZ_D	.\dma_decode_16b.v	/^					             DMA2SZ_D      = (BASE_REG << DMA2SZ   ),$/;"	c
DMA2TSELx	.\dma_pri.v	/^wire  [3:0]                            DMA2TSELx       ;$/;"	n
DMACTL0	.\dma_decode_16b.v	/^parameter [DEC_WD-1:0] DMACTL0     = 'h22,$/;"	c
DMACTL0_D	.\dma_decode_16b.v	/^parameter [DEC_SZ-1:0] DMACTL0_D     = (BASE_REG << DMACTL0  ),$/;"	c
DMACTL1	.\dma_decode_16b.v	/^                       DMACTL1     = 'h24,$/;"	c
DMACTL1_D	.\dma_decode_16b.v	/^                       DMACTL1_D     = (BASE_REG << DMACTL1  ),$/;"	c
DMAONFETCH	.\dma_pri.v	/^wire                                   DMAONFETCH   ;$/;"	n
DMA_CPUOFF	.\openMSP430_defines.v	/^`define DMA_CPUOFF  0$/;"	c
DMA_IF_EN	.\openMSP430_defines.v	/^`define DMA_IF_EN$/;"	c
DMA_OSCOFF	.\openMSP430_defines.v	/^`define DMA_OSCOFF  1$/;"	c
DMA_SCG0	.\openMSP430_defines.v	/^`define DMA_SCG0    2$/;"	c
DMA_SCG1	.\openMSP430_defines.v	/^`define DMA_SCG1    3$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH        6$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH        7$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH        8$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH        9$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       10$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       11$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       12$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       13$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       14$/;"	c
DMEM_AWIDTH	.\openMSP430_defines.v	/^  `define DMEM_AWIDTH       `DMEM_CUSTOM_AWIDTH$/;"	c
DMEM_BASE	.\openMSP430_defines.v	/^`define DMEM_BASE  `PER_SIZE$/;"	c
DMEM_CUSTOM_AWIDTH	.\openMSP430_defines.v	/^`define DMEM_CUSTOM_AWIDTH       14$/;"	c
DMEM_CUSTOM_SIZE	.\openMSP430_defines.v	/^`define DMEM_CUSTOM_SIZE       28672$/;"	c
DMEM_END	.\omsp_mem_backbone.v	/^parameter          DMEM_END      = `DMEM_BASE+`DMEM_SIZE;$/;"	c
DMEM_MSB	.\openMSP430_defines.v	/^`define DMEM_MSB   `DMEM_AWIDTH-1$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE         `DMEM_CUSTOM_SIZE$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE        128$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE        256$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE        512$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       1024$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       2048$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       2560$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       4096$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       5120$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE       8192$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE      10240$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE      16384$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE      24576$/;"	c
DMEM_SIZE	.\openMSP430_defines.v	/^  `define DMEM_SIZE      32768$/;"	c
DMEM_SIZE_CUSTOM	.\openMSP430_defines.v	/^`define DMEM_SIZE_CUSTOM$/;"	c
DOT	.\altera_mf.v	/^`define DOT             "."$/;"	c
DOUBLE_DESER	.\altera_mf.v	/^    parameter DOUBLE_DESER = deserialization_factor*2;$/;"	c
DRS_ST	.\altera_mf.v	/^`define DRS_ST  5'b00011$/;"	c
E0	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E0	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
E0_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E0_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
E1	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E1	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
E1DR_ST	.\altera_mf.v	/^`define E1DR_ST 5'b01011$/;"	c
E1IR_ST	.\altera_mf.v	/^`define E1IR_ST 5'b00100$/;"	c
E1_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E1_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
E2	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E2	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
E2DR_ST	.\altera_mf.v	/^`define E2DR_ST 5'b01000$/;"	c
E2IR_ST	.\altera_mf.v	/^`define E2IR_ST 5'b00110$/;"	c
E2_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E2_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
E3	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E3	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
E3_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
E3_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
EGPP_SCAN_CHAIN	.\altera_mf.v	/^    parameter EGPP_SCAN_CHAIN = 289;$/;"	c
ENCODER_BUFFERIN	.\dma_tfbuffer.v	/^ parameter [DEC_WD-1 :0] ENCODER_BUFFERIN            = 'h0,$/;"	c
ENCODER_BUFFERIN_D	.\dma_tfbuffer.v	/^parameter [DEC_SZ-1:0]   ENCODER_BUFFERIN_D  = (DEC_REG << ENCODER_BUFFERIN),       \/\/0000_0001$/;"	c
EOF	.\altera_mf.v	/^`define EOF -1$/;"	c
EQUAL	.\altera_mf.v	/^`define EQUAL           "="$/;"	c
EXEC_NO_WR	.\openMSP430_defines.v	/^`define EXEC_NO_WR   11$/;"	c
EXT_STR	.\altera_mf.v	/^`define EXT_STR         "ver"$/;"	c
E_DST_AD	.\omsp_frontend.v	/^parameter E_DST_AD    = `E_DST_AD;$/;"	c
E_DST_AD	.\openMSP430_defines.v	/^`define E_DST_AD    4'h8$/;"	c
E_DST_RD	.\omsp_frontend.v	/^parameter E_DST_RD    = `E_DST_RD;$/;"	c
E_DST_RD	.\openMSP430_defines.v	/^`define E_DST_RD    4'h9$/;"	c
E_DST_WR	.\omsp_frontend.v	/^parameter E_DST_WR    = `E_DST_WR;$/;"	c
E_DST_WR	.\openMSP430_defines.v	/^`define E_DST_WR    4'hA$/;"	c
E_EXEC	.\omsp_frontend.v	/^parameter E_EXEC      = `E_EXEC;$/;"	c
E_EXEC	.\openMSP430_defines.v	/^`define E_EXEC      4'hB$/;"	c
E_IDLE	.\omsp_frontend.v	/^parameter E_IDLE      = `E_IDLE;$/;"	c
E_IDLE	.\openMSP430_defines.v	/^`define E_IDLE      4'hD$/;"	c
E_IRQ_0	.\omsp_frontend.v	/^parameter E_IRQ_0     = `E_IRQ_0;$/;"	c
E_IRQ_0	.\openMSP430_defines.v	/^`define E_IRQ_0     4'h2$/;"	c
E_IRQ_1	.\omsp_frontend.v	/^parameter E_IRQ_1     = `E_IRQ_1;$/;"	c
E_IRQ_1	.\openMSP430_defines.v	/^`define E_IRQ_1     4'h1$/;"	c
E_IRQ_2	.\omsp_frontend.v	/^parameter E_IRQ_2     = `E_IRQ_2;$/;"	c
E_IRQ_2	.\openMSP430_defines.v	/^`define E_IRQ_2     4'h0$/;"	c
E_IRQ_3	.\omsp_frontend.v	/^parameter E_IRQ_3     = `E_IRQ_3;$/;"	c
E_IRQ_3	.\openMSP430_defines.v	/^`define E_IRQ_3     4'h3$/;"	c
E_IRQ_4	.\omsp_frontend.v	/^parameter E_IRQ_4     = `E_IRQ_4;$/;"	c
E_IRQ_4	.\openMSP430_defines.v	/^`define E_IRQ_4     4'h4$/;"	c
E_JUMP	.\omsp_frontend.v	/^parameter E_JUMP      = `E_JUMP;$/;"	c
E_JUMP	.\openMSP430_defines.v	/^`define E_JUMP      4'hC$/;"	c
E_SRC_AD	.\omsp_frontend.v	/^parameter E_SRC_AD    = `E_SRC_AD;$/;"	c
E_SRC_AD	.\openMSP430_defines.v	/^`define E_SRC_AD    4'h5$/;"	c
E_SRC_RD	.\omsp_frontend.v	/^parameter E_SRC_RD    = `E_SRC_RD;$/;"	c
E_SRC_RD	.\openMSP430_defines.v	/^`define E_SRC_RD    4'h6$/;"	c
E_SRC_WR	.\omsp_frontend.v	/^parameter E_SRC_WR    = `E_SRC_WR;$/;"	c
E_SRC_WR	.\openMSP430_defines.v	/^`define E_SRC_WR    4'h7$/;"	c
FALSE	.\altera_mf.v	/^`define FALSE 0 $/;"	c
FAMILY_HAS_FLEXIBLE_LVDS	.\altera_mf.v	/^    parameter FAMILY_HAS_FLEXIBLE_LVDS = ((CYCLONE_RX_STYLE == 1) ||$/;"	c
FAMILY_HAS_FLEXIBLE_LVDS	.\altera_mf.v	/^    parameter FAMILY_HAS_FLEXIBLE_LVDS = ((CYCLONE_TX_STYLE == 1) ||$/;"	c
FAMILY_HAS_STRATIXIII_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXIII_STYLE_PLL = ((STRATIXIII_RX_STYLE == 1) || (CYCLONEIII_RX_STYLE == 1))$/;"	c
FAMILY_HAS_STRATIXIII_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXIII_STYLE_PLL = ((STRATIXIII_TX_STYLE == 1) || (CYCLONEIII_TX_STYLE == 1))$/;"	c
FAMILY_HAS_STRATIXIII_STYLE_RAM	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXIII_STYLE_RAM = (((((intended_device_family == "Stratix III") || (intended_device_family == "STRATIX III") || (intended_device_family == "stratix iii") || (intended_device_family == "StratixIII") || (intended_device_family == "STRATIXIII") || (intended_device_family == "stratixiii") || (intended_device_family == "Titan") || (intended_device_family == "TITAN") || (intended_device_family == "titan") || (intended_device_family == "SIII") || (intended_device_family == "siii"))$/;"	c
FAMILY_HAS_STRATIXII_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXII_STYLE_PLL = ((STRATIXII_RX_STYLE == 1) ||$/;"	c
FAMILY_HAS_STRATIXII_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXII_STYLE_PLL = ((STRATIXII_TX_STYLE == 1) ||$/;"	c
FAMILY_HAS_STRATIXII_STYLE_RAM	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIXII_STYLE_RAM = (((((intended_device_family == "Stratix II") || (intended_device_family == "STRATIX II") || (intended_device_family == "stratix ii") || (intended_device_family == "StratixII") || (intended_device_family == "STRATIXII") || (intended_device_family == "stratixii") || (intended_device_family == "Armstrong") || (intended_device_family == "ARMSTRONG") || (intended_device_family == "armstrong"))$/;"	c
FAMILY_HAS_STRATIX_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIX_STYLE_PLL = ((STRATIX_RX_STYLE == 1) ||$/;"	c
FAMILY_HAS_STRATIX_STYLE_PLL	.\altera_mf.v	/^    parameter FAMILY_HAS_STRATIX_STYLE_PLL = ((STRATIX_TX_STYLE == 1) ||$/;"	c
FAST_CLK_ENA_PHASE_SHIFT	.\altera_mf.v	/^    parameter FAST_CLK_ENA_PHASE_SHIFT = (deserialization_factor*2-3) * (inclock_period\/(2*STRATIX_INCLOCK_BOOST));$/;"	c
FAST_SCAN_CHAIN	.\altera_mf.v	/^    parameter FAST_SCAN_CHAIN = 180;$/;"	c
FAST_SCAN_CHAIN	.\altera_mf.v	/^    parameter FAST_SCAN_CHAIN = 75;$/;"	c
FEATURE_FAMILY_ARRIA10	.\altera_mf.v	/^function FEATURE_FAMILY_ARRIA10;$/;"	f
FEATURE_FAMILY_ARRIAIIGX	.\altera_mf.v	/^function FEATURE_FAMILY_ARRIAIIGX;$/;"	f
FEATURE_FAMILY_ARRIAIIGZ	.\altera_mf.v	/^function FEATURE_FAMILY_ARRIAIIGZ;$/;"	f
FEATURE_FAMILY_ARRIAV	.\altera_mf.v	/^function FEATURE_FAMILY_ARRIAV;$/;"	f
FEATURE_FAMILY_ARRIAVGZ	.\altera_mf.v	/^function FEATURE_FAMILY_ARRIAVGZ;$/;"	f
FEATURE_FAMILY_BASE_CYCLONE	.\altera_mf.v	/^function FEATURE_FAMILY_BASE_CYCLONE;$/;"	f
FEATURE_FAMILY_BASE_CYCLONEII	.\altera_mf.v	/^function FEATURE_FAMILY_BASE_CYCLONEII;$/;"	f
FEATURE_FAMILY_BASE_STRATIX	.\altera_mf.v	/^function FEATURE_FAMILY_BASE_STRATIX;$/;"	f
FEATURE_FAMILY_BASE_STRATIXII	.\altera_mf.v	/^function FEATURE_FAMILY_BASE_STRATIXII;$/;"	f
FEATURE_FAMILY_CYCLONE	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONE;$/;"	f
FEATURE_FAMILY_CYCLONEII	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONEII;$/;"	f
FEATURE_FAMILY_CYCLONEIII	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONEIII;$/;"	f
FEATURE_FAMILY_CYCLONEIVE	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONEIVE;$/;"	f
FEATURE_FAMILY_CYCLONEIVGX	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONEIVGX;$/;"	f
FEATURE_FAMILY_CYCLONEV	.\altera_mf.v	/^function FEATURE_FAMILY_CYCLONEV;$/;"	f
FEATURE_FAMILY_HARDCOPYIII	.\altera_mf.v	/^function FEATURE_FAMILY_HARDCOPYIII;$/;"	f
FEATURE_FAMILY_HARDCOPYIV	.\altera_mf.v	/^function FEATURE_FAMILY_HARDCOPYIV;$/;"	f
FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_ALTERA_MULT_ADD_FLOW;$/;"	f
FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_INVERTED_OUTPUT_DDIO;$/;"	f
FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_STRATIXIII_STYLE_RAM;$/;"	f
FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_STRATIXII_STYLE_PLL;$/;"	f
FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_STRATIXII_STYLE_RAM;$/;"	f
FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL	.\altera_mf.v	/^function FEATURE_FAMILY_HAS_STRATIX_STYLE_PLL;$/;"	f
FEATURE_FAMILY_IS_ALTMULT_ADD_EOL	.\altera_mf.v	/^function FEATURE_FAMILY_IS_ALTMULT_ADD_EOL;$/;"	f
FEATURE_FAMILY_MAX10	.\altera_mf.v	/^function FEATURE_FAMILY_MAX10;$/;"	f
FEATURE_FAMILY_MAXII	.\altera_mf.v	/^function FEATURE_FAMILY_MAXII;$/;"	f
FEATURE_FAMILY_MAXV	.\altera_mf.v	/^function FEATURE_FAMILY_MAXV;$/;"	f
FEATURE_FAMILY_STRATIX	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIX;$/;"	f
FEATURE_FAMILY_STRATIX10	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIX10;$/;"	f
FEATURE_FAMILY_STRATIXGX	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXGX;$/;"	f
FEATURE_FAMILY_STRATIXII	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXII;$/;"	f
FEATURE_FAMILY_STRATIXIIGX	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXIIGX;$/;"	f
FEATURE_FAMILY_STRATIXIII	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXIII;$/;"	f
FEATURE_FAMILY_STRATIXIV	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXIV;$/;"	f
FEATURE_FAMILY_STRATIXV	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIXV;$/;"	f
FEATURE_FAMILY_STRATIX_HC	.\altera_mf.v	/^function FEATURE_FAMILY_STRATIX_HC;$/;"	f
FIFO_DEPTH	.\altera_mf.v	/^    parameter FIFO_DEPTH = (add_usedw_msb_bit == "OFF") ? lpm_widthu_r : lpm_widthu_r -1;$/;"	c
FRZ_BRK_EN	.\openMSP430_defines.v	/^`define FRZ_BRK_EN  4$/;"	c
G	.\altera_mf.v	/^    integer L, S, R, G;$/;"	r
G0	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G0	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
G0_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G0_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
G1	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G1	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
G1_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G1_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
G2	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G2	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
G2_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G2_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
G3	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G3	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
G3_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
G3_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
GATE_LOCK_CYCLES	.\altera_mf.v	/^    parameter GATE_LOCK_CYCLES = 7;$/;"	c
GET_PARAMETER_VALUE	.\altera_mf.v	/^function [8*200:1] GET_PARAMETER_VALUE;$/;"	f
GPP_SCAN_CHAIN	.\altera_mf.v	/^    parameter GPP_SCAN_CHAIN  = 234;$/;"	c
GPP_SCAN_CHAIN	.\altera_mf.v	/^    parameter GPP_SCAN_CHAIN = 174;$/;"	c
GPP_SCAN_CHAIN	.\altera_mf.v	/^    parameter GPP_SCAN_CHAIN = 193;$/;"	c
H10	.\altera_mf.v	/^`define H10             8'h10$/;"	c
H10000	.\altera_mf.v	/^`define H10000          20'h10000$/;"	c
HALT	.\openMSP430_defines.v	/^`define HALT        0$/;"	c
HALT_RUN	.\openMSP430_defines.v	/^`define HALT_RUN    0$/;"	c
HWBRK0_PND	.\openMSP430_defines.v	/^`define HWBRK0_PND  4$/;"	c
HWBRK1_PND	.\openMSP430_defines.v	/^`define HWBRK1_PND  5$/;"	c
HWBRK_RANGE	.\openMSP430_defines.v	/^ `define HWBRK_RANGE 1'b0$/;"	c
HWBRK_RANGE	.\openMSP430_defines.v	/^ `define HWBRK_RANGE 1'b1$/;"	c
IDLE	.\dma_pri.v	/^parameter IDLE       = 4'b0001;$/;"	c
IDX	.\openMSP430_defines.v	/^`define IDX      1$/;"	c
IE1	.\omsp_sfr.v	/^parameter [DEC_WD-1:0] IE1         =  'h0,$/;"	c
IE1_D	.\omsp_sfr.v	/^parameter [DEC_SZ-1:0] IE1_D       = (BASE_REG << IE1),$/;"	c
IFG1	.\omsp_sfr.v	/^                       IFG1        =  'h2,$/;"	c
IFG1_D	.\omsp_sfr.v	/^                       IFG1_D      = (BASE_REG << IFG1),$/;"	c
IMM	.\openMSP430_defines.v	/^`define IMM      5$/;"	c
INDIR	.\openMSP430_defines.v	/^`define INDIR    2$/;"	c
INDIR_I	.\openMSP430_defines.v	/^`define INDIR_I  3$/;"	c
INITIAL_PHASE_SELECT	.\altera_mf.v	/^    parameter INITIAL_PHASE_SELECT = (enable_dpa_initial_phase_selection == "ON") &&$/;"	c
INIT_ST	.\altera_mf.v	/^`define INIT_ST 5'b10000$/;"	c
INST_JMP	.\openMSP430_defines.v	/^`define INST_JMP 1$/;"	c
INST_NR	.\openMSP430.v	/^parameter            INST_NR  = 8'h00;       \/\/ Current oMSP instance number     (for multicore systems)$/;"	c
INST_SO	.\openMSP430_defines.v	/^`define INST_SO  0$/;"	c
INST_TO	.\openMSP430_defines.v	/^`define INST_TO  2$/;"	c
INT_CLOCK_BOOST	.\altera_mf.v	/^    parameter INT_CLOCK_BOOST = ( (inclock_boost == 0)$/;"	c
INT_CLOCK_BOOST	.\altera_mf.v	/^    parameter INT_CLOCK_BOOST = ((inclock_boost == 0)$/;"	c
IRQ	.\openMSP430_defines.v	/^`define IRQ    7$/;"	c
IRQ_16	.\openMSP430_defines.v	/^`define IRQ_16$/;"	c
IRQ_NR	.\openMSP430_defines.v	/^`define IRQ_NR 16$/;"	c
IRQ_NR	.\openMSP430_defines.v	/^`define IRQ_NR 32$/;"	c
IRQ_NR	.\openMSP430_defines.v	/^`define IRQ_NR 64$/;"	c
IRQ_NR_GE_32	.\openMSP430_defines.v	/^`define IRQ_NR_GE_32$/;"	c
IRS_ST	.\altera_mf.v	/^`define IRS_ST  5'b01100$/;"	c
IR_REGISTER_WIDTH	.\altera_mf.v	/^`define IR_REGISTER_WIDTH 10;$/;"	c
ISTATE	.\dma_channel.vhd	/^TYPE ISTATE IS(reset,load,idle,wft,rd_mem,wr_mem,modify,jump_single,jump_block,reload_rst,reload,rst_req,rst);$/;"	t
ISTEP	.\openMSP430_defines.v	/^`define ISTEP       2$/;"	c
IS_FAMILY_ARRIA10	.\altera_mf.v	/^function IS_FAMILY_ARRIA10;$/;"	f
IS_FAMILY_ARRIAGX	.\altera_mf.v	/^function IS_FAMILY_ARRIAGX;$/;"	f
IS_FAMILY_ARRIAIIGX	.\altera_mf.v	/^function IS_FAMILY_ARRIAIIGX;$/;"	f
IS_FAMILY_ARRIAIIGZ	.\altera_mf.v	/^function IS_FAMILY_ARRIAIIGZ;$/;"	f
IS_FAMILY_ARRIAV	.\altera_mf.v	/^function IS_FAMILY_ARRIAV;$/;"	f
IS_FAMILY_ARRIAVGZ	.\altera_mf.v	/^function IS_FAMILY_ARRIAVGZ;$/;"	f
IS_FAMILY_CYCLONE	.\altera_mf.v	/^function IS_FAMILY_CYCLONE;$/;"	f
IS_FAMILY_CYCLONEII	.\altera_mf.v	/^function IS_FAMILY_CYCLONEII;$/;"	f
IS_FAMILY_CYCLONEIII	.\altera_mf.v	/^function IS_FAMILY_CYCLONEIII;$/;"	f
IS_FAMILY_CYCLONEIIILS	.\altera_mf.v	/^function IS_FAMILY_CYCLONEIIILS;$/;"	f
IS_FAMILY_CYCLONEIVE	.\altera_mf.v	/^function IS_FAMILY_CYCLONEIVE;$/;"	f
IS_FAMILY_CYCLONEIVGX	.\altera_mf.v	/^function IS_FAMILY_CYCLONEIVGX;$/;"	f
IS_FAMILY_CYCLONEV	.\altera_mf.v	/^function IS_FAMILY_CYCLONEV;$/;"	f
IS_FAMILY_HARDCOPYII	.\altera_mf.v	/^function IS_FAMILY_HARDCOPYII;$/;"	f
IS_FAMILY_HARDCOPYIII	.\altera_mf.v	/^function IS_FAMILY_HARDCOPYIII;$/;"	f
IS_FAMILY_HARDCOPYIV	.\altera_mf.v	/^function IS_FAMILY_HARDCOPYIV;$/;"	f
IS_FAMILY_MAX10	.\altera_mf.v	/^function IS_FAMILY_MAX10;$/;"	f
IS_FAMILY_MAXII	.\altera_mf.v	/^function IS_FAMILY_MAXII;$/;"	f
IS_FAMILY_MAXV	.\altera_mf.v	/^function IS_FAMILY_MAXV;$/;"	f
IS_FAMILY_STRATIX	.\altera_mf.v	/^function IS_FAMILY_STRATIX;$/;"	f
IS_FAMILY_STRATIX10	.\altera_mf.v	/^function IS_FAMILY_STRATIX10;$/;"	f
IS_FAMILY_STRATIXGX	.\altera_mf.v	/^function IS_FAMILY_STRATIXGX;$/;"	f
IS_FAMILY_STRATIXII	.\altera_mf.v	/^function IS_FAMILY_STRATIXII;$/;"	f
IS_FAMILY_STRATIXIIGX	.\altera_mf.v	/^function IS_FAMILY_STRATIXIIGX;$/;"	f
IS_FAMILY_STRATIXIII	.\altera_mf.v	/^function IS_FAMILY_STRATIXIII;$/;"	f
IS_FAMILY_STRATIXIV	.\altera_mf.v	/^function IS_FAMILY_STRATIXIV;$/;"	f
IS_FAMILY_STRATIXV	.\altera_mf.v	/^function IS_FAMILY_STRATIXV;$/;"	f
IS_VALID_FAMILY	.\altera_mf.v	/^function IS_VALID_FAMILY;$/;"	f
I_DEC	.\omsp_frontend.v	/^parameter I_DEC       = `I_DEC;        \/\/ New instruction ready for decode$/;"	c
I_DEC	.\openMSP430_defines.v	/^`define I_DEC       3'h2$/;"	c
I_EXT1	.\omsp_frontend.v	/^parameter I_EXT1      = `I_EXT1;       \/\/ 1st Extension word$/;"	c
I_EXT1	.\openMSP430_defines.v	/^`define I_EXT1      3'h3$/;"	c
I_EXT2	.\omsp_frontend.v	/^parameter I_EXT2      = `I_EXT2;       \/\/ 2nd Extension word$/;"	c
I_EXT2	.\openMSP430_defines.v	/^`define I_EXT2      3'h4$/;"	c
I_IDLE	.\omsp_frontend.v	/^parameter I_IDLE      = `I_IDLE;       \/\/ CPU is in IDLE mode$/;"	c
I_IDLE	.\openMSP430_defines.v	/^`define I_IDLE      3'h5$/;"	c
I_IRQ_DONE	.\omsp_frontend.v	/^parameter I_IRQ_DONE  = `I_IRQ_DONE;$/;"	c
I_IRQ_DONE	.\openMSP430_defines.v	/^`define I_IRQ_DONE  3'h1$/;"	c
I_IRQ_FETCH	.\omsp_frontend.v	/^parameter I_IRQ_FETCH = `I_IRQ_FETCH;$/;"	c
I_IRQ_FETCH	.\openMSP430_defines.v	/^`define I_IRQ_FETCH 3'h0$/;"	c
JC	.\openMSP430_defines.v	/^`define JC     3$/;"	c
JEQ	.\openMSP430_defines.v	/^`define JEQ    1$/;"	c
JGE	.\openMSP430_defines.v	/^`define JGE    5$/;"	c
JL	.\openMSP430_defines.v	/^`define JL     6$/;"	c
JMP	.\openMSP430_defines.v	/^`define JMP    7$/;"	c
JN	.\openMSP430_defines.v	/^`define JN     4$/;"	c
JNC	.\openMSP430_defines.v	/^`define JNC    2$/;"	c
JNE	.\openMSP430_defines.v	/^`define JNE    0$/;"	c
JTAG_USR1_INSTR	.\altera_mf.v	/^`define JTAG_USR1_INSTR 10'b0000001110$/;"	c
L	.\altera_mf.v	/^    integer L, S, R, G;$/;"	r
L0	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
L0	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
L0_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
L0_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
L1	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
L1	.\altera_mf.v	/^    integer L0, L1, G0, G1, G2, G3, E0, E1, E2, E3;$/;"	r
L1_mode	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
L1_mode	.\altera_mf.v	/^    reg [8*6:1] L0_mode, L1_mode, G0_mode, G1_mode, G2_mode, G3_mode, E0_mode, E1_mode, E2_mode, E3_mode;$/;"	r
LATENCY	.\altera_mf.v	/^    parameter LATENCY = (deserialization_factor % 2 == 1) ? (deserialization_factor \/ 2 + 1) : (deserialization_factor \/ 2);$/;"	c
LATENCY	.\altera_mf.v	/^    parameter LATENCY = pipeline -1;$/;"	c
LENGTHSTATE	.\altera_mf.v	/^`define LENGTHSTATE   3'b001$/;"	c
LFXT_DOMAIN	.\openMSP430_defines.v	/^`define LFXT_DOMAIN$/;"	c
LOAD_CNTR_MODULUS	.\altera_mf.v	/^    parameter LOAD_CNTR_MODULUS = (deserialization_factor % 2 == 1) ?$/;"	c
LOOPBACK_WIRE_WIDTH	.\altera_mf.v	/^    `define LOOPBACK_WIRE_WIDTH (input_source_b0 == "LOOPBACK")? (width_a + 18) : (int_width_result < width_a + 18) ? (width_a + 18) : int_width_result$/;"	c
M	.\altera_mf.v	/^    input clk_divide, clk_mult, M, N;$/;"	p
M	.\altera_mf.v	/^    integer clk_divide, clk_mult, M, N;$/;"	r
M1	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M2	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M3	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M4	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M5	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M6	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M7	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M8	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
M9	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
MASK15	.\altera_mf.v	/^`define MASK15          32'h000000FF$/;"	c
MAXV_TX_STYLE	.\altera_mf.v	/^    parameter MAXV_TX_STYLE = ((((intended_device_family == "MAX V") || (intended_device_family == "max v") || (intended_device_family == "MAXV") || (intended_device_family == "maxv") || (intended_device_family == "Jade") || (intended_device_family == "JADE") || (intended_device_family == "jade"))$/;"	c
MAX_BUFFER_SZ	.\altera_mf.v	/^`define MAX_BUFFER_SZ   2048$/;"	c
MAX_CHANNEL	.\altera_mf.v	/^`define MAX_CHANNEL 132$/;"	c
MAX_DESER	.\altera_mf.v	/^`define MAX_DESER 44$/;"	c
MAX_NAME_SZ	.\altera_mf.v	/^`define MAX_NAME_SZ     256$/;"	c
MAX_WIDTH	.\altera_mf.v	/^`define MAX_WIDTH       1024$/;"	c
MCLK_BCKUP	.\omsp_mem_backbone.v	/^`define MCLK_BCKUP           mclk        \/\/ use macro to solve delta cycle issues with some mixed VHDL\/Verilog simulators$/;"	c
MCLK_BCKUP	.\omsp_mem_backbone.v	/^`define MCLK_BCKUP           mclk_bckup_gated$/;"	c
MCLK_CGATE	.\openMSP430_defines.v	/^  `define MCLK_CGATE$/;"	c
MCLK_DIVIDER	.\openMSP430_defines.v	/^`define MCLK_DIVIDER$/;"	c
MEMORY	.\ram_32_64.vhd	/^TYPE MEMORY IS ARRAY(32 DOWNTO 0) OF WORD;$/;"	t
MEM_ADDR	.\omsp_dbg.v	/^parameter           MEM_ADDR     = 6'h05;$/;"	c
MEM_ADDR_D	.\omsp_dbg.v	/^parameter           MEM_ADDR_D   = (BASE_D << MEM_ADDR);$/;"	c
MEM_CNT	.\omsp_dbg.v	/^parameter           MEM_CNT      = 6'h07;$/;"	c
MEM_CNT_D	.\omsp_dbg.v	/^parameter           MEM_CNT_D    = (BASE_D << MEM_CNT);$/;"	c
MEM_CTL	.\omsp_dbg.v	/^parameter           MEM_CTL      = 6'h04;$/;"	c
MEM_CTL_D	.\omsp_dbg.v	/^parameter           MEM_CTL_D    = (BASE_D << MEM_CTL);$/;"	c
MEM_DATA	.\omsp_dbg.v	/^parameter           MEM_DATA     = 6'h06;$/;"	c
MEM_DATA	.\omsp_dbg_i2c.v	/^parameter MEM_DATA = 6'h06;$/;"	c
MEM_DATA_D	.\omsp_dbg.v	/^parameter           MEM_DATA_D   = (BASE_D << MEM_DATA);$/;"	c
MEM_SIZE	.\ram.v	/^parameter MEM_SIZE   =  256;       \/\/ Memory size in bytes$/;"	c
MEM_SIZE	.\rom.v	/^parameter MEM_SIZE   =  256;       \/\/ Memory size in bytes$/;"	c
MF_cycloneiii_pll	.\altera_mf.v	/^module MF_cycloneiii_pll (inclk,$/;"	m
MF_cycloneiii_pll	.\work\@m@f_cycloneiii_pll\_primary.vhd	/^entity MF_cycloneiii_pll is$/;"	e
MF_cycloneiiigl_m_cntr	.\altera_mf.v	/^module MF_cycloneiiigl_m_cntr   ( clk,$/;"	m
MF_cycloneiiigl_m_cntr	.\work\@m@f_cycloneiiigl_m_cntr\_primary.vhd	/^entity MF_cycloneiiigl_m_cntr is$/;"	e
MF_cycloneiiigl_n_cntr	.\altera_mf.v	/^module MF_cycloneiiigl_n_cntr   ( clk,$/;"	m
MF_cycloneiiigl_n_cntr	.\work\@m@f_cycloneiiigl_n_cntr\_primary.vhd	/^entity MF_cycloneiiigl_n_cntr is$/;"	e
MF_cycloneiiigl_pll	.\altera_mf.v	/^module MF_cycloneiiigl_pll (inclk,$/;"	m
MF_cycloneiiigl_pll	.\work\@m@f_cycloneiiigl_pll\_primary.vhd	/^entity MF_cycloneiiigl_pll is$/;"	e
MF_cycloneiiigl_scale_cntr	.\altera_mf.v	/^module MF_cycloneiiigl_scale_cntr   ( clk,$/;"	m
MF_cycloneiiigl_scale_cntr	.\work\@m@f_cycloneiiigl_scale_cntr\_primary.vhd	/^entity MF_cycloneiiigl_scale_cntr is$/;"	e
MF_pll_reg	.\altera_mf.v	/^module MF_pll_reg (q,$/;"	m
MF_pll_reg	.\work\@m@f_pll_reg\_primary.vhd	/^entity MF_pll_reg is$/;"	e
MF_stratix_pll	.\altera_mf.v	/^module MF_stratix_pll (inclk,$/;"	m
MF_stratix_pll	.\work\@m@f_stratix_pll\_primary.vhd	/^entity MF_stratix_pll is$/;"	e
MF_stratixii_pll	.\altera_mf.v	/^module MF_stratixii_pll (inclk,$/;"	m
MF_stratixii_pll	.\work\@m@f_stratixii_pll\_primary.vhd	/^entity MF_stratixii_pll is$/;"	e
MF_stratixiii_pll	.\altera_mf.v	/^module MF_stratixiii_pll (inclk,$/;"	m
MF_stratixiii_pll	.\work\@m@f_stratixiii_pll\_primary.vhd	/^entity MF_stratixiii_pll is$/;"	e
MINUS	.\altera_mf.v	/^`define MINUS           "-"$/;"	c
MOV	.\openMSP430_defines.v	/^`define MOV    0$/;"	c
MULTIPLIER	.\openMSP430_defines.v	/^`define MULTIPLIER$/;"	c
MULT_ROUND_BITS	.\altera_mf.v	/^    `define MULT_ROUND_BITS  (((multiplier01_rounding == "NO") && (multiplier23_rounding == "NO"))? 1 : (int_width_a + int_width_b) - 17) $/;"	c
MUX_WIDTH	.\altera_mf.v	/^    parameter MUX_WIDTH = 12;$/;"	c
M_ACCESS	.\omsp_dbg.v	/^parameter  M_ACCESS     = 2'h3;$/;"	c
M_ACCESS_BRK	.\omsp_dbg.v	/^parameter  M_ACCESS_BRK = 2'h2;$/;"	c
M_IDLE	.\omsp_dbg.v	/^parameter  M_IDLE       = 2'h0;$/;"	c
M_SET_BRK	.\omsp_dbg.v	/^parameter  M_SET_BRK    = 2'h1;$/;"	c
N	.\altera_mf.v	/^    input clk_divide, clk_mult, M, N;$/;"	p
N	.\altera_mf.v	/^    integer clk_divide, clk_mult, M, N;$/;"	r
N	.\omsp_alu.v	/^wire    N           = inst_bw ?  alu_out[7]       : alu_out[15];$/;"	n
NEWLINE	.\altera_mf.v	/^`define NEWLINE         "\\n"$/;"	c
NMI	.\openMSP430_defines.v	/^`define NMI$/;"	c
NR_REG	.\omsp_dbg.v	/^parameter           NR_REG       = 25;$/;"	c
NULL	.\altera_mf.v	/^`define NULL 0$/;"	c
NUM_OF_SYNC_STAGES	.\altera_mf.v	/^    parameter NUM_OF_SYNC_STAGES = ((deserialization_factor == 4 && (add_latency == "YES")) ? 1 : (LATENCY - 3) + ((add_latency == "NO") ? 1 : 0) ) +$/;"	c
NUM_SELECTION_BITS	.\altera_mf.v	/^`define NUM_SELECTION_BITS 4$/;"	c
N_FLASH_BITS	.\altera_mf.v	/^    parameter    N_FLASH_BITS    =    4;$/;"	c
OFFSET	.\altera_mf.v	/^`define OFFSET          9$/;"	c
OMSP_NO_INCLUDE	.\openMSP430_defines.v	/^`define OMSP_NO_INCLUDE$/;"	c
OP1_MAC	.\omsp_multiplier.v	/^                       OP1_MAC     = 'h4,$/;"	c
OP1_MACS	.\omsp_multiplier.v	/^                       OP1_MACS    = 'h6,$/;"	c
OP1_MACS_D	.\omsp_multiplier.v	/^                       OP1_MACS_D  = (BASE_REG << OP1_MACS),$/;"	c
OP1_MAC_D	.\omsp_multiplier.v	/^                       OP1_MAC_D   = (BASE_REG << OP1_MAC),$/;"	c
OP1_MPY	.\omsp_multiplier.v	/^parameter [DEC_WD-1:0] OP1_MPY     = 'h0,$/;"	c
OP1_MPYS	.\omsp_multiplier.v	/^                       OP1_MPYS    = 'h2,$/;"	c
OP1_MPYS_D	.\omsp_multiplier.v	/^                       OP1_MPYS_D  = (BASE_REG << OP1_MPYS),$/;"	c
OP1_MPY_D	.\omsp_multiplier.v	/^parameter [DEC_SZ-1:0] OP1_MPY_D   = (BASE_REG << OP1_MPY),$/;"	c
OP2	.\omsp_multiplier.v	/^                       OP2         = 'h8,$/;"	c
OP2_D	.\omsp_multiplier.v	/^                       OP2_D       = (BASE_REG << OP2),$/;"	c
OPEN_BRACKET	.\altera_mf.v	/^`define OPEN_BRACKET    "["$/;"	c
OSCOFF_EN	.\openMSP430_defines.v	/^`define OSCOFF_EN$/;"	c
P	.\altera_mf.v	/^    input A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	p
P	.\altera_mf.v	/^    integer A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, P;$/;"	r
P1DIR	.\omsp_gpio.v	/^                       P1DIR       = 'h22,$/;"	c
P1DIR_D	.\omsp_gpio.v	/^                       P1DIR_D     =  (BASE_REG << P1DIR),$/;"	c
P1IE	.\omsp_gpio.v	/^                       P1IE        = 'h25,$/;"	c
P1IES	.\omsp_gpio.v	/^                       P1IES       = 'h24,$/;"	c
P1IES_D	.\omsp_gpio.v	/^                       P1IES_D     =  (BASE_REG << P1IES),$/;"	c
P1IE_D	.\omsp_gpio.v	/^                       P1IE_D      =  (BASE_REG << P1IE),$/;"	c
P1IFG	.\omsp_gpio.v	/^                       P1IFG       = 'h23,$/;"	c
P1IFG_D	.\omsp_gpio.v	/^                       P1IFG_D     =  (BASE_REG << P1IFG),$/;"	c
P1IN	.\omsp_gpio.v	/^parameter [DEC_WD-1:0] P1IN        = 'h20,                    \/\/ Port 1$/;"	c
P1IN_D	.\omsp_gpio.v	/^parameter [DEC_SZ-1:0] P1IN_D      =  (BASE_REG << P1IN),     \/\/ Port 1$/;"	c
P1OUT	.\omsp_gpio.v	/^                       P1OUT       = 'h21,$/;"	c
P1OUT_D	.\omsp_gpio.v	/^                       P1OUT_D     =  (BASE_REG << P1OUT),$/;"	c
P1SEL	.\omsp_gpio.v	/^                       P1SEL       = 'h26,$/;"	c
P1SEL_D	.\omsp_gpio.v	/^                       P1SEL_D     =  (BASE_REG << P1SEL),$/;"	c
P1_EN	.\omsp_gpio.v	/^parameter           P1_EN = 1'b1;   \/\/ Enable Port 1$/;"	c
P1_EN_MSK	.\omsp_gpio.v	/^parameter              P1_EN_MSK   = {8{P1_EN[0]}};$/;"	c
P2DIR	.\omsp_gpio.v	/^                       P2DIR       = 'h2A,$/;"	c
P2DIR_D	.\omsp_gpio.v	/^                       P2DIR_D     =  (BASE_REG << P2DIR),$/;"	c
P2IE	.\omsp_gpio.v	/^                       P2IE        = 'h2D,$/;"	c
P2IES	.\omsp_gpio.v	/^                       P2IES       = 'h2C,$/;"	c
P2IES_D	.\omsp_gpio.v	/^                       P2IES_D     =  (BASE_REG << P2IES),$/;"	c
P2IE_D	.\omsp_gpio.v	/^                       P2IE_D      =  (BASE_REG << P2IE),$/;"	c
P2IFG	.\omsp_gpio.v	/^                       P2IFG       = 'h2B,$/;"	c
P2IFG_D	.\omsp_gpio.v	/^                       P2IFG_D     =  (BASE_REG << P2IFG),$/;"	c
P2IN	.\omsp_gpio.v	/^                       P2IN        = 'h28,                    \/\/ Port 2$/;"	c
P2IN_D	.\omsp_gpio.v	/^                       P2IN_D      =  (BASE_REG << P2IN),     \/\/ Port 2$/;"	c
P2OUT	.\omsp_gpio.v	/^                       P2OUT       = 'h29,$/;"	c
P2OUT_D	.\omsp_gpio.v	/^                       P2OUT_D     =  (BASE_REG << P2OUT),$/;"	c
P2SEL	.\omsp_gpio.v	/^                       P2SEL       = 'h2E,$/;"	c
P2SEL_D	.\omsp_gpio.v	/^                       P2SEL_D     =  (BASE_REG << P2SEL),$/;"	c
P2_EN	.\omsp_gpio.v	/^parameter           P2_EN = 1'b1;   \/\/ Enable Port 2$/;"	c
P2_EN_MSK	.\omsp_gpio.v	/^parameter              P2_EN_MSK   = {8{P2_EN[0]}};$/;"	c
P3DIR	.\omsp_gpio.v	/^                       P3DIR       = 'h1A,$/;"	c
P3DIR_D	.\omsp_gpio.v	/^                       P3DIR_D     =  (BASE_REG << P3DIR),$/;"	c
P3IN	.\omsp_gpio.v	/^                       P3IN        = 'h18,                    \/\/ Port 3$/;"	c
P3IN_D	.\omsp_gpio.v	/^                       P3IN_D      =  (BASE_REG << P3IN),     \/\/ Port 3$/;"	c
P3OUT	.\omsp_gpio.v	/^                       P3OUT       = 'h19,$/;"	c
P3OUT_D	.\omsp_gpio.v	/^                       P3OUT_D     =  (BASE_REG << P3OUT),$/;"	c
P3SEL	.\omsp_gpio.v	/^                       P3SEL       = 'h1B,$/;"	c
P3SEL_D	.\omsp_gpio.v	/^                       P3SEL_D     =  (BASE_REG << P3SEL),$/;"	c
P3_EN	.\omsp_gpio.v	/^parameter           P3_EN = 1'b0;   \/\/ Enable Port 3$/;"	c
P3_EN_MSK	.\omsp_gpio.v	/^parameter              P3_EN_MSK   = {8{P3_EN[0]}};$/;"	c
P4DIR	.\omsp_gpio.v	/^                       P4DIR       = 'h1E,$/;"	c
P4DIR_D	.\omsp_gpio.v	/^                       P4DIR_D     =  (BASE_REG << P4DIR),$/;"	c
P4IN	.\omsp_gpio.v	/^                       P4IN        = 'h1C,                    \/\/ Port 4$/;"	c
P4IN_D	.\omsp_gpio.v	/^                       P4IN_D      =  (BASE_REG << P4IN),     \/\/ Port 4$/;"	c
P4OUT	.\omsp_gpio.v	/^                       P4OUT       = 'h1D,$/;"	c
P4OUT_D	.\omsp_gpio.v	/^                       P4OUT_D     =  (BASE_REG << P4OUT),$/;"	c
P4SEL	.\omsp_gpio.v	/^                       P4SEL       = 'h1F,$/;"	c
P4SEL_D	.\omsp_gpio.v	/^                       P4SEL_D     =  (BASE_REG << P4SEL),$/;"	c
P4_EN	.\omsp_gpio.v	/^parameter           P4_EN = 1'b0;   \/\/ Enable Port 4$/;"	c
P4_EN_MSK	.\omsp_gpio.v	/^parameter              P4_EN_MSK   = {8{P4_EN[0]}};$/;"	c
P5DIR	.\omsp_gpio.v	/^                       P5DIR       = 'h32,$/;"	c
P5DIR_D	.\omsp_gpio.v	/^                       P5DIR_D     =  (BASE_REG << P5DIR),$/;"	c
P5IN	.\omsp_gpio.v	/^                       P5IN        = 'h30,                    \/\/ Port 5$/;"	c
P5IN_D	.\omsp_gpio.v	/^                       P5IN_D      =  (BASE_REG << P5IN),     \/\/ Port 5$/;"	c
P5OUT	.\omsp_gpio.v	/^                       P5OUT       = 'h31,$/;"	c
P5OUT_D	.\omsp_gpio.v	/^                       P5OUT_D     =  (BASE_REG << P5OUT),$/;"	c
P5SEL	.\omsp_gpio.v	/^                       P5SEL       = 'h33,$/;"	c
P5SEL_D	.\omsp_gpio.v	/^                       P5SEL_D     =  (BASE_REG << P5SEL),$/;"	c
P5_EN	.\omsp_gpio.v	/^parameter           P5_EN = 1'b0;   \/\/ Enable Port 5$/;"	c
P5_EN_MSK	.\omsp_gpio.v	/^parameter              P5_EN_MSK   = {8{P5_EN[0]}};$/;"	c
P6DIR	.\omsp_gpio.v	/^                       P6DIR       = 'h36,$/;"	c
P6DIR_D	.\omsp_gpio.v	/^                       P6DIR_D     =  (BASE_REG << P6DIR),$/;"	c
P6IN	.\omsp_gpio.v	/^                       P6IN        = 'h34,                    \/\/ Port 6$/;"	c
P6IN_D	.\omsp_gpio.v	/^                       P6IN_D      =  (BASE_REG << P6IN),     \/\/ Port 6$/;"	c
P6OUT	.\omsp_gpio.v	/^                       P6OUT       = 'h35,$/;"	c
P6OUT_D	.\omsp_gpio.v	/^                       P6OUT_D     =  (BASE_REG << P6OUT),$/;"	c
P6SEL	.\omsp_gpio.v	/^                       P6SEL       = 'h37;$/;"	c
P6SEL_D	.\omsp_gpio.v	/^                       P6SEL_D     =  (BASE_REG << P6SEL); $/;"	c
P6_EN	.\omsp_gpio.v	/^parameter           P6_EN = 1'b0;   \/\/ Enable Port 6$/;"	c
P6_EN_MSK	.\omsp_gpio.v	/^parameter              P6_EN_MSK   = {8{P6_EN[0]}};$/;"	c
PDR_ST	.\altera_mf.v	/^`define PDR_ST  5'b01101$/;"	c
PERCENT	.\altera_mf.v	/^`define PERCENT         "%"$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH         8$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH         9$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        10$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        11$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        12$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        13$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        14$/;"	c
PER_AWIDTH	.\openMSP430_defines.v	/^  `define PER_AWIDTH        `PER_CUSTOM_AWIDTH$/;"	c
PER_CUSTOM_AWIDTH	.\openMSP430_defines.v	/^`define PER_CUSTOM_AWIDTH        8$/;"	c
PER_CUSTOM_SIZE	.\openMSP430_defines.v	/^`define PER_CUSTOM_SIZE        512$/;"	c
PER_MSB	.\openMSP430_defines.v	/^`define PER_MSB    `PER_AWIDTH-1$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE          `PER_CUSTOM_SIZE$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE         512$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE        1024$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE        2048$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE        4096$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE        8192$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE       16384$/;"	c
PER_SIZE	.\openMSP430_defines.v	/^  `define PER_SIZE       32768$/;"	c
PER_SIZE_512_B	.\openMSP430_defines.v	/^`define PER_SIZE_512_B$/;"	c
PFL_CFI_FLASH_IR_BITS	.\altera_mf.v	/^    parameter    PFL_CFI_FLASH_IR_BITS    =    5;$/;"	c
PFL_NAND_FLASH_IR_BITS	.\altera_mf.v	/^    parameter    PFL_NAND_FLASH_IR_BITS    =    4;$/;"	c
PFL_QUAD_IO_FLASH_IR_BITS	.\altera_mf.v	/^    parameter    PFL_QUAD_IO_FLASH_IR_BITS    =    8;$/;"	c
PHASE_INCLOCK	.\altera_mf.v	/^    parameter PHASE_INCLOCK = (inclock_data_alignment == "UNUSED") ?$/;"	c
PHASE_NUM	.\altera_mf.v	/^    parameter PHASE_NUM = 8;$/;"	c
PHASE_OUTCLOCK	.\altera_mf.v	/^    parameter PHASE_OUTCLOCK = (outclock_alignment == "UNUSED") ?$/;"	c
PHASE_SHIFT	.\altera_mf.v	/^    parameter PHASE_SHIFT =$/;"	c
PIR_ST	.\altera_mf.v	/^`define PIR_ST  5'b00010$/;"	c
PLL_D_VALUE	.\altera_mf.v	/^    parameter PLL_D_VALUE = (FAMILY_HAS_FLEXIBLE_LVDS == 1)$/;"	c
PLL_M_VALUE	.\altera_mf.v	/^    parameter PLL_M_VALUE = (((input_data_rate * inclock_period)$/;"	c
PLL_M_VALUE	.\altera_mf.v	/^    parameter PLL_M_VALUE = (((output_data_rate * inclock_period)$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH       9$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH       `PMEM_CUSTOM_AWIDTH$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      10$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      11$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      12$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      13$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      14$/;"	c
PMEM_AWIDTH	.\openMSP430_defines.v	/^  `define PMEM_AWIDTH      15$/;"	c
PMEM_CUSTOM_AWIDTH	.\openMSP430_defines.v	/^`define PMEM_CUSTOM_AWIDTH      10$/;"	c
PMEM_CUSTOM_SIZE	.\openMSP430_defines.v	/^`define PMEM_CUSTOM_SIZE      2048$/;"	c
PMEM_MSB	.\openMSP430_defines.v	/^`define PMEM_MSB   `PMEM_AWIDTH-1$/;"	c
PMEM_OFFSET	.\omsp_mem_backbone.v	/^parameter          PMEM_OFFSET   = (16'hFFFF-`PMEM_SIZE+1);$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE         `PMEM_CUSTOM_SIZE$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE      1024$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE      2048$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE      4096$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE      8192$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     12288$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     16384$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     24576$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     32768$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     41984$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     49152$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     52224$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     55296$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     56320$/;"	c
PMEM_SIZE	.\openMSP430_defines.v	/^  `define PMEM_SIZE     60416$/;"	c
PMEM_SIZE_32_KB	.\openMSP430_defines.v	/^`define PMEM_SIZE_32_KB$/;"	c
PUC_PND	.\openMSP430_defines.v	/^`define PUC_PND     1$/;"	c
PUSH	.\openMSP430_defines.v	/^`define PUSH   4$/;"	c
R	.\altera_mf.v	/^    integer L, S, R, G;$/;"	r
R	.\altera_mf.v	/^    integer M1, M2, M3, M4, M5 , M6, M7, M8, M9, R;$/;"	r
R	.\altera_mf.v	/^    integer R;$/;"	r
R	.\altera_mf.v	/^    reg [8*6:1] R;$/;"	r
RAM_WIDTH	.\altera_mf.v	/^    parameter RAM_WIDTH = 6;$/;"	c
RAM_WIDTH	.\altera_mf.v	/^    parameter RAM_WIDTH = width * number_of_taps;$/;"	c
RANDOM_SEED	.\altera_mf.v	/^    reg[31:0]  RANDOM_SEED = 123456;      $/;"	r
READ_SIDE_SYNCHRONIZERS	.\altera_mf.v	/^    parameter READ_SIDE_SYNCHRONIZERS = (rdsync_delaypipe != 0) ? rdsync_delaypipe :$/;"	c
REGISTER_WIDTH	.\altera_mf.v	/^    parameter REGISTER_WIDTH = deserialization_factor * number_of_channels;$/;"	c
REGISTER_WIDTH	.\altera_mf.v	/^    parameter REGISTER_WIDTH = deserialization_factor*number_of_channels;$/;"	c
RESHI	.\omsp_multiplier.v	/^                       RESHI       = 'hC,$/;"	c
RESHI_D	.\omsp_multiplier.v	/^                       RESHI_D     = (BASE_REG << RESHI),$/;"	c
RESLO	.\omsp_multiplier.v	/^                       RESLO       = 'hA,$/;"	c
RESLO_D	.\omsp_multiplier.v	/^                       RESLO_D     = (BASE_REG << RESLO),$/;"	c
RESULT_WIDTH	.\altera_mf.v	/^    `define RESULT_WIDTH 44$/;"	c
RETI	.\openMSP430_defines.v	/^`define RETI   6$/;"	c
ROUNDROBIN	.\dma_pri.v	/^wire                                   ROUNDROBIN   ;$/;"	n
RRA	.\openMSP430_defines.v	/^`define RRA    2$/;"	c
RRC	.\openMSP430_defines.v	/^`define RRC    0$/;"	c
RST_BRK_EN	.\openMSP430_defines.v	/^`define RST_BRK_EN  5$/;"	c
RTI_ST	.\altera_mf.v	/^`define RTI_ST  5'b00001$/;"	c
RUN	.\openMSP430_defines.v	/^`define RUN         1$/;"	c
RX_ADDR	.\omsp_dbg_i2c.v	/^parameter   RX_ADDR      =  3'h0;$/;"	c
RX_ADDR_ACK	.\omsp_dbg_i2c.v	/^parameter   RX_ADDR_ACK  =  3'h1;$/;"	c
RX_BYTE_HI	.\omsp_dbg_i2c.v	/^parameter  RX_BYTE_HI = 3'h2;$/;"	c
RX_BYTE_LO	.\omsp_dbg_i2c.v	/^parameter  RX_BYTE_LO = 3'h1;$/;"	c
RX_CMD	.\omsp_dbg_i2c.v	/^parameter  RX_CMD     = 3'h0;$/;"	c
RX_CMD	.\omsp_dbg_uart.v	/^parameter  RX_CMD   = 3'h1;$/;"	c
RX_DATA	.\omsp_dbg_i2c.v	/^parameter   RX_DATA      =  3'h2;$/;"	c
RX_DATA1	.\omsp_dbg_uart.v	/^parameter  RX_DATA1 = 3'h2;$/;"	c
RX_DATA2	.\omsp_dbg_uart.v	/^parameter  RX_DATA2 = 3'h3;$/;"	c
RX_DATA_ACK	.\omsp_dbg_i2c.v	/^parameter   RX_DATA_ACK  =  3'h3;$/;"	c
RX_SYNC	.\omsp_dbg_uart.v	/^parameter  RX_SYNC  = 3'h0;$/;"	c
S	.\altera_mf.v	/^    integer L, S, R, G;$/;"	r
SCAN_CHAIN	.\altera_mf.v	/^    parameter SCAN_CHAIN = 144;$/;"	c
SCG0_EN	.\openMSP430_defines.v	/^`define SCG0_EN$/;"	c
SCG1_EN	.\openMSP430_defines.v	/^`define SCG1_EN$/;"	c
SDR_ST	.\altera_mf.v	/^`define SDR_ST  5'b01111$/;"	c
SELMx	.\openMSP430_defines.v	/^`define SELMx       7$/;"	c
SELS	.\openMSP430_defines.v	/^`define SELS        3$/;"	c
SEMICOLON	.\altera_mf.v	/^`define SEMICOLON       ";"$/;"	c
SHIFT_MODE_WIDTH	.\altera_mf.v	/^    `define SHIFT_MODE_WIDTH (shift_mode != "NO")? 31 : width_result - 1$/;"	c
SIR_ST	.\altera_mf.v	/^`define SIR_ST  5'b00101$/;"	c
SLD_ADVANCED_TRIGGER_1	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_1    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_10	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_10    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_2	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_2    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_3	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_3    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_4	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_4    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_5	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_5    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_6	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_6    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_7	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_7    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_8	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_8    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_9	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_9    =    "NONE";$/;"	c
SLD_ADVANCED_TRIGGER_ENTITY	.\altera_mf.v	/^    parameter    SLD_ADVANCED_TRIGGER_ENTITY    =    "basic";$/;"	c
SLD_ATTRIBUTE_MEM_MODE	.\altera_mf.v	/^    parameter    SLD_ATTRIBUTE_MEM_MODE    =    "OFF";$/;"	c
SLD_BUFFER_FULL_STOP	.\altera_mf.v	/^    parameter    SLD_BUFFER_FULL_STOP    =    1;$/;"	c
SLD_CREATE_MONITOR_INTERFACE	.\altera_mf.v	/^    parameter    SLD_CREATE_MONITOR_INTERFACE    =    0;$/;"	c
SLD_CURRENT_RESOURCE_WIDTH	.\altera_mf.v	/^    parameter    SLD_CURRENT_RESOURCE_WIDTH    =    0;$/;"	c
SLD_DATA_BITS	.\altera_mf.v	/^    parameter    SLD_DATA_BITS    =    1;$/;"	c
SLD_DATA_BIT_CNTR_BITS	.\altera_mf.v	/^    parameter    SLD_DATA_BIT_CNTR_BITS    =    4;$/;"	c
SLD_ENABLE_ADVANCED_TRIGGER	.\altera_mf.v	/^    parameter    SLD_ENABLE_ADVANCED_TRIGGER    =    0;$/;"	c
SLD_HPS_EVENT_ENABLED	.\altera_mf.v	/^    parameter    SLD_HPS_EVENT_ENABLED    =    0;$/;"	c
SLD_HPS_EVENT_ID	.\altera_mf.v	/^    parameter    SLD_HPS_EVENT_ID    =    0;$/;"	c
SLD_HPS_TRIGGER_IN_ENABLED	.\altera_mf.v	/^    parameter    SLD_HPS_TRIGGER_IN_ENABLED    =    0;$/;"	c
SLD_HPS_TRIGGER_OUT_ENABLED	.\altera_mf.v	/^    parameter    SLD_HPS_TRIGGER_OUT_ENABLED    =    0;$/;"	c
SLD_INCREMENTAL_ROUTING	.\altera_mf.v	/^    parameter    SLD_INCREMENTAL_ROUTING    =    0;$/;"	c
SLD_INVERSION_MASK	.\altera_mf.v	/^    parameter    SLD_INVERSION_MASK    =    "0";$/;"	c
SLD_INVERSION_MASK_LENGTH	.\altera_mf.v	/^    parameter    SLD_INVERSION_MASK_LENGTH    =    1;$/;"	c
SLD_IR_BITS	.\altera_mf.v	/^    parameter    SLD_IR_BITS    =    10;$/;"	c
SLD_MEM_ADDRESS_BITS	.\altera_mf.v	/^    parameter    SLD_MEM_ADDRESS_BITS    =    7;$/;"	c
SLD_NODE_CRC_BITS	.\altera_mf.v	/^    parameter    SLD_NODE_CRC_BITS    =    32;$/;"	c
SLD_NODE_CRC_HIWORD	.\altera_mf.v	/^    parameter    SLD_NODE_CRC_HIWORD    =    41394;$/;"	c
SLD_NODE_CRC_LOWORD	.\altera_mf.v	/^    parameter    SLD_NODE_CRC_LOWORD    =    50132;$/;"	c
SLD_NODE_INFO	.\altera_mf.v	/^    parameter    SLD_NODE_INFO    =    0;$/;"	c
SLD_NODE_INFO	.\altera_mf.v	/^    parameter    SLD_NODE_INFO    =    4746752;$/;"	c
SLD_NODE_IR_WIDTH_I	.\altera_mf.v	/^`define SLD_NODE_IR_WIDTH_I sld_node_ir_width + `NUM_SELECTION_BITS \/\/ internal ir width    $/;"	c
SLD_POWER_UP_TRIGGER	.\altera_mf.v	/^    parameter    SLD_POWER_UP_TRIGGER    =    0;$/;"	c
SLD_RAM_BLOCK_TYPE	.\altera_mf.v	/^    parameter    SLD_RAM_BLOCK_TYPE    =    "AUTO";$/;"	c
SLD_SAMPLE_DEPTH	.\altera_mf.v	/^    parameter    SLD_SAMPLE_DEPTH    =    16;$/;"	c
SLD_SECTION_ID	.\altera_mf.v	/^    parameter    SLD_SECTION_ID    =    "hdl_signaltap_0";$/;"	c
SLD_SEGMENT_SIZE	.\altera_mf.v	/^    parameter    SLD_SEGMENT_SIZE    =    0;$/;"	c
SLD_STATE_BITS	.\altera_mf.v	/^    parameter    SLD_STATE_BITS    =    11;$/;"	c
SLD_STATE_FLOW_MGR_ENTITY	.\altera_mf.v	/^    parameter    SLD_STATE_FLOW_MGR_ENTITY    =    "state_flow_mgr_entity.vhd";$/;"	c
SLD_STATE_FLOW_USE_GENERATED	.\altera_mf.v	/^    parameter    SLD_STATE_FLOW_USE_GENERATED    =    0;$/;"	c
SLD_STORAGE_QUALIFIER_ADVANCED_CONDITION_ENTITY	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_ADVANCED_CONDITION_ENTITY    =    "basic";$/;"	c
SLD_STORAGE_QUALIFIER_BITS	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_BITS    =    1;$/;"	c
SLD_STORAGE_QUALIFIER_ENABLE_ADVANCED_CONDITION	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_ENABLE_ADVANCED_CONDITION    =    0;$/;"	c
SLD_STORAGE_QUALIFIER_GAP_RECORD	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_GAP_RECORD    =    0;$/;"	c
SLD_STORAGE_QUALIFIER_INVERSION_MASK_LENGTH	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_INVERSION_MASK_LENGTH    =    0;$/;"	c
SLD_STORAGE_QUALIFIER_MODE	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_MODE    =    "OFF";$/;"	c
SLD_STORAGE_QUALIFIER_PIPELINE	.\altera_mf.v	/^    parameter    SLD_STORAGE_QUALIFIER_PIPELINE    =    0;$/;"	c
SLD_TRIGGER_BITS	.\altera_mf.v	/^    parameter    SLD_TRIGGER_BITS    =    1;$/;"	c
SLD_TRIGGER_IN_ENABLED	.\altera_mf.v	/^    parameter    SLD_TRIGGER_IN_ENABLED    =    0;$/;"	c
SLD_TRIGGER_LEVEL	.\altera_mf.v	/^    parameter    SLD_TRIGGER_LEVEL    =    10;$/;"	c
SLD_TRIGGER_LEVEL_PIPELINE	.\altera_mf.v	/^    parameter    SLD_TRIGGER_LEVEL_PIPELINE    =    1;$/;"	c
SLD_USE_JTAG_SIGNAL_ADAPTER	.\altera_mf.v	/^    parameter    SLD_USE_JTAG_SIGNAL_ADAPTER    =    1;$/;"	c
SMCLK_CGATE	.\openMSP430_defines.v	/^  `define SMCLK_CGATE$/;"	c
SMCLK_DIVIDER	.\openMSP430_defines.v	/^`define SMCLK_DIVIDER$/;"	c
SPACE	.\altera_mf.v	/^`define SPACE           " "$/;"	c
STARTSTATE	.\altera_mf.v	/^`define STARTSTATE    3'b000$/;"	c
STRATIXGX_DPA_RX_STYLE	.\altera_mf.v	/^    parameter STRATIXGX_DPA_RX_STYLE =((((intended_device_family == "Stratix GX") || (intended_device_family == "STRATIX GX") || (intended_device_family == "stratix gx") || (intended_device_family == "Stratix-GX") || (intended_device_family == "STRATIX-GX") || (intended_device_family == "stratix-gx") || (intended_device_family == "StratixGX") || (intended_device_family == "STRATIXGX") || (intended_device_family == "stratixgx") || (intended_device_family == "Aurora") || (intended_device_family == "AURORA") || (intended_device_family == "aurora"))$/;"	c
STRATIXIII_RX_STYLE	.\altera_mf.v	/^    parameter STRATIXIII_RX_STYLE = ((((intended_device_family == "Stratix III") || (intended_device_family == "STRATIX III") || (intended_device_family == "stratix iii") || (intended_device_family == "StratixIII") || (intended_device_family == "STRATIXIII") || (intended_device_family == "stratixiii") || (intended_device_family == "Titan") || (intended_device_family == "TITAN") || (intended_device_family == "titan") || (intended_device_family == "SIII") || (intended_device_family == "siii"))$/;"	c
STRATIXIII_TX_STYLE	.\altera_mf.v	/^    parameter STRATIXIII_TX_STYLE = ((((intended_device_family == "Stratix III") || (intended_device_family == "STRATIX III") || (intended_device_family == "stratix iii") || (intended_device_family == "StratixIII") || (intended_device_family == "STRATIXIII") || (intended_device_family == "stratixiii") || (intended_device_family == "Titan") || (intended_device_family == "TITAN") || (intended_device_family == "titan") || (intended_device_family == "SIII") || (intended_device_family == "siii"))$/;"	c
STRATIXII_RX_STYLE	.\altera_mf.v	/^    parameter STRATIXII_RX_STYLE = ((((intended_device_family == "Stratix II") || (intended_device_family == "STRATIX II") || (intended_device_family == "stratix ii") || (intended_device_family == "StratixII") || (intended_device_family == "STRATIXII") || (intended_device_family == "stratixii") || (intended_device_family == "Armstrong") || (intended_device_family == "ARMSTRONG") || (intended_device_family == "armstrong"))$/;"	c
STRATIXII_TX_STYLE	.\altera_mf.v	/^    parameter STRATIXII_TX_STYLE = ((((intended_device_family == "Stratix II") || (intended_device_family == "STRATIX II") || (intended_device_family == "stratix ii") || (intended_device_family == "StratixII") || (intended_device_family == "STRATIXII") || (intended_device_family == "stratixii") || (intended_device_family == "Armstrong") || (intended_device_family == "ARMSTRONG") || (intended_device_family == "armstrong"))$/;"	c
STRATIXV_RX_STYLE	.\altera_mf.v	/^    parameter STRATIXV_RX_STYLE = ((((intended_device_family == "Stratix V") || (intended_device_family == "STRATIX V") || (intended_device_family == "stratix v") || (intended_device_family == "StratixV") || (intended_device_family == "STRATIXV") || (intended_device_family == "stratixv") || (intended_device_family == "Stratix V (GS)") || (intended_device_family == "STRATIX V (GS)") || (intended_device_family == "stratix v (gs)") || (intended_device_family == "StratixV(GS)") || (intended_device_family == "STRATIXV(GS)") || (intended_device_family == "stratixv(gs)") || (intended_device_family == "Stratix V (GT)") || (intended_device_family == "STRATIX V (GT)") || (intended_device_family == "stratix v (gt)") || (intended_device_family == "StratixV(GT)") || (intended_device_family == "STRATIXV(GT)") || (intended_device_family == "stratixv(gt)") || (intended_device_family == "Stratix V (GX)") || (intended_device_family == "STRATIX V (GX)") || (intended_device_family == "stratix v (gx)") || (intended_device_family == "StratixV(GX)") || (intended_device_family == "STRATIXV(GX)") || (intended_device_family == "stratixv(gx)") || (intended_device_family == "Stratix V (GS\/GX)") || (intended_device_family == "STRATIX V (GS\/GX)") || (intended_device_family == "stratix v (gs\/gx)") || (intended_device_family == "StratixV(GS\/GX)") || (intended_device_family == "STRATIXV(GS\/GX)") || (intended_device_family == "stratixv(gs\/gx)") || (intended_device_family == "Stratix V (GS\/GT)") || (intended_device_family == "STRATIX V (GS\/GT)") || (intended_device_family == "stratix v (gs\/gt)") || (intended_device_family == "StratixV(GS\/GT)") || (intended_device_family == "STRATIXV(GS\/GT)") || (intended_device_family == "stratixv(gs\/gt)") || (intended_device_family == "Stratix V (GT\/GX)") || (intended_device_family == "STRATIX V (GT\/GX)") || (intended_device_family == "stratix v (gt\/gx)") || (intended_device_family == "StratixV(GT\/GX)") || (intended_device_family == "STRATIXV(GT\/GX)") || (intended_device_family == "stratixv(gt\/gx)") || (intended_device_family == "Stratix V (GX\/GS)") || (intended_device_family == "STRATIX V (GX\/GS)") || (intended_device_family == "stratix v (gx\/gs)") || (intended_device_family == "StratixV(GX\/GS)") || (intended_device_family == "STRATIXV(GX\/GS)") || (intended_device_family == "stratixv(gx\/gs)") || (intended_device_family == "Stratix V (GT\/GS)") || (intended_device_family == "STRATIX V (GT\/GS)") || (intended_device_family == "stratix v (gt\/gs)") || (intended_device_family == "StratixV(GT\/GS)") || (intended_device_family == "STRATIXV(GT\/GS)") || (intended_device_family == "stratixv(gt\/gs)") || (intended_device_family == "Stratix V (GX\/GT)") || (intended_device_family == "STRATIX V (GX\/GT)") || (intended_device_family == "stratix v (gx\/gt)") || (intended_device_family == "StratixV(GX\/GT)") || (intended_device_family == "STRATIXV(GX\/GT)") || (intended_device_family == "stratixv(gx\/gt)") || (intended_device_family == "Stratix V (GS\/GT\/GX)") || (intended_device_family == "STRATIX V (GS\/GT\/GX)") || (intended_device_family == "stratix v (gs\/gt\/gx)") || (intended_device_family == "Stratix V (GS\/GX\/GT)") || (intended_device_family == "STRATIX V (GS\/GX\/GT)") || (intended_device_family == "stratix v (gs\/gx\/gt)") || (intended_device_family == "Stratix V (GT\/GS\/GX)") || (intended_device_family == "STRATIX V (GT\/GS\/GX)") || (intended_device_family == "stratix v (gt\/gs\/gx)") || (intended_device_family == "Stratix V (GT\/GX\/GS)") || (intended_device_family == "STRATIX V (GT\/GX\/GS)") || (intended_device_family == "stratix v (gt\/gx\/gs)") || (intended_device_family == "Stratix V (GX\/GS\/GT)") || (intended_device_family == "STRATIX V (GX\/GS\/GT)") || (intended_device_family == "stratix v (gx\/gs\/gt)") || (intended_device_family == "Stratix V (GX\/GT\/GS)") || (intended_device_family == "STRATIX V (GX\/GT\/GS)") || (intended_device_family == "stratix v (gx\/gt\/gs)") || (intended_device_family == "StratixV(GS\/GT\/GX)") || (intended_device_family == "STRATIXV(GS\/GT\/GX)") || (intended_device_family == "stratixv(gs\/gt\/gx)") || (intended_device_family == "StratixV(GS\/GX\/GT)") || (intended_device_family == "STRATIXV(GS\/GX\/GT)") || (intended_device_family == "stratixv(gs\/gx\/gt)") || (intended_device_family == "StratixV(GT\/GS\/GX)") || (intended_device_family == "STRATIXV(GT\/GS\/GX)") || (intended_device_family == "stratixv(gt\/gs\/gx)") || (intended_device_family == "StratixV(GT\/GX\/GS)") || (intended_device_family == "STRATIXV(GT\/GX\/GS)") || (intended_device_family == "stratixv(gt\/gx\/gs)") || (intended_device_family == "StratixV(GX\/GS\/GT)") || (intended_device_family == "STRATIXV(GX\/GS\/GT)") || (intended_device_family == "stratixv(gx\/gs\/gt)") || (intended_device_family == "StratixV(GX\/GT\/GS)") || (intended_device_family == "STRATIXV(GX\/GT\/GS)") || (intended_device_family == "stratixv(gx\/gt\/gs)") || (intended_device_family == "Stratix V (GS\/GT\/GX\/E)") || (intended_device_family == "STRATIX V (GS\/GT\/GX\/E)") || (intended_device_family == "stratix v (gs\/gt\/gx\/e)") || (intended_device_family == "StratixV(GS\/GT\/GX\/E)") || (intended_device_family == "STRATIXV(GS\/GT\/GX\/E)") || (intended_device_family == "stratixv(gs\/gt\/gx\/e)") || (intended_device_family == "Stratix V (E)") || (intended_device_family == "STRATIX V (E)") || (intended_device_family == "stratix v (e)") || (intended_device_family == "StratixV(E)") || (intended_device_family == "STRATIXV(E)") || (intended_device_family == "stratixv(e)"))$/;"	c
STRATIXV_RX_STYLE	.\altera_mf.v	/^    parameter STRATIXV_RX_STYLE = 0;$/;"	c
STRATIXV_RX_STYLE	.\altera_mf.v	/^parameter STRATIXV_RX_STYLE = 0;$/;"	c
STRATIX_INCLOCK_BOOST	.\altera_mf.v	/^    parameter STRATIX_INCLOCK_BOOST = ((input_data_rate !=0) &&$/;"	c
STRATIX_INCLOCK_BOOST	.\altera_mf.v	/^    parameter STRATIX_INCLOCK_BOOST =$/;"	c
STRATIX_RX_STYLE	.\altera_mf.v	/^    parameter STRATIX_RX_STYLE =  (((((intended_device_family == "Stratix") || (intended_device_family == "STRATIX") || (intended_device_family == "stratix") || (intended_device_family == "Yeager") || (intended_device_family == "YEAGER") || (intended_device_family == "yeager"))$/;"	c
STRATIX_TX_STYLE	.\altera_mf.v	/^    parameter STRATIX_TX_STYLE = ((((intended_device_family == "Stratix") || (intended_device_family == "STRATIX") || (intended_device_family == "stratix") || (intended_device_family == "Yeager") || (intended_device_family == "YEAGER") || (intended_device_family == "yeager"))$/;"	c
STR_LENGTH	.\altera_mf.v	/^`define STR_LENGTH 18$/;"	c
STXIII_LE_PHASE_INCLOCK	.\altera_mf.v	/^    parameter STXIII_LE_PHASE_INCLOCK = PHASE_INCLOCK - (0.25 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXIII_LE_PHASE_OUTCLOCK	.\altera_mf.v	/^    parameter STXIII_LE_PHASE_OUTCLOCK = PHASE_OUTCLOCK - (0.25 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXIII_LE_PHASE_SHIFT	.\altera_mf.v	/^    parameter STXIII_LE_PHASE_SHIFT = PHASE_SHIFT - (PLL_D_VALUE * inclock_period \/ STRATIX_INCLOCK_BOOST\/4);$/;"	c
STXIII_PLL_WORD_LENGTH	.\altera_mf.v	/^`define STXIII_PLL_WORD_LENGTH 18$/;"	c
STXII_LE_PHASE_INCLOCK	.\altera_mf.v	/^    parameter STXII_LE_PHASE_INCLOCK = (use_no_phase_shift == "ON") ? PHASE_INCLOCK : PHASE_INCLOCK - (0.25 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXII_LE_PHASE_OUTCLOCK	.\altera_mf.v	/^    parameter STXII_LE_PHASE_OUTCLOCK = (use_no_phase_shift == "ON") ? PHASE_OUTCLOCK : PHASE_OUTCLOCK - (0.25 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXII_LE_PHASE_SHIFT	.\altera_mf.v	/^    parameter STXII_LE_PHASE_SHIFT = ((use_no_phase_shift == "OFF") && (pll_operation_mode == "SOURCE_SYNCHRONOUS"))$/;"	c
STXII_PHASE_INCLOCK	.\altera_mf.v	/^    parameter STXII_PHASE_INCLOCK = PHASE_INCLOCK - (0.5 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXII_PHASE_OUTCLOCK	.\altera_mf.v	/^    parameter STXII_PHASE_OUTCLOCK = STX_PHASE_OUTCLOCK - (0.5 * inclock_period \/ STRATIX_INCLOCK_BOOST);$/;"	c
STXII_PHASE_SHIFT	.\altera_mf.v	/^    parameter STXII_PHASE_SHIFT = PHASE_SHIFT -$/;"	c
STXII_PLL_WORD_LENGTH	.\altera_mf.v	/^`define STXII_PLL_WORD_LENGTH 18$/;"	c
STX_PHASE_OUTCLOCK	.\altera_mf.v	/^    parameter STX_PHASE_OUTCLOCK  = ((outclock_divide_by == 1) ||$/;"	c
STX_PLL_WORD_LENGTH	.\altera_mf.v	/^`define STX_PLL_WORD_LENGTH 18$/;"	c
ST_IDLE	.\altera_mf.v	/^  parameter ST_IDLE  = 2'd0,$/;"	c
ST_READ	.\altera_mf.v	/^  parameter ST_READ  = 2'd2$/;"	c
SUB	.\openMSP430_defines.v	/^`define SUB    4$/;"	c
SUBC	.\openMSP430_defines.v	/^`define SUBC   3$/;"	c
SUMEXT	.\omsp_multiplier.v	/^                       SUMEXT      = 'hE;$/;"	c
SUMEXT_D	.\omsp_multiplier.v	/^                       SUMEXT_D    = (BASE_REG << SUMEXT);$/;"	c
SWBRK_PND	.\openMSP430_defines.v	/^`define SWBRK_PND   3$/;"	c
SWPB	.\openMSP430_defines.v	/^`define SWPB   1$/;"	c
SW_BRK_EN	.\openMSP430_defines.v	/^`define SW_BRK_EN   3$/;"	c
SXT	.\openMSP430_defines.v	/^`define SXT    3$/;"	c
SYMB	.\openMSP430_defines.v	/^`define SYMB     4$/;"	c
SYNC_DBG_UART_RXD	.\openMSP430_defines.v	/^`define SYNC_DBG_UART_RXD$/;"	c
SYNC_NMI	.\openMSP430_defines.v	/^`define SYNC_NMI$/;"	c
TAB	.\altera_mf.v	/^`define TAB             "\\t"$/;"	c
TACAP	.\omsp_timerA_defines.v	/^`define TACAP       8$/;"	c
TACCI	.\omsp_timerA_defines.v	/^`define TACCI       3$/;"	c
TACCIE	.\omsp_timerA_defines.v	/^`define TACCIE      4$/;"	c
TACCIFG	.\omsp_timerA_defines.v	/^`define TACCIFG     0$/;"	c
TACCISx	.\omsp_timerA_defines.v	/^`define TACCISx    13:12$/;"	c
TACCR0	.\omsp_timerA.v	/^                       TACCR0     = 'h72,$/;"	c
TACCR0_D	.\omsp_timerA.v	/^                       TACCR0_D   = (BASE_REG << TACCR0),$/;"	c
TACCR1	.\omsp_timerA.v	/^                       TACCR1     = 'h74,$/;"	c
TACCR1_D	.\omsp_timerA.v	/^                       TACCR1_D   = (BASE_REG << TACCR1),$/;"	c
TACCR2	.\omsp_timerA.v	/^                       TACCR2     = 'h76,$/;"	c
TACCR2_D	.\omsp_timerA.v	/^                       TACCR2_D   = (BASE_REG << TACCR2),$/;"	c
TACCTL0	.\omsp_timerA.v	/^                       TACCTL0    = 'h62,$/;"	c
TACCTL0_D	.\omsp_timerA.v	/^                       TACCTL0_D  = (BASE_REG << TACCTL0),$/;"	c
TACCTL1	.\omsp_timerA.v	/^                       TACCTL1    = 'h64,$/;"	c
TACCTL1_D	.\omsp_timerA.v	/^                       TACCTL1_D  = (BASE_REG << TACCTL1),$/;"	c
TACCTL2	.\omsp_timerA.v	/^                       TACCTL2    = 'h66,$/;"	c
TACCTL2_D	.\omsp_timerA.v	/^                       TACCTL2_D  = (BASE_REG << TACCTL2),$/;"	c
TACLR	.\omsp_timerA_defines.v	/^`define TACLR       2$/;"	c
TACMx	.\omsp_timerA_defines.v	/^`define TACMx      15:14$/;"	c
TACOV	.\omsp_timerA_defines.v	/^`define TACOV       1$/;"	c
TACTL	.\omsp_timerA.v	/^parameter [DEC_WD-1:0] TACTL      = 'h60,$/;"	c
TACTL_D	.\omsp_timerA.v	/^parameter [DEC_SZ-1:0] TACTL_D    = (BASE_REG << TACTL),$/;"	c
TAIDx	.\omsp_timerA_defines.v	/^`define TAIDx       7:6$/;"	c
TAIE	.\omsp_timerA_defines.v	/^`define TAIE        1$/;"	c
TAIFG	.\omsp_timerA_defines.v	/^`define TAIFG       0$/;"	c
TAIV	.\omsp_timerA.v	/^                       TAIV       = 'h2E;$/;"	c
TAIV_D	.\omsp_timerA.v	/^                       TAIV_D     = (BASE_REG << TAIV);$/;"	c
TAMCx	.\omsp_timerA_defines.v	/^`define TAMCx       5:4$/;"	c
TAOUT	.\omsp_timerA_defines.v	/^`define TAOUT       2$/;"	c
TAOUTMODx	.\omsp_timerA_defines.v	/^`define TAOUTMODx   7:5$/;"	c
TAR	.\omsp_timerA.v	/^                       TAR        = 'h70,$/;"	c
TAR_D	.\omsp_timerA.v	/^                       TAR_D      = (BASE_REG << TAR),$/;"	c
TASCCI	.\omsp_timerA_defines.v	/^`define TASCCI     10$/;"	c
TASCS	.\omsp_timerA_defines.v	/^`define TASCS      11$/;"	c
TASSELx	.\omsp_timerA_defines.v	/^`define TASSELx     9:8$/;"	c
TFDONE	.\dma_decode_16b.v	/^                       TFDONE      = 'hF8;$/;"	c
TFDONE_D	.\dma_decode_16b.v	/^                       TFDONE_D      = (BASE_REG << TFDONE   );$/;"	c
TIMESTATE	.\altera_mf.v	/^`define TIMESTATE     3'b101$/;"	c
TIME_BIT_LENGTH	.\altera_mf.v	/^`define TIME_BIT_LENGTH 64$/;"	c
TLR_ST	.\altera_mf.v	/^`define TLR_ST  5'b00000$/;"	c
TOTAL_NR	.\openMSP430.v	/^parameter            TOTAL_NR = 8'h00;       \/\/ Total number of oMSP instances-1 (for multicore systems)$/;"	c
TOTAL_TAP_DISTANCE	.\altera_mf.v	/^    parameter TOTAL_TAP_DISTANCE = number_of_taps * tap_distance;$/;"	c
TRST	.\altera_mf.v	/^    parameter TRST = 5000;$/;"	c
TRSTCLK	.\altera_mf.v	/^    parameter TRSTCLK = 5000;$/;"	c
TRUE	.\altera_mf.v	/^`define TRUE 1 $/;"	c
TX_BYTE_HI	.\omsp_dbg_i2c.v	/^parameter  TX_BYTE_HI = 3'h4;$/;"	c
TX_BYTE_LO	.\omsp_dbg_i2c.v	/^parameter  TX_BYTE_LO = 3'h3;$/;"	c
TX_DATA	.\omsp_dbg_i2c.v	/^parameter   TX_DATA      =  3'h4;$/;"	c
TX_DATA1	.\omsp_dbg_uart.v	/^parameter  TX_DATA1 = 3'h4;$/;"	c
TX_DATA2	.\omsp_dbg_uart.v	/^parameter  TX_DATA2 = 3'h5;$/;"	c
TX_DATA_ACK	.\omsp_dbg_i2c.v	/^parameter   TX_DATA_ACK  =  3'h5;$/;"	c
TYPESTATE	.\altera_mf.v	/^`define TYPESTATE     3'b111$/;"	c
TYPE_BIT_LENGTH	.\altera_mf.v	/^`define TYPE_BIT_LENGTH 4$/;"	c
TYPE_SCAN_LENGTH	.\altera_mf.v	/^`define TYPE_SCAN_LENGTH (sld_node_n_scan * `TYPE_BIT_LENGTH) - 1$/;"	c
UDR_ST	.\altera_mf.v	/^`define UDR_ST  5'b01001$/;"	c
UIR_ST	.\altera_mf.v	/^`define UIR_ST  5'b01110$/;"	c
UNUSED_aclk	.\omsp_watchdog.v	/^     wire   UNUSED_aclk  = aclk;$/;"	n
UNUSED_aclk	.\omsp_watchdog.v	/^wire        UNUSED_aclk      = aclk;$/;"	n
UNUSED_aclk_en	.\omsp_watchdog.v	/^wire        UNUSED_aclk_en  = aclk_en;$/;"	n
UNUSED_cpu_en_aux_s	.\omsp_clock_module.v	/^    wire    UNUSED_cpu_en_aux_s = cpu_en_aux_s;$/;"	n
UNUSED_cpu_en_wkup1	.\omsp_clock_module.v	/^   wire   UNUSED_cpu_en_wkup1 = cpu_en_wkup;$/;"	n
UNUSED_cpu_en_wkup2	.\omsp_clock_module.v	/^   wire   UNUSED_cpu_en_wkup2           = cpu_en_wkup;$/;"	n
UNUSED_cpu_id	.\openMSP430.v	/^wire [31:0] UNUSED_cpu_id            = cpu_id;$/;"	n
UNUSED_cpuoff	.\omsp_clock_module.v	/^   wire   UNUSED_cpuoff               = cpuoff;$/;"	n
UNUSED_cpuoff	.\omsp_clock_module.v	/^  wire  UNUSED_cpuoff                 = cpuoff;$/;"	n
UNUSED_cpuoff_and_mclk_enable	.\omsp_clock_module.v	/^  wire    UNUSED_cpuoff_and_mclk_enable = cpuoff_and_mclk_enable;$/;"	n
UNUSED_dbg_clk	.\openMSP430.v	/^wire        UNUSED_dbg_clk           = dbg_clk;$/;"	n
UNUSED_dbg_en	.\omsp_clock_module.v	/^    wire   UNUSED_dbg_en =  dbg_en;$/;"	n
UNUSED_dbg_en_s	.\openMSP430.v	/^wire        UNUSED_dbg_en_s          = dbg_en_s;$/;"	n
UNUSED_dbg_i2c_addr	.\omsp_dbg.v	/^    wire [6:0] UNUSED_dbg_i2c_addr      = dbg_i2c_addr;$/;"	n
UNUSED_dbg_i2c_addr	.\openMSP430.v	/^wire  [6:0] UNUSED_dbg_i2c_addr      = dbg_i2c_addr;$/;"	n
UNUSED_dbg_i2c_broadcast	.\omsp_dbg.v	/^    wire [6:0] UNUSED_dbg_i2c_broadcast = dbg_i2c_broadcast;$/;"	n
UNUSED_dbg_i2c_broadcast	.\omsp_dbg_i2c.v	/^wire [6:0] UNUSED_dbg_i2c_broadcast = dbg_i2c_broadcast;$/;"	n
UNUSED_dbg_i2c_broadcast	.\openMSP430.v	/^wire  [6:0] UNUSED_dbg_i2c_broadcast = dbg_i2c_broadcast;$/;"	n
UNUSED_dbg_i2c_scl	.\omsp_dbg.v	/^    wire       UNUSED_dbg_i2c_scl       = dbg_i2c_scl;$/;"	n
UNUSED_dbg_i2c_scl	.\openMSP430.v	/^wire        UNUSED_dbg_i2c_scl       = dbg_i2c_scl;$/;"	n
UNUSED_dbg_i2c_sda_in	.\omsp_dbg.v	/^    wire       UNUSED_dbg_i2c_sda_in    = dbg_i2c_sda_in;$/;"	n
UNUSED_dbg_i2c_sda_in	.\openMSP430.v	/^wire        UNUSED_dbg_i2c_sda_in    = dbg_i2c_sda_in;$/;"	n
UNUSED_dbg_mem_din	.\openMSP430.v	/^wire [15:0] UNUSED_dbg_mem_din       = dbg_mem_din;$/;"	n
UNUSED_dbg_rd_rdy	.\omsp_dbg.v	/^    wire       UNUSED_dbg_rd_rdy        = dbg_rd_rdy;$/;"	n
UNUSED_dbg_reg_din	.\openMSP430.v	/^wire [15:0] UNUSED_dbg_reg_din       = dbg_reg_din;$/;"	n
UNUSED_dbg_rst	.\openMSP430.v	/^wire        UNUSED_dbg_rst           = dbg_rst;$/;"	n
UNUSED_dbg_uart_rxd	.\omsp_dbg.v	/^    wire   UNUSED_dbg_uart_rxd =  dbg_uart_rxd;$/;"	n
UNUSED_dbg_uart_rxd	.\openMSP430.v	/^wire        UNUSED_dbg_uart_rxd      = dbg_uart_rxd;$/;"	n
UNUSED_decode_noirq	.\openMSP430.v	/^wire        UNUSED_decode_noirq      = decode_noirq;$/;"	n
UNUSED_dma_addr	.\omsp_mem_backbone.v	/^wire [15:1] UNUSED_dma_addr     = dma_addr;$/;"	n
UNUSED_dma_din	.\omsp_mem_backbone.v	/^wire [15:0] UNUSED_dma_din      = dma_din;$/;"	n
UNUSED_dma_en	.\omsp_frontend.v	/^wire    UNUSED_dma_en   = dma_en;$/;"	n
UNUSED_dma_en	.\omsp_mem_backbone.v	/^wire        UNUSED_dma_en       = dma_en;$/;"	n
UNUSED_dma_priority	.\omsp_mem_backbone.v	/^wire        UNUSED_dma_priority = dma_priority;$/;"	n
UNUSED_dma_we	.\omsp_mem_backbone.v	/^wire  [1:0] UNUSED_dma_we       = dma_we;$/;"	n
UNUSED_dma_wkup	.\omsp_frontend.v	/^wire    UNUSED_dma_wkup = dma_wkup;$/;"	n
UNUSED_eu_mab	.\omsp_dbg.v	/^wire [15:0] UNUSED_eu_mab   =  eu_mab;$/;"	n
UNUSED_eu_mab_0	.\openMSP430.v	/^wire        UNUSED_eu_mab_0          = eu_mab[0];$/;"	n
UNUSED_eu_mb_en	.\omsp_dbg.v	/^wire        UNUSED_eu_mb_en =  eu_mb_en;$/;"	n
UNUSED_eu_mb_wr	.\omsp_dbg.v	/^wire  [1:0] UNUSED_eu_mb_wr =  eu_mb_wr;$/;"	n
UNUSED_fe_mab_0	.\openMSP430.v	/^wire UNUSED_fe_mab_0 = fe_mab[0];$/;"	n
UNUSED_inst_ad_const	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_const   = inst_ad[`CONST];$/;"	n
UNUSED_inst_ad_idx	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_idx     = inst_ad[`IDX];$/;"	n
UNUSED_inst_ad_imm	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_imm     = inst_ad[`IMM];$/;"	n
UNUSED_inst_ad_indir	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_indir   = inst_ad[`INDIR];$/;"	n
UNUSED_inst_ad_indir_i	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_indir_i = inst_ad[`INDIR_I];$/;"	n
UNUSED_inst_ad_symb	.\omsp_execution_unit.v	/^wire   UNUSED_inst_ad_symb    = inst_ad[`SYMB];$/;"	n
UNUSED_inst_alu	.\omsp_alu.v	/^wire    UNUSED_inst_alu     = inst_alu[`EXEC_NO_WR];$/;"	n
UNUSED_inst_jmp	.\omsp_alu.v	/^wire    UNUSED_inst_jmp     = inst_jmp[`JMP];$/;"	n
UNUSED_inst_so_call	.\omsp_alu.v	/^wire    UNUSED_inst_so_call = inst_so[`CALL];$/;"	n
UNUSED_inst_so_push	.\omsp_alu.v	/^wire    UNUSED_inst_so_push = inst_so[`PUSH];$/;"	n
UNUSED_inst_so_reti	.\omsp_alu.v	/^wire    UNUSED_inst_so_reti = inst_so[`RETI];$/;"	n
UNUSED_inst_so_rra	.\omsp_alu.v	/^wire    UNUSED_inst_so_rra  = inst_so[`RRA];$/;"	n
UNUSED_lfxt_clk	.\omsp_clock_module.v	/^    wire    UNUSED_lfxt_clk     = lfxt_clk;$/;"	n
UNUSED_mclk_dma_wkup	.\omsp_clock_module.v	/^  wire  UNUSED_mclk_dma_wkup          = mclk_dma_wkup;$/;"	n
UNUSED_mclk_enable	.\omsp_clock_module.v	/^  wire  UNUSED_mclk_enable            = mclk_enable;$/;"	n
UNUSED_mclk_wkup	.\omsp_clock_module.v	/^   wire   UNUSED_mclk_wkup           = mclk_wkup;$/;"	n
UNUSED_nmi	.\omsp_sfr.v	/^wire        UNUSED_nmi       = nmi;$/;"	n
UNUSED_nmi_acc	.\omsp_sfr.v	/^wire        UNUSED_nmi_acc   = nmi_acc;$/;"	n
UNUSED_nmi_wkup	.\omsp_frontend.v	/^wire    UNUSED_nmi_wkup = nmi_wkup;$/;"	n
UNUSED_oscoff	.\omsp_clock_module.v	/^   wire   UNUSED_oscoff                 = oscoff;$/;"	n
UNUSED_oscoff_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire   UNUSED_oscoff_mclk_dma_wkup = mclk_dma_wkup;$/;"	n
UNUSED_pc	.\omsp_dbg.v	/^wire [15:0] UNUSED_pc       =  pc;$/;"	n
UNUSED_per_din	.\omsp_watchdog.v	/^wire [15:0] UNUSED_per_din   = per_din;$/;"	n
UNUSED_per_din_15_8	.\omsp_sfr.v	/^wire  [7:0] UNUSED_per_din_15_8 = per_din[15:8];$/;"	n
UNUSED_por	.\openMSP430.v	/^wire   UNUSED_por           =  por;$/;"	n
UNUSED_puc_pnd_set	.\openMSP430.v	/^wire        UNUSED_puc_pnd_set       = puc_pnd_set;$/;"	n
UNUSED_puc_sm_rst	.\omsp_clock_module.v	/^     wire   UNUSED_puc_sm_rst = puc_sm_rst;$/;"	n
UNUSED_reg_sp_val_0	.\omsp_register_file.v	/^wire UNUSED_reg_sp_val_0  = reg_sp_val[0];$/;"	n
UNUSED_scan_enable	.\omsp_clock_module.v	/^  wire    UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_enable	.\omsp_frontend.v	/^wire       UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_enable	.\omsp_mem_backbone.v	/^wire    UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_enable	.\omsp_multiplier.v	/^wire        UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_enable	.\omsp_register_file.v	/^wire       UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_enable	.\omsp_watchdog.v	/^wire       UNUSED_scan_enable = scan_enable;$/;"	n
UNUSED_scan_mode	.\omsp_clock_module.v	/^  wire    UNUSED_scan_mode   = scan_mode;$/;"	n
UNUSED_scan_mode	.\omsp_sfr.v	/^   wire   UNUSED_scan_mode = scan_mode;$/;"	n
UNUSED_scan_mode	.\omsp_sfr.v	/^wire        UNUSED_scan_mode = scan_mode;$/;"	n
UNUSED_scan_mode	.\omsp_watchdog.v	/^wire        UNUSED_scan_mode = scan_mode;$/;"	n
UNUSED_scg0	.\omsp_clock_module.v	/^   wire   UNUSED_scg0         = scg0;$/;"	n
UNUSED_scg0_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire   UNUSED_scg0_mclk_dma_wkup   = mclk_dma_wkup;$/;"	n
UNUSED_scg1	.\omsp_clock_module.v	/^     wire   UNUSED_scg1       = scg1;$/;"	n
UNUSED_scg1_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire   UNUSED_scg1_mclk_dma_wkup   = mclk_dma_wkup;$/;"	n
UNUSED_smclk	.\omsp_watchdog.v	/^     wire   UNUSED_smclk = smclk;$/;"	n
UNUSED_smclk	.\omsp_watchdog.v	/^wire        UNUSED_smclk     = smclk;$/;"	n
UNUSED_smclk_en	.\omsp_watchdog.v	/^wire        UNUSED_smclk_en = smclk_en;$/;"	n
UNUSED_wdt_wkup	.\omsp_frontend.v	/^wire    UNUSED_wdt_wkup = wdt_wkup;$/;"	n
UNUSED_wdtie	.\openMSP430.v	/^wire   UNUSED_wdtie         =  wdtie;$/;"	n
UNUSED_wdtifg_sw_clr	.\openMSP430.v	/^wire   UNUSED_wdtifg_sw_clr =  wdtifg_sw_clr;$/;"	n
UNUSED_wdtifg_sw_set	.\openMSP430.v	/^wire   UNUSED_wdtifg_sw_set =  wdtifg_sw_set;$/;"	n
UNUSED_wdtnmies	.\omsp_sfr.v	/^wire        UNUSED_wdtnmies  = wdtnmies;$/;"	n
UNUSED_wkup	.\omsp_frontend.v	/^wire    UNUSED_wkup     = wkup;$/;"	n
USER_VERSION	.\openMSP430_defines.v	/^`define USER_VERSION 5'b00000$/;"	c
USE_NEW_CORECLK_CKT	.\altera_mf.v	/^    parameter USE_NEW_CORECLK_CKT = (deserialization_factor%2 == 1) && (coreclock_divide_by == 1) ? "TRUE" : "FALSE";$/;"	c
V	.\omsp_alu.v	/^wire    V           = inst_bw ? ((~op_src_in[7]  & ~op_dst_in[7]  &  alu_out[7])  |$/;"	n
VALUESTATE	.\altera_mf.v	/^`define VALUESTATE    3'b011$/;"	c
VITERBI_LONG	.\dma_tfbuffer.v	/^						 VITERBI_LONG                = 'h6;$/;"	c
VITERBI_LONG_D	.\dma_tfbuffer.v	/^                         VITERBI_LONG_D      = (DEC_REG << VITERBI_LONG);						 \/\/0001_0000$/;"	c
VSERIES_FAMILY	.\altera_mf.v	/^    parameter VSERIES_FAMILY = ((((intended_device_family == "Stratix V") || (intended_device_family == "STRATIX V") || (intended_device_family == "stratix v") || (intended_device_family == "StratixV") || (intended_device_family == "STRATIXV") || (intended_device_family == "stratixv") || (intended_device_family == "Stratix V (GS)") || (intended_device_family == "STRATIX V (GS)") || (intended_device_family == "stratix v (gs)") || (intended_device_family == "StratixV(GS)") || (intended_device_family == "STRATIXV(GS)") || (intended_device_family == "stratixv(gs)") || (intended_device_family == "Stratix V (GT)") || (intended_device_family == "STRATIX V (GT)") || (intended_device_family == "stratix v (gt)") || (intended_device_family == "StratixV(GT)") || (intended_device_family == "STRATIXV(GT)") || (intended_device_family == "stratixv(gt)") || (intended_device_family == "Stratix V (GX)") || (intended_device_family == "STRATIX V (GX)") || (intended_device_family == "stratix v (gx)") || (intended_device_family == "StratixV(GX)") || (intended_device_family == "STRATIXV(GX)") || (intended_device_family == "stratixv(gx)") || (intended_device_family == "Stratix V (GS\/GX)") || (intended_device_family == "STRATIX V (GS\/GX)") || (intended_device_family == "stratix v (gs\/gx)") || (intended_device_family == "StratixV(GS\/GX)") || (intended_device_family == "STRATIXV(GS\/GX)") || (intended_device_family == "stratixv(gs\/gx)") || (intended_device_family == "Stratix V (GS\/GT)") || (intended_device_family == "STRATIX V (GS\/GT)") || (intended_device_family == "stratix v (gs\/gt)") || (intended_device_family == "StratixV(GS\/GT)") || (intended_device_family == "STRATIXV(GS\/GT)") || (intended_device_family == "stratixv(gs\/gt)") || (intended_device_family == "Stratix V (GT\/GX)") || (intended_device_family == "STRATIX V (GT\/GX)") || (intended_device_family == "stratix v (gt\/gx)") || (intended_device_family == "StratixV(GT\/GX)") || (intended_device_family == "STRATIXV(GT\/GX)") || (intended_device_family == "stratixv(gt\/gx)") || (intended_device_family == "Stratix V (GX\/GS)") || (intended_device_family == "STRATIX V (GX\/GS)") || (intended_device_family == "stratix v (gx\/gs)") || (intended_device_family == "StratixV(GX\/GS)") || (intended_device_family == "STRATIXV(GX\/GS)") || (intended_device_family == "stratixv(gx\/gs)") || (intended_device_family == "Stratix V (GT\/GS)") || (intended_device_family == "STRATIX V (GT\/GS)") || (intended_device_family == "stratix v (gt\/gs)") || (intended_device_family == "StratixV(GT\/GS)") || (intended_device_family == "STRATIXV(GT\/GS)") || (intended_device_family == "stratixv(gt\/gs)") || (intended_device_family == "Stratix V (GX\/GT)") || (intended_device_family == "STRATIX V (GX\/GT)") || (intended_device_family == "stratix v (gx\/gt)") || (intended_device_family == "StratixV(GX\/GT)") || (intended_device_family == "STRATIXV(GX\/GT)") || (intended_device_family == "stratixv(gx\/gt)") || (intended_device_family == "Stratix V (GS\/GT\/GX)") || (intended_device_family == "STRATIX V (GS\/GT\/GX)") || (intended_device_family == "stratix v (gs\/gt\/gx)") || (intended_device_family == "Stratix V (GS\/GX\/GT)") || (intended_device_family == "STRATIX V (GS\/GX\/GT)") || (intended_device_family == "stratix v (gs\/gx\/gt)") || (intended_device_family == "Stratix V (GT\/GS\/GX)") || (intended_device_family == "STRATIX V (GT\/GS\/GX)") || (intended_device_family == "stratix v (gt\/gs\/gx)") || (intended_device_family == "Stratix V (GT\/GX\/GS)") || (intended_device_family == "STRATIX V (GT\/GX\/GS)") || (intended_device_family == "stratix v (gt\/gx\/gs)") || (intended_device_family == "Stratix V (GX\/GS\/GT)") || (intended_device_family == "STRATIX V (GX\/GS\/GT)") || (intended_device_family == "stratix v (gx\/gs\/gt)") || (intended_device_family == "Stratix V (GX\/GT\/GS)") || (intended_device_family == "STRATIX V (GX\/GT\/GS)") || (intended_device_family == "stratix v (gx\/gt\/gs)") || (intended_device_family == "StratixV(GS\/GT\/GX)") || (intended_device_family == "STRATIXV(GS\/GT\/GX)") || (intended_device_family == "stratixv(gs\/gt\/gx)") || (intended_device_family == "StratixV(GS\/GX\/GT)") || (intended_device_family == "STRATIXV(GS\/GX\/GT)") || (intended_device_family == "stratixv(gs\/gx\/gt)") || (intended_device_family == "StratixV(GT\/GS\/GX)") || (intended_device_family == "STRATIXV(GT\/GS\/GX)") || (intended_device_family == "stratixv(gt\/gs\/gx)") || (intended_device_family == "StratixV(GT\/GX\/GS)") || (intended_device_family == "STRATIXV(GT\/GX\/GS)") || (intended_device_family == "stratixv(gt\/gx\/gs)") || (intended_device_family == "StratixV(GX\/GS\/GT)") || (intended_device_family == "STRATIXV(GX\/GS\/GT)") || (intended_device_family == "stratixv(gx\/gs\/gt)") || (intended_device_family == "StratixV(GX\/GT\/GS)") || (intended_device_family == "STRATIXV(GX\/GT\/GS)") || (intended_device_family == "stratixv(gx\/gt\/gs)") || (intended_device_family == "Stratix V (GS\/GT\/GX\/E)") || (intended_device_family == "STRATIX V (GS\/GT\/GX\/E)") || (intended_device_family == "stratix v (gs\/gt\/gx\/e)") || (intended_device_family == "StratixV(GS\/GT\/GX\/E)") || (intended_device_family == "STRATIXV(GS\/GT\/GX\/E)") || (intended_device_family == "stratixv(gs\/gt\/gx\/e)") || (intended_device_family == "Stratix V (E)") || (intended_device_family == "STRATIX V (E)") || (intended_device_family == "stratix v (e)") || (intended_device_family == "StratixV(E)") || (intended_device_family == "STRATIXV(E)") || (intended_device_family == "stratixv(e)"))$/;"	c
V_DR_SCAN_TYPE	.\altera_mf.v	/^`define V_DR_SCAN_TYPE 4'b0010$/;"	c
V_IR_SCAN_TYPE	.\altera_mf.v	/^`define V_IR_SCAN_TYPE 4'b0001$/;"	c
V_xor	.\omsp_alu.v	/^wire    V_xor       = inst_bw ? (op_src_in[7]  & op_dst_in[7])  :$/;"	n
WATCHDOG	.\openMSP430_defines.v	/^`define WATCHDOG$/;"	c
WDTCTL	.\omsp_watchdog.v	/^parameter [DEC_WD-1:0] WDTCTL      = 'h0;$/;"	c
WDTCTL_D	.\omsp_watchdog.v	/^parameter [DEC_SZ-1:0] WDTCTL_D    = (BASE_REG << WDTCTL);$/;"	c
WDTCTL_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTCTL_MASK   = (8'b1001_0011 | WDTSSEL_MASK | WDTNMIES_MASK);$/;"	c
WDTCTL_RD_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTCTL_RD_MASK  = WDTNMI_RD_MASK | WDTSSEL_RD_MASK;$/;"	c
WDTNMIES_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTNMIES_MASK = 8'h00;$/;"	c
WDTNMIES_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTNMIES_MASK = 8'h40;$/;"	c
WDTNMI_RD_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTNMI_RD_MASK  = 8'h00;$/;"	c
WDTNMI_RD_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTNMI_RD_MASK  = 8'h20;$/;"	c
WDTSSEL_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTSSEL_MASK  = 8'h00;$/;"	c
WDTSSEL_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTSSEL_MASK  = 8'h04;$/;"	c
WDTSSEL_RD_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTSSEL_RD_MASK = 8'h00;$/;"	c
WDTSSEL_RD_MASK	.\omsp_watchdog.v	/^parameter [7:0] WDTSSEL_RD_MASK = 8'h04;$/;"	c
WIDTH_MAN_EXP	.\altera_mf.v	/^    parameter WIDTH_MAN_EXP = width_exp + width_man;$/;"	c
WIDTH_RATIO	.\altera_mf.v	/^    parameter WIDTH_RATIO = (lpm_width > lpm_width_r) ? lpm_width \/ lpm_width_r :$/;"	c
WORD	.\ram_32_64.vhd	/^SUBTYPE WORD IS STD_LOGIC_VECTOR(63 DOWNTO 0);$/;"	T
WRITE_SIDE_SYNCHRONIZERS	.\altera_mf.v	/^    parameter WRITE_SIDE_SYNCHRONIZERS = (wrsync_delaypipe != 0) ? wrsync_delaypipe :$/;"	c
X	.\altera_mf.v	/^    input X, Y;$/;"	p
X	.\altera_mf.v	/^    input X,Y;$/;"	p
X	.\altera_mf.v	/^    input X;$/;"	p
X	.\altera_mf.v	/^    integer X, Y;$/;"	r
X	.\altera_mf.v	/^    integer X,Y;$/;"	r
X	.\altera_mf.v	/^    integer X;$/;"	r
X	.\omsp_alu.v	/^   input [3:0] X;$/;"	p
XOR	.\openMSP430_defines.v	/^`define XOR   10$/;"	c
Y	.\altera_mf.v	/^    input X, Y;$/;"	p
Y	.\altera_mf.v	/^    input X,Y;$/;"	p
Y	.\altera_mf.v	/^    integer X, Y;$/;"	r
Y	.\altera_mf.v	/^    integer X,Y;$/;"	r
Y	.\omsp_alu.v	/^   input [3:0] Y;$/;"	p
Z	.\omsp_alu.v	/^wire    Z           = inst_bw ? (alu_out[7:0]==0) : (alu_out==0);$/;"	n
Z_	.\omsp_alu.v	/^   reg   [4:0] Z_;$/;"	r
a	.\altera_mf.v	/^    reg a;$/;"	r
a	.\omsp_and_gate.v	/^input          a;              \/\/ AND gate input A$/;"	p
a_graycounter	.\altera_mf.v	/^module a_graycounter (clock, cnt_en, clk_en, updown, aclr, sclr,$/;"	m
a_graycounter	.\work\a_graycounter\_primary.vhd	/^entity a_graycounter is$/;"	e
aaaa	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
aaaa_pre	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
aah	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
aah	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
aal	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
aal	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
acc_feedback	.\altera_mf.v	/^    wire [2*int_width_result - 1: 0] acc_feedback;$/;"	n
acc_feedback_reg	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] acc_feedback_reg;$/;"	r
acc_feedback_temp	.\altera_mf.v	/^    reg [accum_width + int_mult_diff_bit : 0] acc_feedback_temp;$/;"	r
acc_sel	.\omsp_multiplier.v	/^reg acc_sel;$/;"	r
accum_direction	.\altera_mf.v	/^    parameter accum_direction           = "ADD";$/;"	c
accum_direction	.\altera_mf.v	/^    parameter accum_direction = "ADD";$/;"	c
accum_final_out	.\altera_mf.v	/^    reg [int_width_result -1 : 0] accum_final_out;$/;"	r
accum_is_saturated	.\altera_mf.v	/^    output accum_is_saturated;$/;"	p
accum_is_saturated_latent	.\altera_mf.v	/^    reg accum_is_saturated_latent;$/;"	r
accum_overflow	.\altera_mf.v	/^    reg accum_overflow;$/;"	r
accum_overflow_int	.\altera_mf.v	/^    reg accum_overflow_int;$/;"	r
accum_overflow_reg	.\altera_mf.v	/^    reg accum_overflow_reg;$/;"	r
accum_overflow_stat_pipe_reg	.\altera_mf.v	/^    reg [extra_latency : 0] accum_overflow_stat_pipe_reg;$/;"	r
accum_regr_temp	.\altera_mf.v	/^    reg [8 : 0] accum_regr_temp;$/;"	r
accum_res	.\altera_mf.v	/^    reg [accum_width + int_mult_diff_bit : 0] accum_res;$/;"	r
accum_res_temp	.\altera_mf.v	/^    reg [accum_width + int_mult_diff_bit : 0] accum_res_temp;$/;"	r
accum_result	.\altera_mf.v	/^    reg [int_width_result -1 : 0] accum_result;$/;"	r
accum_result_sign_bits	.\altera_mf.v	/^    reg  [int_width_result - int_width_a - int_width_b + 2 - 1 : 0] accum_result_sign_bits;$/;"	r
accum_round	.\altera_mf.v	/^    input accum_round;$/;"	p
accum_round	.\altera_mf.v	/^    tri0 accum_round;$/;"	n
accum_round_aclr	.\altera_mf.v	/^    parameter accum_round_aclr = "ACLR3";$/;"	c
accum_round_int	.\altera_mf.v	/^    wire accum_round_int;$/;"	n
accum_round_out	.\altera_mf.v	/^    reg [int_width_result -1 : 0] accum_round_out;$/;"	r
accum_round_pipe_wire_clk	.\altera_mf.v	/^    wire accum_round_pipe_wire_clk;$/;"	n
accum_round_pipe_wire_clr	.\altera_mf.v	/^    tri0 accum_round_pipe_wire_clr;$/;"	n
accum_round_pipe_wire_en	.\altera_mf.v	/^    tri1 accum_round_pipe_wire_en;$/;"	n
accum_round_pipeline_aclr	.\altera_mf.v	/^    parameter accum_round_pipeline_aclr = "ACLR3";$/;"	c
accum_round_pipeline_reg	.\altera_mf.v	/^    parameter accum_round_pipeline_reg = "CLOCK0";$/;"	c
accum_round_reg	.\altera_mf.v	/^    parameter accum_round_reg = "CLOCK0";$/;"	c
accum_round_tmp1	.\altera_mf.v	/^    reg  accum_round_tmp1;$/;"	r
accum_round_tmp1_wire	.\altera_mf.v	/^    wire accum_round_tmp1_wire;$/;"	n
accum_round_tmp2	.\altera_mf.v	/^    reg  accum_round_tmp2;$/;"	r
accum_round_wire_clk	.\altera_mf.v	/^    wire accum_round_wire_clk;$/;"	n
accum_round_wire_clr	.\altera_mf.v	/^    tri0 accum_round_wire_clr;$/;"	n
accum_round_wire_en	.\altera_mf.v	/^    tri1 accum_round_wire_en;$/;"	n
accum_sat_for_limit	.\altera_mf.v	/^    parameter accum_sat_for_limit = ((accumulator_saturation == "NO")? int_width_result - 1 : int_width_a + int_width_b - 33 );$/;"	c
accum_saturate_out	.\altera_mf.v	/^    reg [int_width_result -1 : 0] accum_saturate_out;$/;"	r
accum_saturate_overflow	.\altera_mf.v	/^    reg accum_saturate_overflow;$/;"	r
accum_saturate_pipe	.\altera_mf.v	/^    reg [extra_accumulator_latency : 0] accum_saturate_pipe;$/;"	r
accum_saturation	.\altera_mf.v	/^    input accum_saturation;$/;"	p
accum_saturation	.\altera_mf.v	/^    tri0 accum_saturation;$/;"	n
accum_saturation_aclr	.\altera_mf.v	/^    parameter accum_saturation_aclr = "ACLR3";$/;"	c
accum_saturation_int	.\altera_mf.v	/^    wire accum_saturation_int;$/;"	n
accum_saturation_pipe_wire_clk	.\altera_mf.v	/^    wire accum_saturation_pipe_wire_clk;$/;"	n
accum_saturation_pipe_wire_clr	.\altera_mf.v	/^    tri0 accum_saturation_pipe_wire_clr;$/;"	n
accum_saturation_pipe_wire_en	.\altera_mf.v	/^    tri1 accum_saturation_pipe_wire_en;$/;"	n
accum_saturation_pipeline_aclr	.\altera_mf.v	/^    parameter accum_saturation_pipeline_aclr = "ACLR3";$/;"	c
accum_saturation_pipeline_reg	.\altera_mf.v	/^    parameter accum_saturation_pipeline_reg = "CLOCK0";$/;"	c
accum_saturation_reg	.\altera_mf.v	/^    parameter accum_saturation_reg = "CLOCK0";$/;"	c
accum_saturation_tmp1	.\altera_mf.v	/^    reg  accum_saturation_tmp1;$/;"	r
accum_saturation_tmp1_wire	.\altera_mf.v	/^    wire accum_saturation_tmp1_wire;$/;"	n
accum_saturation_tmp2	.\altera_mf.v	/^    reg  accum_saturation_tmp2;$/;"	r
accum_saturation_wire_clk	.\altera_mf.v	/^    wire accum_saturation_wire_clk;$/;"	n
accum_saturation_wire_clr	.\altera_mf.v	/^    tri0 accum_saturation_wire_clr;$/;"	n
accum_saturation_wire_en	.\altera_mf.v	/^    tri1 accum_saturation_wire_en;$/;"	n
accum_sload	.\altera_mf.v	/^    input accum_sload;$/;"	p
accum_sload_aclr	.\altera_mf.v	/^    parameter accum_sload_aclr          = "ACLR3";$/;"	c
accum_sload_aclr	.\altera_mf.v	/^    parameter accum_sload_aclr = "NONE";$/;"	c
accum_sload_pipeline_aclr	.\altera_mf.v	/^    parameter accum_sload_pipeline_aclr = "ACLR3";$/;"	c
accum_sload_pipeline_aclr	.\altera_mf.v	/^    parameter accum_sload_pipeline_aclr = "NONE";$/;"	c
accum_sload_pipeline_reg	.\altera_mf.v	/^    parameter accum_sload_pipeline_reg  = "CLOCK0";$/;"	c
accum_sload_pipeline_register	.\altera_mf.v	/^    parameter accum_sload_pipeline_register = "UNREGISTERED";$/;"	c
accum_sload_reg	.\altera_mf.v	/^    parameter accum_sload_reg           = "CLOCK0";$/;"	c
accum_sload_register	.\altera_mf.v	/^    parameter accum_sload_register = "UNREGISTERED";$/;"	c
accum_sload_upper_data	.\altera_mf.v	/^    input [width_result -1 : width_result - width_upper_data] accum_sload_upper_data;$/;"	p
accum_sload_upper_data_aclr	.\altera_mf.v	/^    parameter accum_sload_upper_data_aclr = "ACLR3";$/;"	c
accum_sload_upper_data_int	.\altera_mf.v	/^    wire [width_result -1 : width_result - width_upper_data] accum_sload_upper_data_int;$/;"	n
accum_sload_upper_data_pipe_wire_clk	.\altera_mf.v	/^    wire accum_sload_upper_data_pipe_wire_clk;$/;"	n
accum_sload_upper_data_pipe_wire_clr	.\altera_mf.v	/^    tri0 accum_sload_upper_data_pipe_wire_clr;$/;"	n
accum_sload_upper_data_pipe_wire_en	.\altera_mf.v	/^    tri1 accum_sload_upper_data_pipe_wire_en;$/;"	n
accum_sload_upper_data_pipeline_aclr	.\altera_mf.v	/^    parameter accum_sload_upper_data_pipeline_aclr = "ACLR3";$/;"	c
accum_sload_upper_data_pipeline_reg	.\altera_mf.v	/^    parameter accum_sload_upper_data_pipeline_reg = "CLOCK0";$/;"	c
accum_sload_upper_data_reg	.\altera_mf.v	/^    parameter accum_sload_upper_data_reg = "CLOCK0";$/;"	c
accum_sload_upper_data_wire_clk	.\altera_mf.v	/^    wire accum_sload_upper_data_wire_clk;$/;"	n
accum_sload_upper_data_wire_clr	.\altera_mf.v	/^    tri0 accum_sload_upper_data_wire_clr;$/;"	n
accum_sload_upper_data_wire_en	.\altera_mf.v	/^    tri1 accum_sload_upper_data_wire_en;$/;"	n
accum_width	.\altera_mf.v	/^    parameter accum_width = (int_width_a + int_width_b < 44)? 44: int_width_a + int_width_b;$/;"	c
accumsload_int	.\altera_mf.v	/^    tri0 accumsload_int;$/;"	n
accumsload_pipe_reg	.\altera_mf.v	/^    reg accumsload_pipe_reg;$/;"	r
accumsload_pipe_wire	.\altera_mf.v	/^    wire accumsload_pipe_wire;$/;"	n
accumsload_pipe_wire_clk	.\altera_mf.v	/^    wire accumsload_pipe_wire_clk;$/;"	n
accumsload_pipe_wire_clr	.\altera_mf.v	/^    tri0 accumsload_pipe_wire_clr;$/;"	n
accumsload_pipe_wire_en	.\altera_mf.v	/^    tri1 accumsload_pipe_wire_en;$/;"	n
accumsload_reg	.\altera_mf.v	/^    reg accumsload_reg;$/;"	r
accumsload_reg_wire_clk	.\altera_mf.v	/^    wire accumsload_reg_wire_clk;$/;"	n
accumsload_reg_wire_clr	.\altera_mf.v	/^    tri0 accumsload_reg_wire_clr;$/;"	n
accumsload_reg_wire_en	.\altera_mf.v	/^    tri1 accumsload_reg_wire_en;$/;"	n
accumsload_sel	.\altera_mf.v	/^    wire [width_result - 1 : 0]accumsload_sel;$/;"	n
accumsload_wire	.\altera_mf.v	/^    wire accumsload_wire;$/;"	n
accumulator	.\altera_mf.v	/^    parameter accumulator = "NO";$/;"	c
accumulator_rounding	.\altera_mf.v	/^    parameter accumulator_rounding = "NO";$/;"	c
accumulator_saturation	.\altera_mf.v	/^    parameter accumulator_saturation = "NO";$/;"	c
aclk	.\omsp_clock_module.v	/^output              aclk;             \/\/ ACLK$/;"	p
aclk	.\omsp_watchdog.v	/^input               aclk;           \/\/ ACLK$/;"	p
aclk	.\openMSP430.v	/^output               aclk;                   \/\/ ASIC ONLY: ACLK$/;"	p
aclk	.\openMSP430_fpga.v	/^wire               aclk;$/;"	n
aclk_active	.\omsp_clock_module.v	/^   wire      aclk_active  =  cpu_en_aux_s & (~oscoff_s | oscoff_and_mclk_dma_enable_s);$/;"	n
aclk_div	.\omsp_clock_module.v	/^   reg [2:0] aclk_div;$/;"	r
aclk_div	.\omsp_clock_module.v	/^  reg [2:0] aclk_div;$/;"	r
aclk_div_en	.\omsp_clock_module.v	/^   wire      aclk_div_en  =  aclk_active & aclk_div_sel;$/;"	n
aclk_div_sel	.\omsp_clock_module.v	/^   wire      aclk_div_sel =  ((divax_ss==2'b00) ?  1'b1          :$/;"	n
aclk_en	.\omsp_clock_module.v	/^  reg       aclk_en;$/;"	r
aclk_en	.\omsp_clock_module.v	/^output              aclk_en;          \/\/ ACLK enable$/;"	p
aclk_en	.\omsp_timerA.v	/^input               aclk_en;        \/\/ ACLK enable (from CPU)$/;"	p
aclk_en	.\omsp_watchdog.v	/^input               aclk_en;        \/\/ ACLK enable$/;"	p
aclk_en	.\openMSP430.v	/^output               aclk_en;                \/\/ FPGA ONLY: ACLK enable$/;"	p
aclk_en	.\openMSP430_fpga.v	/^wire               aclk_en;$/;"	n
aclk_en_nxt	.\omsp_clock_module.v	/^  wire      aclk_en_nxt =  lfxt_clk_en & ((bcsctl1[`DIVAx]==2'b00) ?  1'b1          :$/;"	n
aclr	.\altera_mf.v	/^    input                  aclr;$/;"	p
aclr	.\altera_mf.v	/^    input  aclr;                 \/\/ Asynchronous clear input$/;"	p
aclr	.\altera_mf.v	/^    input  aclr;$/;"	p
aclr	.\altera_mf.v	/^    input aclr;                     \/\/ Asynchronous clear port$/;"	p
aclr	.\altera_mf.v	/^    input aclr;                 \/\/ Default = 0$/;"	p
aclr	.\altera_mf.v	/^    input aclr;$/;"	p
aclr	.\altera_mf.v	/^    tri0                   aclr;$/;"	n
aclr	.\altera_mf.v	/^    tri0 aclr;$/;"	n
aclr	.\altera_mf.v	/^input aclr;$/;"	p
aclr	.\altera_mf.v	/^tri0 aclr; \/\/ default aclr to 0$/;"	n
aclr	.\altera_mf.v	/^tri0 aclr;$/;"	n
aclr0	.\altera_mf.v	/^    input  aclr0;$/;"	p
aclr0	.\altera_mf.v	/^    input aclr0;$/;"	p
aclr0	.\altera_mf.v	/^    tri0 aclr0;$/;"	n
aclr1	.\altera_mf.v	/^    input  aclr1;$/;"	p
aclr1	.\altera_mf.v	/^    input aclr1;$/;"	p
aclr1	.\altera_mf.v	/^    tri0 aclr1;$/;"	n
aclr2	.\altera_mf.v	/^    input aclr2;$/;"	p
aclr2	.\altera_mf.v	/^    tri0 aclr2;$/;"	n
aclr3	.\altera_mf.v	/^    input aclr3;$/;"	p
aclr3	.\altera_mf.v	/^    tri0 aclr3;$/;"	n
aclr_int	.\altera_mf.v	/^    tri0 aclr_int;$/;"	n
aclr_on_indata	.\altera_mf.v	/^    wire aclr_on_indata;$/;"	n
aclr_on_outdata	.\altera_mf.v	/^    wire aclr_on_outdata;$/;"	n
aclr_on_rdaddress	.\altera_mf.v	/^    wire aclr_on_rdaddress;$/;"	n
aclr_on_rdcontrol	.\altera_mf.v	/^    wire aclr_on_rdcontrol;$/;"	n
aclr_on_wraddress	.\altera_mf.v	/^    wire aclr_on_wraddress;$/;"	n
aclr_on_wrcontrol	.\altera_mf.v	/^    wire aclr_on_wrcontrol;$/;"	n
acq_clk	.\altera_mf.v	/^    input    acq_clk;$/;"	p
acq_data_in	.\altera_mf.v	/^    input    [SLD_DATA_BITS-1:0]    acq_data_in;$/;"	p
acq_data_out	.\altera_mf.v	/^    output    [SLD_DATA_BITS-1:0]    acq_data_out;$/;"	p
acq_storage_qualifier_in	.\altera_mf.v	/^    input    [SLD_STORAGE_QUALIFIER_BITS-1:0]    acq_storage_qualifier_in;$/;"	p
acq_trigger_in	.\altera_mf.v	/^    input    [SLD_TRIGGER_BITS-1:0]    acq_trigger_in;$/;"	p
acq_trigger_out	.\altera_mf.v	/^    output    [SLD_TRIGGER_BITS-1:0]    acq_trigger_out;$/;"	p
acs	.\acsunit.vhd	/^FUNCTION acs(	state0 : STD_LOGIC_VECTOR;--branch_metric0$/;"	f
acsunit	.\acsunit.vhd	/^ENTITY acsunit IS$/;"	e
active_clk_was_switched	.\altera_mf.v	/^    reg active_clk_was_switched;$/;"	r
active_clock	.\altera_mf.v	/^    reg active_clock;$/;"	r
activeclock	.\altera_mf.v	/^    output activeclock;$/;"	p
activeclock	.\altera_mf.v	/^output        activeclock;$/;"	p
activeclock_wire	.\altera_mf.v	/^wire activeclock_wire;$/;"	n
actual_clk_cycle	.\altera_mf.v	/^real actual_clk_cycle;$/;"	r
adce_continuous	.\altera_mf.v	/^  input                             adce_continuous,$/;"	p
adce_done	.\altera_mf.v	/^  input    [number_of_channels-1:0] adce_done,$/;"	p
add_bits	.\altera_mf.v	/^    task add_bits;$/;"	t
add_latency	.\altera_mf.v	/^    parameter add_latency = "YES";$/;"	c
add_ram_output_register	.\altera_mf.v	/^    parameter add_ram_output_register = "OFF";$/;"	c
add_reg_a_mult_wa	.\altera_mf.v	/^    reg [widthad_a + width_a - 1:0] add_reg_a_mult_wa;$/;"	r
add_reg_a_mult_wa_pl_wa	.\altera_mf.v	/^    reg [widthad_a + width_a - 1:0] add_reg_a_mult_wa_pl_wa;$/;"	r
add_reg_b_mult_wb	.\altera_mf.v	/^    reg [widthad_b + width_b -1:0] add_reg_b_mult_wb;$/;"	r
add_reg_b_mult_wb_pl_wb	.\altera_mf.v	/^    reg [widthad_b + width_b -1:0] add_reg_b_mult_wb_pl_wb;$/;"	r
add_sub	.\altera_mf.v	/^    input add_sub;              \/\/ Default = 1$/;"	p
add_sub_int	.\altera_mf.v	/^    tri1 add_sub_int;$/;"	n
add_usedw_msb_bit	.\altera_mf.v	/^    parameter add_usedw_msb_bit = "OFF";$/;"	c
add_width	.\altera_mf.v	/^    parameter add_width = 1;$/;"	c
adder	.\altera_mf.v	/^        input [32:0] adder;$/;"	p
adder1_reg	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] adder1_reg;$/;"	r
adder1_res_ext	.\altera_mf.v	/^    reg [accum_width + int_mult_diff_bit : 0] adder1_res_ext;$/;"	r
adder1_res_reg_0	.\altera_mf.v	/^    reg  [2*int_width_result - 1: 0] adder1_res_reg_0;$/;"	r
adder1_res_reg_1	.\altera_mf.v	/^    reg  [2*int_width_result - 1: 0] adder1_res_reg_1;$/;"	r
adder1_res_wire	.\altera_mf.v	/^    wire [2*int_width_result - 1: 0] adder1_res_wire;$/;"	n
adder1_result	.\altera_mf.v	/^    reg [int_width_result : 0] adder1_result;$/;"	r
adder1_round_out	.\altera_mf.v	/^    reg [int_width_result : 0] adder1_round_out;$/;"	r
adder1_rounding	.\altera_mf.v	/^    parameter adder1_rounding = "NO";$/;"	c
adder1_sum	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] adder1_sum;$/;"	r
adder1_systolic	.\altera_mf.v	/^    wire  [2*int_width_result - 1: 0] adder1_systolic;$/;"	n
adder1_systolic_register0	.\altera_mf.v	/^    wire  [2*int_width_result - 1: 0] adder1_systolic_register0;$/;"	n
adder1_systolic_register1	.\altera_mf.v	/^    wire  [2*int_width_result - 1: 0] adder1_systolic_register1;$/;"	n
adder2_result	.\altera_mf.v	/^    reg [int_width_result : 0] adder2_result;$/;"	r
adder3_reg	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] adder3_reg;$/;"	r
adder3_res_ext	.\altera_mf.v	/^    reg [2*int_width_result: 0] adder3_res_ext;$/;"	r
adder3_res_temp	.\altera_mf.v	/^    reg [accum_width + int_mult_diff_bit : 0] adder3_res_temp;$/;"	r
adder3_res_wire	.\altera_mf.v	/^    wire [2*int_width_result - 1: 0] adder3_res_wire;$/;"	n
adder3_result	.\altera_mf.v	/^    reg [int_width_result : 0] adder3_result;$/;"	r
adder3_round_out	.\altera_mf.v	/^    reg [int_width_result : 0] adder3_round_out;$/;"	r
adder3_rounding	.\altera_mf.v	/^    parameter adder3_rounding = "NO";$/;"	c
adder3_sum	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] adder3_sum;$/;"	r
addnsub	.\altera_mf.v	/^    input addnsub;$/;"	p
addnsub1	.\altera_mf.v	/^    input addnsub1;$/;"	p
addnsub1_round	.\altera_mf.v	/^    input addnsub1_round;$/;"	p
addnsub1_round_aclr	.\altera_mf.v	/^    parameter addnsub1_round_aclr                   = "ACLR3";$/;"	c
addnsub1_round_pipe_reg	.\altera_mf.v	/^    reg addnsub1_round_pipe_reg;$/;"	r
addnsub1_round_pipe_wire	.\altera_mf.v	/^    wire addnsub1_round_pipe_wire;$/;"	n
addnsub1_round_pipe_wire_clk	.\altera_mf.v	/^    wire addnsub1_round_pipe_wire_clk;$/;"	n
addnsub1_round_pipe_wire_clr	.\altera_mf.v	/^    tri0 addnsub1_round_pipe_wire_clr;$/;"	n
addnsub1_round_pipe_wire_en	.\altera_mf.v	/^    tri1 addnsub1_round_pipe_wire_en;$/;"	n
addnsub1_round_pipeline_aclr	.\altera_mf.v	/^    parameter addnsub1_round_pipeline_aclr          = "ACLR3";$/;"	c
addnsub1_round_pipeline_register	.\altera_mf.v	/^    parameter addnsub1_round_pipeline_register      = "CLOCK0";$/;"	c
addnsub1_round_pre	.\altera_mf.v	/^    wire addnsub1_round_pre;$/;"	n
addnsub1_round_reg	.\altera_mf.v	/^    reg addnsub1_round_reg;$/;"	r
addnsub1_round_register	.\altera_mf.v	/^    parameter addnsub1_round_register               = "CLOCK0";$/;"	c
addnsub1_round_wire	.\altera_mf.v	/^    wire addnsub1_round_wire;$/;"	n
addnsub1_round_wire_clk	.\altera_mf.v	/^    wire addnsub1_round_wire_clk;$/;"	n
addnsub1_round_wire_clr	.\altera_mf.v	/^    tri0 addnsub1_round_wire_clr;$/;"	n
addnsub1_round_wire_en	.\altera_mf.v	/^    tri1 addnsub1_round_wire_en;$/;"	n
addnsub1_z	.\altera_mf.v	/^    tri1 addnsub1_z;$/;"	n
addnsub3	.\altera_mf.v	/^    input addnsub3;$/;"	p
addnsub3_round	.\altera_mf.v	/^    input addnsub3_round;$/;"	p
addnsub3_round_aclr	.\altera_mf.v	/^    parameter addnsub3_round_aclr                   = "ACLR3";$/;"	c
addnsub3_round_pipe_reg	.\altera_mf.v	/^    reg addnsub3_round_pipe_reg;$/;"	r
addnsub3_round_pipe_wire	.\altera_mf.v	/^    wire addnsub3_round_pipe_wire;$/;"	n
addnsub3_round_pipe_wire_clk	.\altera_mf.v	/^    wire addnsub3_round_pipe_wire_clk;$/;"	n
addnsub3_round_pipe_wire_clr	.\altera_mf.v	/^    tri0 addnsub3_round_pipe_wire_clr;$/;"	n
addnsub3_round_pipe_wire_en	.\altera_mf.v	/^    tri1 addnsub3_round_pipe_wire_en;$/;"	n
addnsub3_round_pipeline_aclr	.\altera_mf.v	/^    parameter addnsub3_round_pipeline_aclr          = "ACLR3";$/;"	c
addnsub3_round_pipeline_register	.\altera_mf.v	/^    parameter addnsub3_round_pipeline_register      = "CLOCK0";$/;"	c
addnsub3_round_pre	.\altera_mf.v	/^    wire addnsub3_round_pre;$/;"	n
addnsub3_round_reg	.\altera_mf.v	/^    reg addnsub3_round_reg;$/;"	r
addnsub3_round_register	.\altera_mf.v	/^    parameter addnsub3_round_register               = "CLOCK0";$/;"	c
addnsub3_round_wire	.\altera_mf.v	/^    wire addnsub3_round_wire;$/;"	n
addnsub3_round_wire_clk	.\altera_mf.v	/^    wire addnsub3_round_wire_clk;$/;"	n
addnsub3_round_wire_clr	.\altera_mf.v	/^    tri0 addnsub3_round_wire_clr;$/;"	n
addnsub3_round_wire_en	.\altera_mf.v	/^    tri1 addnsub3_round_wire_en;$/;"	n
addnsub3_z	.\altera_mf.v	/^    tri1 addnsub3_z; $/;"	n
addnsub_aclr	.\altera_mf.v	/^    parameter addnsub_aclr              = "ACLR3";$/;"	c
addnsub_multiplier_aclr1	.\altera_mf.v	/^    parameter addnsub_multiplier_aclr1              = "ACLR3";$/;"	c
addnsub_multiplier_aclr3	.\altera_mf.v	/^    parameter addnsub_multiplier_aclr3              = "ACLR3";$/;"	c
addnsub_multiplier_pipeline_aclr1	.\altera_mf.v	/^    parameter addnsub_multiplier_pipeline_aclr1     = "ACLR3";$/;"	c
addnsub_multiplier_pipeline_aclr3	.\altera_mf.v	/^    parameter addnsub_multiplier_pipeline_aclr3     = "ACLR3";$/;"	c
addnsub_multiplier_pipeline_register1	.\altera_mf.v	/^    parameter addnsub_multiplier_pipeline_register1 = "CLOCK0";$/;"	c
addnsub_multiplier_pipeline_register3	.\altera_mf.v	/^    parameter addnsub_multiplier_pipeline_register3 = "CLOCK0";$/;"	c
addnsub_multiplier_register1	.\altera_mf.v	/^    parameter addnsub_multiplier_register1          = "CLOCK0";$/;"	c
addnsub_multiplier_register3	.\altera_mf.v	/^    parameter addnsub_multiplier_register3          = "CLOCK0";$/;"	c
addnsub_pipeline_aclr	.\altera_mf.v	/^    parameter addnsub_pipeline_aclr     = "ACLR3";$/;"	c
addnsub_pipeline_reg	.\altera_mf.v	/^    parameter addnsub_pipeline_reg      = "CLOCK0";$/;"	c
addnsub_reg	.\altera_mf.v	/^    parameter addnsub_reg               = "CLOCK0";$/;"	c
addr0_rd_set	.\omsp_dbg_hwbrk.v	/^wire      addr0_rd_set;$/;"	n
addr0_wr_set	.\omsp_dbg_hwbrk.v	/^wire      addr0_wr_set;$/;"	n
addr1_rd_set	.\omsp_dbg_hwbrk.v	/^wire      addr1_rd_set;$/;"	n
addr1_wr_set	.\omsp_dbg_hwbrk.v	/^wire      addr1_wr_set;$/;"	n
addr_width	.\altera_mf.v	/^    parameter    addr_width    =    20;$/;"	c
address	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
address	.\ram16x512.v	/^	input	[13:0]  address;$/;"	p
address	.\rom16x2048.v	/^	input	[13:0]  address;$/;"	p
address_a	.\altera_mf.v	/^    input  [widthad_a-1:0] address_a; \/\/ Port A address input$/;"	p
address_a	.\altera_mf.v	/^    input  [widthad_a-1:0] address_a;$/;"	p
address_aclr_a	.\altera_mf.v	/^    parameter address_aclr_a   = "NONE";$/;"	c
address_aclr_b	.\altera_mf.v	/^    parameter address_aclr_b            = "NONE";$/;"	c
address_b	.\altera_mf.v	/^    input  [widthad_b-1:0] address_b; \/\/ Port B address input$/;"	p
address_b	.\altera_mf.v	/^    input  [widthad_b-1:0] address_b;$/;"	p
address_radix	.\altera_mf.v	/^    reg [24 : 1] address_radix, data_radix;$/;"	r
address_radix_found	.\altera_mf.v	/^    reg address_radix_found;$/;"	r
address_reg_b	.\altera_mf.v	/^    parameter address_reg_b             = "CLOCK1";$/;"	c
addressstall_a	.\altera_mf.v	/^    input addressstall_a;$/;"	p
addressstall_a	.\altera_mf.v	/^    tri0 addressstall_a;$/;"	n
addressstall_b	.\altera_mf.v	/^    input addressstall_b;$/;"	p
addressstall_b	.\altera_mf.v	/^    tri0 addressstall_b;$/;"	n
addsub1_clr	.\altera_mf.v	/^    parameter addsub1_clr = ((port_addnsub1 == "PORT_USED") || ((port_addnsub1 == "PORT_CONNECTIVITY")&&(multiplier1_direction== "UNUSED")))? 1 : 0;$/;"	c
addsub1_int	.\altera_mf.v	/^    wire addsub1_int;$/;"	n
addsub1_pipe_reg	.\altera_mf.v	/^    reg addsub1_pipe_reg;$/;"	r
addsub1_pipe_wire	.\altera_mf.v	/^    wire addsub1_pipe_wire;$/;"	n
addsub1_pipe_wire_clk	.\altera_mf.v	/^    wire addsub1_pipe_wire_clk;$/;"	n
addsub1_pipe_wire_clr	.\altera_mf.v	/^    tri0 addsub1_pipe_wire_clr;$/;"	n
addsub1_pipe_wire_en	.\altera_mf.v	/^    tri1 addsub1_pipe_wire_en;$/;"	n
addsub1_reg	.\altera_mf.v	/^    reg addsub1_reg;$/;"	r
addsub1_reg_wire_clk	.\altera_mf.v	/^    wire addsub1_reg_wire_clk;$/;"	n
addsub1_reg_wire_clr	.\altera_mf.v	/^    tri0 addsub1_reg_wire_clr;$/;"	n
addsub1_reg_wire_en	.\altera_mf.v	/^    tri1 addsub1_reg_wire_en;$/;"	n
addsub1_wire	.\altera_mf.v	/^    wire addsub1_wire;$/;"	n
addsub3_clr	.\altera_mf.v	/^    parameter addsub3_clr = ((port_addnsub3 == "PORT_USED") || ((port_addnsub3 == "PORT_CONNECTIVITY")&&(multiplier3_direction== "UNUSED")))? 1 : 0;$/;"	c
addsub3_int	.\altera_mf.v	/^    wire addsub3_int;$/;"	n
addsub3_pipe_reg	.\altera_mf.v	/^    reg addsub3_pipe_reg;  $/;"	r
addsub3_pipe_wire	.\altera_mf.v	/^    wire addsub3_pipe_wire;$/;"	n
addsub3_pipe_wire_clk	.\altera_mf.v	/^    wire addsub3_pipe_wire_clk;$/;"	n
addsub3_pipe_wire_clr	.\altera_mf.v	/^    tri0 addsub3_pipe_wire_clr;$/;"	n
addsub3_pipe_wire_en	.\altera_mf.v	/^    tri1 addsub3_pipe_wire_en;$/;"	n
addsub3_reg	.\altera_mf.v	/^    reg addsub3_reg;$/;"	r
addsub3_reg_wire_clk	.\altera_mf.v	/^    wire addsub3_reg_wire_clk;$/;"	n
addsub3_reg_wire_clr	.\altera_mf.v	/^    tri0 addsub3_reg_wire_clr;$/;"	n
addsub3_reg_wire_en	.\altera_mf.v	/^    tri1 addsub3_reg_wire_en;$/;"	n
addsub3_wire	.\altera_mf.v	/^    wire addsub3_wire;$/;"	n
addsub_int	.\altera_mf.v	/^    wire addsub_int;$/;"	n
addsub_latent	.\altera_mf.v	/^    wire addsub_latent;$/;"	n
addsub_pipe_reg	.\altera_mf.v	/^    reg addsub_pipe_reg;$/;"	r
addsub_pipe_wire	.\altera_mf.v	/^    wire addsub_pipe_wire;$/;"	n
addsub_pipe_wire_clk	.\altera_mf.v	/^    wire addsub_pipe_wire_clk;$/;"	n
addsub_pipe_wire_clr	.\altera_mf.v	/^    tri0 addsub_pipe_wire_clr;$/;"	n
addsub_pipe_wire_en	.\altera_mf.v	/^    tri1 addsub_pipe_wire_en;$/;"	n
addsub_reg	.\altera_mf.v	/^    reg addsub_reg;$/;"	r
addsub_wire	.\altera_mf.v	/^    wire addsub_wire;$/;"	n
addsub_wire_clk	.\altera_mf.v	/^    wire addsub_wire_clk;$/;"	n
addsub_wire_clr	.\altera_mf.v	/^    tri0 addsub_wire_clr;$/;"	n
addsub_wire_en	.\altera_mf.v	/^    tri1 addsub_wire_en;$/;"	n
aligned_result	.\altera_mf.v	/^    wire [widthr-1:0] aligned_result;$/;"	n
all_0	.\altera_mf.v	/^        reg all_0;  \/\/temporary storage to indicate whether all the currently$/;"	r
all_channels	.\altera_mf.v	/^  input                             all_channels,$/;"	p
allow_rwcycle_when_full	.\altera_mf.v	/^    parameter allow_rwcycle_when_full = "OFF";$/;"	c
almost_empty	.\altera_mf.v	/^    output almost_empty;$/;"	p
almost_empty_flag	.\altera_mf.v	/^    reg almost_empty_flag;$/;"	r
almost_empty_value	.\altera_mf.v	/^    parameter almost_empty_value      = 0;$/;"	c
almost_full	.\altera_mf.v	/^    output almost_full;$/;"	p
almost_full_flag	.\altera_mf.v	/^    reg almost_full_flag;$/;"	r
almost_full_value	.\altera_mf.v	/^    parameter almost_full_value       = 0;$/;"	c
almostfull	.\altera_mf.v	/^    integer almostfull;$/;"	r
alpha_tolower	.\altera_mf.v	/^    function [8*`CYCIIIGL_PLL_WORD_LENGTH:1] alpha_tolower;$/;"	f
alpha_tolower	.\altera_mf.v	/^    function [8*`CYCIII_PLL_WORD_LENGTH:1] alpha_tolower;$/;"	f
alpha_tolower	.\altera_mf.v	/^    function [8*`STXIII_PLL_WORD_LENGTH:1] alpha_tolower;$/;"	f
alpha_tolower	.\altera_mf.v	/^    function [8*`STXII_PLL_WORD_LENGTH:1] alpha_tolower;$/;"	f
alpha_tolower	.\altera_mf.v	/^    function [8*`STX_PLL_WORD_LENGTH:1] alpha_tolower;$/;"	f
alpha_tolower	.\altera_mf.v	/^function [8*`STR_LENGTH:1] alpha_tolower;$/;"	f
alt3pram	.\altera_mf.v	/^module alt3pram (wren, data, wraddress, inclock, inclocken, $/;"	m
alt3pram	.\work\alt3pram\_primary.vhd	/^entity alt3pram is$/;"	e
alt_aeq_s4	.\altera_mf.v	/^module alt_aeq_s4$/;"	m
alt_aeq_s4	.\work\alt_aeq_s4\_primary.vhd	/^entity alt_aeq_s4 is$/;"	e
alt_cal	.\altera_mf.v	/^module  alt_cal$/;"	m
alt_cal	.\work\alt_cal\_primary.vhd	/^entity alt_cal is$/;"	e
alt_cal_av	.\altera_mf.v	/^module  alt_cal_av$/;"	m
alt_cal_av	.\work\alt_cal_av\_primary.vhd	/^entity alt_cal_av is$/;"	e
alt_cal_c3gxb	.\altera_mf.v	/^module  alt_cal_c3gxb$/;"	m
alt_cal_c3gxb	.\work\alt_cal_c3gxb\_primary.vhd	/^entity alt_cal_c3gxb is$/;"	e
alt_cal_mm	.\altera_mf.v	/^module  alt_cal_mm$/;"	m
alt_cal_mm	.\work\alt_cal_mm\_primary.vhd	/^entity alt_cal_mm is$/;"	e
alt_cal_sv	.\altera_mf.v	/^module  alt_cal_sv$/;"	m
alt_cal_sv	.\work\alt_cal_sv\_primary.vhd	/^entity alt_cal_sv is$/;"	e
alt_dfe	.\altera_mf.v	/^module alt_dfe $/;"	m
alt_dfe	.\work\alt_dfe\_primary.vhd	/^entity alt_dfe is$/;"	e
alt_eyemon	.\altera_mf.v	/^module alt_eyemon $/;"	m
alt_eyemon	.\work\alt_eyemon\_primary.vhd	/^entity alt_eyemon is$/;"	e
altaccumulate	.\altera_mf.v	/^module altaccumulate (cin, data, add_sub, clock, sload, clken, sign_data, aclr,$/;"	m
altaccumulate	.\work\altaccumulate\_primary.vhd	/^entity altaccumulate is$/;"	e
altclklock	.\altera_mf.v	/^module altclklock ($/;"	m
altclklock	.\work\altclklock\_primary.vhd	/^entity altclklock is$/;"	e
altddio_bidir	.\altera_mf.v	/^module altddio_bidir ($/;"	m
altddio_bidir	.\work\altddio_bidir\_primary.vhd	/^entity altddio_bidir is$/;"	e
altddio_in	.\altera_mf.v	/^module altddio_in ($/;"	m
altddio_in	.\work\altddio_in\_primary.vhd	/^entity altddio_in is$/;"	e
altddio_out	.\altera_mf.v	/^module altddio_out ($/;"	m
altddio_out	.\work\altddio_out\_primary.vhd	/^entity altddio_out is$/;"	e
altdpram	.\altera_mf.v	/^module altdpram (wren, data, wraddress, inclock, inclocken, rden, rdaddress,$/;"	m
altdpram	.\work\altdpram\_primary.vhd	/^entity altdpram is$/;"	e
altera_mult_add_block	.\altera_mf.v	/^	wire altera_mult_add_block;$/;"	n
altera_std_synchronizer	.\altera_mf.v	/^module altera_std_synchronizer ($/;"	m
altera_std_synchronizer	.\work\altera_std_synchronizer\_primary.vhd	/^entity altera_std_synchronizer is$/;"	e
altera_std_synchronizer_bundle	.\altera_mf.v	/^module altera_std_synchronizer_bundle  ($/;"	m
altera_std_synchronizer_bundle	.\work\altera_std_synchronizer_bundle\_primary.vhd	/^entity altera_std_synchronizer_bundle is$/;"	e
altera_syncram_derived	.\altera_mf.v	/^module altera_syncram_derived   ($/;"	m
altera_syncram_derived	.\work\altera_syncram_derived\_primary.vhd	/^entity altera_syncram_derived is$/;"	e
altfp_mult	.\altera_mf.v	/^module altfp_mult ($/;"	m
altfp_mult	.\work\altfp_mult\_primary.vhd	/^entity altfp_mult is$/;"	e
altlvds_rx	.\altera_mf.v	/^module altlvds_rx ($/;"	m
altlvds_rx	.\work\altlvds_rx\_primary.vhd	/^entity altlvds_rx is$/;"	e
altlvds_tx	.\altera_mf.v	/^module altlvds_tx ($/;"	m
altlvds_tx	.\work\altlvds_tx\_primary.vhd	/^entity altlvds_tx is$/;"	e
altmult_accum	.\altera_mf.v	/^module altmult_accum (  dataa, $/;"	m
altmult_accum	.\work\altmult_accum\_primary.vhd	/^entity altmult_accum is$/;"	e
altmult_add	.\altera_mf.v	/^module altmult_add (    dataa, $/;"	m
altmult_add	.\work\altmult_add\_primary.vhd	/^entity altmult_add is$/;"	e
altparallel_flash_loader	.\altera_mf.v	/^module    altparallel_flash_loader    ($/;"	m
altparallel_flash_loader	.\work\altparallel_flash_loader\_primary.vhd	/^entity altparallel_flash_loader is$/;"	e
altpll	.\altera_mf.v	/^module altpll ($/;"	m
altpll	.\work\altpll\_primary.vhd	/^entity altpll is$/;"	e
altserial_flash_loader	.\altera_mf.v	/^module    altserial_flash_loader    ($/;"	m
altserial_flash_loader	.\work\altserial_flash_loader\_primary.vhd	/^entity altserial_flash_loader is$/;"	e
altshift_taps	.\altera_mf.v	/^module altshift_taps (shiftin, clock, clken, aclr, shiftout, taps);$/;"	m
altshift_taps	.\work\altshift_taps\_primary.vhd	/^entity altshift_taps is$/;"	e
altsource_probe	.\altera_mf.v	/^module    altsource_probe    ($/;"	m
altsource_probe	.\work\altsource_probe\_primary.vhd	/^entity altsource_probe is$/;"	e
altsqrt	.\altera_mf.v	/^module altsqrt ($/;"	m
altsqrt	.\work\altsqrt\_primary.vhd	/^entity altsqrt is$/;"	e
altsquare	.\altera_mf.v	/^module altsquare ($/;"	m
altsquare	.\work\altsquare\_primary.vhd	/^entity altsquare is$/;"	e
altstratixii_oct	.\altera_mf.v	/^module    altstratixii_oct    ($/;"	m
altstratixii_oct	.\work\altstratixii_oct\_primary.vhd	/^entity altstratixii_oct is$/;"	e
altsyncram	.\altera_mf.v	/^module altsyncram   ($/;"	m
altsyncram	.\work\altsyncram\_primary.vhd	/^entity altsyncram is$/;"	e
altsyncram_body	.\altera_mf.v	/^module altsyncram_body   ($/;"	m
altsyncram_body	.\work\altsyncram_body\_primary.vhd	/^entity altsyncram_body is$/;"	e
alu_add	.\omsp_alu.v	/^wire [16:0] alu_add        = op_src_in_jmp + op_dst_in;$/;"	n
alu_add	.\omsp_frontend.v	/^                             alu_add,$/;"	n
alu_add	.\omsp_frontend.v	/^wire        alu_add       = inst_to_nxt[`ADD]  | inst_to_nxt[`ADDC]       |$/;"	n
alu_add_inc	.\omsp_alu.v	/^wire [16:0] alu_add_inc    = alu_add + {16'h0000, alu_inc};$/;"	n
alu_and	.\omsp_alu.v	/^wire [16:0] alu_and        = op_src_in     & op_dst_in;$/;"	n
alu_and	.\omsp_frontend.v	/^                             alu_and,$/;"	n
alu_and	.\omsp_frontend.v	/^wire        alu_and       = inst_to_nxt[`AND]  | inst_to_nxt[`BIC]  |$/;"	n
alu_dadd	.\omsp_alu.v	/^wire [16:0] alu_dadd       = {alu_dadd3, alu_dadd2[3:0], alu_dadd1[3:0], alu_dadd0[3:0]};$/;"	n
alu_dadd	.\omsp_frontend.v	/^                             alu_dadd,$/;"	n
alu_dadd	.\omsp_frontend.v	/^wire        alu_dadd      = inst_to_nxt[`DADD];$/;"	n
alu_dadd0	.\omsp_alu.v	/^wire  [4:0] alu_dadd0      = bcd_add(op_src_in[3:0],   op_dst_in[3:0],  status[0]);$/;"	n
alu_dadd0	.\omsp_alu.v	/^wire  [4:0] alu_dadd1      = bcd_add(op_src_in[7:4],   op_dst_in[7:4],  alu_dadd0[4]);$/;"	n
alu_dadd0	.\omsp_alu.v	/^wire [16:0] alu_dadd       = {alu_dadd3, alu_dadd2[3:0], alu_dadd1[3:0], alu_dadd0[3:0]};$/;"	n
alu_dadd1	.\omsp_alu.v	/^wire  [4:0] alu_dadd1      = bcd_add(op_src_in[7:4],   op_dst_in[7:4],  alu_dadd0[4]);$/;"	n
alu_dadd1	.\omsp_alu.v	/^wire  [4:0] alu_dadd2      = bcd_add(op_src_in[11:8],  op_dst_in[11:8], alu_dadd1[4]);$/;"	n
alu_dadd1	.\omsp_alu.v	/^wire [16:0] alu_dadd       = {alu_dadd3, alu_dadd2[3:0], alu_dadd1[3:0], alu_dadd0[3:0]};$/;"	n
alu_dadd2	.\omsp_alu.v	/^wire  [4:0] alu_dadd2      = bcd_add(op_src_in[11:8],  op_dst_in[11:8], alu_dadd1[4]);$/;"	n
alu_dadd2	.\omsp_alu.v	/^wire  [4:0] alu_dadd3      = bcd_add(op_src_in[15:12], op_dst_in[15:12],alu_dadd2[4]);$/;"	n
alu_dadd2	.\omsp_alu.v	/^wire [16:0] alu_dadd       = {alu_dadd3, alu_dadd2[3:0], alu_dadd1[3:0], alu_dadd0[3:0]};$/;"	n
alu_dadd3	.\omsp_alu.v	/^wire  [4:0] alu_dadd3      = bcd_add(op_src_in[15:12], op_dst_in[15:12],alu_dadd2[4]);$/;"	n
alu_inc	.\omsp_alu.v	/^wire        alu_inc         = exec_cycle & ((inst_alu[`ALU_INC_C] & status[0]) |$/;"	n
alu_inc	.\omsp_alu.v	/^wire [16:0] alu_add_inc    = alu_add + {16'h0000, alu_inc};$/;"	n
alu_inc	.\omsp_frontend.v	/^                             alu_inc,$/;"	n
alu_inc	.\omsp_frontend.v	/^wire        alu_inc       = inst_to_nxt[`SUB]  | inst_to_nxt[`CMP];$/;"	n
alu_inc_c	.\omsp_frontend.v	/^                             alu_inc_c,$/;"	n
alu_inc_c	.\omsp_frontend.v	/^wire        alu_inc_c     = inst_to_nxt[`ADDC] | inst_to_nxt[`DADD] |$/;"	n
alu_or	.\omsp_alu.v	/^wire [16:0] alu_or         = op_src_in     | op_dst_in;$/;"	n
alu_or	.\omsp_frontend.v	/^                             alu_or,$/;"	n
alu_or	.\omsp_frontend.v	/^wire        alu_or        = inst_to_nxt[`BIS];$/;"	n
alu_out	.\omsp_alu.v	/^output       [15:0] alu_out;       \/\/ ALU output value$/;"	p
alu_out	.\omsp_execution_unit.v	/^wire         [15:0] alu_out;$/;"	n
alu_out_add	.\omsp_alu.v	/^output       [15:0] alu_out_add;   \/\/ ALU adder output value$/;"	p
alu_out_add	.\omsp_execution_unit.v	/^wire         [15:0] alu_out_add;$/;"	n
alu_out_nxt	.\omsp_alu.v	/^wire [16:0] alu_out_nxt    = (inst_so[`IRQ] | dbg_halt_st |$/;"	n
alu_shift	.\omsp_alu.v	/^wire [16:0] alu_shift      = {1'b0, alu_shift_msb, op_src[15:9], alu_shift_7, op_src[7:1]};$/;"	n
alu_shift	.\omsp_frontend.v	/^                             alu_shift,$/;"	n
alu_shift	.\omsp_frontend.v	/^wire        alu_shift     = inst_so_nxt[`RRC]  | inst_so_nxt[`RRA];$/;"	n
alu_shift_7	.\omsp_alu.v	/^wire        alu_shift_7    = inst_bw       ? alu_shift_msb : op_src[8];$/;"	n
alu_shift_7	.\omsp_alu.v	/^wire [16:0] alu_shift      = {1'b0, alu_shift_msb, op_src[15:9], alu_shift_7, op_src[7:1]};$/;"	n
alu_shift_msb	.\omsp_alu.v	/^wire        alu_shift_msb  = inst_so[`RRC] ? status[0]     :$/;"	n
alu_shift_msb	.\omsp_alu.v	/^wire [16:0] alu_shift      = {1'b0, alu_shift_msb, op_src[15:9], alu_shift_7, op_src[7:1]};$/;"	n
alu_short	.\omsp_alu.v	/^wire [16:0] alu_short      = ({17{inst_alu[`ALU_AND]}}   & alu_and)   |$/;"	n
alu_short_thro	.\omsp_alu.v	/^wire        alu_short_thro = ~(inst_alu[`ALU_AND]   |$/;"	n
alu_src_inv	.\omsp_frontend.v	/^                             alu_src_inv};$/;"	n
alu_src_inv	.\omsp_frontend.v	/^wire        alu_src_inv   = inst_to_nxt[`SUB]  | inst_to_nxt[`SUBC] |$/;"	n
alu_stat	.\omsp_alu.v	/^output        [3:0] alu_stat;      \/\/ ALU Status {V,N,Z,C}$/;"	p
alu_stat	.\omsp_execution_unit.v	/^wire          [3:0] alu_stat;$/;"	n
alu_stat	.\omsp_register_file.v	/^input         [3:0] alu_stat;     \/\/ ALU Status {V,N,Z,C}$/;"	p
alu_stat_7	.\omsp_frontend.v	/^                             alu_stat_7,$/;"	n
alu_stat_7	.\omsp_frontend.v	/^wire        alu_stat_7    = inst_to_nxt[`BIT]  | inst_to_nxt[`AND]  |$/;"	n
alu_stat_f	.\omsp_frontend.v	/^                             alu_stat_f,$/;"	n
alu_stat_f	.\omsp_frontend.v	/^wire        alu_stat_f    = inst_to_nxt[`ADD]  | inst_to_nxt[`ADDC] |$/;"	n
alu_stat_wr	.\omsp_alu.v	/^output        [3:0] alu_stat_wr;   \/\/ ALU Status write {V,N,Z,C}$/;"	p
alu_stat_wr	.\omsp_execution_unit.v	/^wire          [3:0] alu_stat_wr;$/;"	n
alu_stat_wr	.\omsp_register_file.v	/^input         [3:0] alu_stat_wr;  \/\/ ALU Status write {V,N,Z,C}$/;"	p
alu_swpb	.\omsp_alu.v	/^wire [16:0] alu_swpb       = {1'b0, op_src[7:0],op_src[15:8]};$/;"	n
alu_sxt	.\omsp_alu.v	/^wire [16:0] alu_sxt        = {1'b0, {8{op_src[7]}},op_src[7:0]};$/;"	n
alu_xor	.\omsp_alu.v	/^wire [16:0] alu_xor        = op_src_in     ^ op_dst_in;$/;"	n
alu_xor	.\omsp_frontend.v	/^                             alu_xor,$/;"	n
alu_xor	.\omsp_frontend.v	/^wire        alu_xor       = inst_to_nxt[`XOR];$/;"	n
and_sign_wire	.\altera_mf.v	/^    reg and_sign_wire;$/;"	r
areset	.\altera_mf.v	/^    input areset;$/;"	p
areset	.\altera_mf.v	/^input       areset;$/;"	p
areset_ipd	.\altera_mf.v	/^    wire areset_ipd;$/;"	n
areset_ipd_last_value	.\altera_mf.v	/^    reg areset_ipd_last_value;$/;"	r
areset_last_value	.\altera_mf.v	/^    reg areset_last_value;$/;"	r
areset_pulldown	.\altera_mf.v	/^tri0 areset_pulldown;$/;"	n
arm_m_cntr	.\altera_mf.v	/^module arm_m_cntr   ( clk,$/;"	m
arm_m_cntr	.\work\arm_m_cntr\_primary.vhd	/^entity arm_m_cntr is$/;"	e
arm_n_cntr	.\altera_mf.v	/^module arm_n_cntr   ( clk,$/;"	m
arm_n_cntr	.\work\arm_n_cntr\_primary.vhd	/^entity arm_n_cntr is$/;"	e
arm_scale_cntr	.\altera_mf.v	/^module arm_scale_cntr   ( clk,$/;"	m
arm_scale_cntr	.\work\arm_scale_cntr\_primary.vhd	/^entity arm_scale_cntr is$/;"	e
aset	.\altera_mf.v	/^input aset;$/;"	p
aset	.\altera_mf.v	/^tri0 aset; \/\/ default aset to 0$/;"	n
aset	.\altera_mf.v	/^tri0 aset;$/;"	n
asmi_access_granted	.\altera_mf.v	/^    input    asmi_access_granted;$/;"	p
asmi_access_request	.\altera_mf.v	/^    output    asmi_access_request;$/;"	p
auto_restart	.\altera_mf.v	/^    parameter    auto_restart    =    "OFF";$/;"	c
auto_settings	.\altera_mf.v	/^parameter auto_settings = "true";$/;"	c
avmm_master_addr_width	.\altera_mf.v	/^  parameter avmm_master_addr_width = 16,$/;"	c
avmm_master_wdata_width	.\altera_mf.v	/^  parameter avmm_master_wdata_width = 16,$/;"	c
avmm_slave_rdata_width	.\altera_mf.v	/^  parameter avmm_slave_rdata_width = 16,$/;"	c
b	.\omsp_and_gate.v	/^input          b;              \/\/ AND gate input B$/;"	p
bandwidth	.\altera_mf.v	/^    parameter bandwidth                            = 0;$/;"	c
bandwidth	.\altera_mf.v	/^    parameter bandwidth = 0;$/;"	c
bandwidth	.\altera_mf.v	/^parameter   bandwidth                 = 0;$/;"	c
bandwidth_type	.\altera_mf.v	/^    parameter bandwidth_type                       = "auto";$/;"	c
bandwidth_type	.\altera_mf.v	/^    parameter bandwidth_type = "auto";$/;"	c
bandwidth_type	.\altera_mf.v	/^parameter   bandwidth_type            = "UNUSED";$/;"	c
base_number	.\altera_mf.v	/^        input base_number;$/;"	p
base_number	.\altera_mf.v	/^        integer base_number;$/;"	r
bcd_add	.\omsp_alu.v	/^function [4:0] bcd_add;$/;"	f
bcsctl1	.\omsp_clock_module.v	/^reg  [7:0] bcsctl1;$/;"	r
bcsctl1_nxt	.\omsp_clock_module.v	/^wire [7:0] bcsctl1_nxt = BCSCTL1[0] ? per_din[15:8]      : per_din[7:0];$/;"	n
bcsctl1_rd	.\omsp_clock_module.v	/^wire [15:0] bcsctl1_rd   = {8'h00, (bcsctl1  & {8{reg_rd[BCSCTL1]}})}  << (8 & {4{BCSCTL1[0]}});$/;"	n
bcsctl1_wr	.\omsp_clock_module.v	/^wire       bcsctl1_wr  = BCSCTL1[0] ? reg_hi_wr[BCSCTL1] : reg_lo_wr[BCSCTL1];$/;"	n
bcsctl2	.\omsp_clock_module.v	/^reg  [7:0] bcsctl2;$/;"	r
bcsctl2_nxt	.\omsp_clock_module.v	/^wire [7:0] bcsctl2_nxt   = BCSCTL2[0] ? per_din[15:8]      : per_din[7:0];$/;"	n
bcsctl2_rd	.\omsp_clock_module.v	/^wire [15:0] bcsctl2_rd   = {8'h00, (bcsctl2  & {8{reg_rd[BCSCTL2]}})}  << (8 & {4{BCSCTL2[0]}});$/;"	n
bcsctl2_wr	.\omsp_clock_module.v	/^wire       bcsctl2_wr    = BCSCTL2[0] ? reg_hi_wr[BCSCTL2] : reg_lo_wr[BCSCTL2];$/;"	n
best_result_width	.\altera_mf.v	/^    integer best_result_width;$/;"	r
binary	.\omsp_frontend.v	/^   input  [2:0] binary;$/;"	p
binary	.\omsp_frontend.v	/^   input  [3:0] binary;$/;"	p
binary	.\omsp_frontend.v	/^   input  [5:0] binary;$/;"	p
bit_all_0	.\altera_mf.v	/^    function bit_all_0;$/;"	f
bit_cnt_max	.\omsp_dbg_uart.v	/^wire [`DBG_UART_XFER_CNT_W-1:0] bit_cnt_max = `DBG_UART_CNT;$/;"	n
bit_cnt_max	.\omsp_dbg_uart.v	/^wire [`DBG_UART_XFER_CNT_W-1:0] bit_cnt_max = sync_cnt[`DBG_UART_XFER_CNT_W+2:3];$/;"	n
bit_position	.\altera_mf.v	/^    parameter bit_position = accum_width - lsb_position - extra_sign_bit_width - 1;$/;"	c
bits_to_round	.\altera_mf.v	/^    parameter bits_to_round = (((multiplier_rounding == "NO") && (accumulator_rounding == "NO"))? 0 : int_width_a + int_width_b - 18);$/;"	c
bitslip_count	.\altera_mf.v	/^    reg [3 : 0] bitslip_count [number_of_channels -1 : 0];$/;"	r
bitslip_count	.\altera_mf.v	/^    reg [3 : 0] bitslip_count;$/;"	r
bitslip_count	.\altera_mf.v	/^    reg[4:0] bitslip_count [number_of_channels -1 :0];$/;"	r
bitslip_count_pre	.\altera_mf.v	/^    reg [3 : 0] bitslip_count_pre [number_of_channels -1 : 0];$/;"	r
bitslip_count_reg	.\altera_mf.v	/^    integer bitslip_count_reg [number_of_channels -1: 0];$/;"	r
bitslip_mux_out	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] bitslip_mux_out;$/;"	r
bitslip_mux_out	.\altera_mf.v	/^    reg bitslip_mux_out;$/;"	r
borrow	.\altera_mf.v	/^    reg borrow;$/;"	r
bps_start	.\uart_rx.v	/^output bps_start;$/;"	p
bps_start	.\uart_speed_select.v	/^input bps_start;    \/\/接收到数据后，波特率时钟启动信号置位$/;"	p
bps_start	.\uart_tx.v	/^output bps_start;$/;"	p
bps_start1	.\uart_top.v	/^wire                bps_start1;$/;"	n
bps_start2	.\uart_top.v	/^wire                bps_start2;$/;"	n
bps_start_r	.\uart_rx.v	/^reg bps_start_r;$/;"	r
bps_start_r	.\uart_tx.v	/^reg bps_start_r;$/;"	r
brk0_dout	.\omsp_dbg.v	/^wire [15:0] brk0_dout;$/;"	n
brk0_halt	.\omsp_dbg.v	/^wire        brk0_halt;$/;"	n
brk0_pnd	.\omsp_dbg.v	/^wire        brk0_pnd;$/;"	n
brk0_pnd	.\omsp_dbg.v	/^wire  [7:0] cpu_stat_full = {brk3_pnd, brk2_pnd, brk1_pnd, brk0_pnd,$/;"	n
brk0_reg_rd	.\omsp_dbg.v	/^wire [3:0] brk0_reg_rd = {reg_rd[BRK0_ADDR1],$/;"	n
brk0_reg_wr	.\omsp_dbg.v	/^wire [3:0] brk0_reg_wr = {reg_wr[BRK0_ADDR1],$/;"	n
brk1_dout	.\omsp_dbg.v	/^wire [15:0] brk1_dout;$/;"	n
brk1_halt	.\omsp_dbg.v	/^wire        brk1_halt;$/;"	n
brk1_pnd	.\omsp_dbg.v	/^wire        brk1_pnd;$/;"	n
brk1_pnd	.\omsp_dbg.v	/^wire  [7:0] cpu_stat_full = {brk3_pnd, brk2_pnd, brk1_pnd, brk0_pnd,$/;"	n
brk1_reg_rd	.\omsp_dbg.v	/^wire [3:0] brk1_reg_rd = {reg_rd[BRK1_ADDR1],$/;"	n
brk1_reg_wr	.\omsp_dbg.v	/^wire [3:0] brk1_reg_wr = {reg_wr[BRK1_ADDR1],$/;"	n
brk2_dout	.\omsp_dbg.v	/^wire [15:0] brk2_dout;$/;"	n
brk2_halt	.\omsp_dbg.v	/^wire        brk2_halt;$/;"	n
brk2_pnd	.\omsp_dbg.v	/^wire        brk2_pnd;$/;"	n
brk2_pnd	.\omsp_dbg.v	/^wire  [7:0] cpu_stat_full = {brk3_pnd, brk2_pnd, brk1_pnd, brk0_pnd,$/;"	n
brk2_reg_rd	.\omsp_dbg.v	/^wire [3:0] brk2_reg_rd = {reg_rd[BRK2_ADDR1],$/;"	n
brk2_reg_wr	.\omsp_dbg.v	/^wire [3:0] brk2_reg_wr = {reg_wr[BRK2_ADDR1],$/;"	n
brk3_dout	.\omsp_dbg.v	/^wire [15:0] brk3_dout;$/;"	n
brk3_halt	.\omsp_dbg.v	/^wire        brk3_halt;$/;"	n
brk3_pnd	.\omsp_dbg.v	/^wire        brk3_pnd;$/;"	n
brk3_reg_rd	.\omsp_dbg.v	/^wire [3:0] brk3_reg_rd = {reg_rd[BRK3_ADDR1],$/;"	n
brk3_reg_wr	.\omsp_dbg.v	/^wire [3:0] brk3_reg_wr = {reg_wr[BRK3_ADDR1],$/;"	n
brk_addr0	.\omsp_dbg_hwbrk.v	/^reg  [15:0] brk_addr0;$/;"	r
brk_addr0_rd	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_addr0_rd = brk_addr0              & {16{brk_reg_rd[BRK_ADDR0]}};$/;"	n
brk_addr0_wr	.\omsp_dbg_hwbrk.v	/^wire        brk_addr0_wr = brk_reg_wr[BRK_ADDR0];$/;"	n
brk_addr1	.\omsp_dbg_hwbrk.v	/^reg  [15:0] brk_addr1;$/;"	r
brk_addr1_rd	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_addr1_rd = brk_addr1              & {16{brk_reg_rd[BRK_ADDR1]}};$/;"	n
brk_addr1_wr	.\omsp_dbg_hwbrk.v	/^wire        brk_addr1_wr = brk_reg_wr[BRK_ADDR1];$/;"	n
brk_ctl	.\omsp_dbg_hwbrk.v	/^reg   [4:0] brk_ctl;$/;"	r
brk_ctl	.\omsp_dbg_hwbrk.v	/^wire  [7:0] brk_ctl_full = {3'b000, brk_ctl};$/;"	n
brk_ctl_full	.\omsp_dbg_hwbrk.v	/^wire  [7:0] brk_ctl_full = {3'b000, brk_ctl};$/;"	n
brk_ctl_full	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_ctl_rd   = {8'h00, brk_ctl_full}  & {16{brk_reg_rd[BRK_CTL]}};$/;"	n
brk_ctl_rd	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_ctl_rd   = {8'h00, brk_ctl_full}  & {16{brk_reg_rd[BRK_CTL]}};$/;"	n
brk_ctl_wr	.\omsp_dbg_hwbrk.v	/^wire        brk_ctl_wr = brk_reg_wr[BRK_CTL];$/;"	n
brk_dout	.\omsp_dbg_hwbrk.v	/^output  [15:0] brk_dout;     \/\/ Hardware break\/watch-point register data input$/;"	p
brk_dout	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_dout = brk_ctl_rd   |$/;"	n
brk_halt	.\omsp_dbg_hwbrk.v	/^output         brk_halt;     \/\/ Hardware breakpoint command$/;"	p
brk_pnd	.\omsp_dbg_hwbrk.v	/^output         brk_pnd;      \/\/ Hardware break\/watch-point pending$/;"	p
brk_pnd	.\omsp_dbg_hwbrk.v	/^wire        brk_pnd       = |brk_stat;$/;"	n
brk_reg_rd	.\omsp_dbg_hwbrk.v	/^input    [3:0] brk_reg_rd;   \/\/ Hardware break\/watch-point register read select$/;"	p
brk_reg_wr	.\omsp_dbg_hwbrk.v	/^input    [3:0] brk_reg_wr;   \/\/ Hardware break\/watch-point register write select$/;"	p
brk_stat	.\omsp_dbg_hwbrk.v	/^reg   [5:0] brk_stat;$/;"	r
brk_stat	.\omsp_dbg_hwbrk.v	/^wire  [7:0] brk_stat_full = {2'b00, brk_stat};$/;"	n
brk_stat_clr	.\omsp_dbg_hwbrk.v	/^wire  [5:0] brk_stat_clr = ~dbg_din[5:0];$/;"	n
brk_stat_full	.\omsp_dbg_hwbrk.v	/^wire  [7:0] brk_stat_full = {2'b00, brk_stat};$/;"	n
brk_stat_full	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_stat_rd  = {8'h00, brk_stat_full} & {16{brk_reg_rd[BRK_STAT]}};$/;"	n
brk_stat_rd	.\omsp_dbg_hwbrk.v	/^wire [15:0] brk_stat_rd  = {8'h00, brk_stat_full} & {16{brk_reg_rd[BRK_STAT]}};$/;"	n
brk_stat_set	.\omsp_dbg_hwbrk.v	/^wire  [5:0] brk_stat_set = {range_wr_set & `HWBRK_RANGE,$/;"	n
brk_stat_wr	.\omsp_dbg_hwbrk.v	/^wire        brk_stat_wr  = brk_reg_wr[BRK_STAT];$/;"	n
buffer	.\altera_mf.v	/^    reg [`MAX_NAME_SZ*8 : 1] buffer;$/;"	r
buffer_implementation	.\altera_mf.v	/^    parameter buffer_implementation = "RAM";$/;"	c
burst_mode	.\altera_mf.v	/^    parameter    burst_mode    =    0;$/;"	c
burst_mode_intel	.\altera_mf.v	/^    parameter    burst_mode_intel    =    0;$/;"	c
burst_mode_numonyx	.\altera_mf.v	/^    parameter    burst_mode_numonyx    =    0;$/;"	c
burst_mode_spansion	.\altera_mf.v	/^    parameter    burst_mode_spansion    =    0;$/;"	c
busy	.\altera_mf.v	/^        output   busy;$/;"	p
busy_counter	.\altera_mf.v	/^  reg [5:0] busy_counter;$/;"	r
busy_counter	.\altera_mf.v	/^  reg [7:0] busy_counter; \/\/ 256 cycles$/;"	r
busy_sim	.\altera_mf.v	/^        wire  [0:0]  busy_sim;$/;"	n
bypass_serializer	.\altera_mf.v	/^    parameter bypass_serializer = "FALSE";$/;"	c
byte_count	.\altera_mf.v	/^    integer byte_count;$/;"	r
byte_count	.\altera_mf.v	/^integer byte_count;$/;"	r
byte_size	.\altera_mf.v	/^    parameter byte_size                          = 0;$/;"	c
byte_size	.\altera_mf.v	/^    parameter byte_size = 0;$/;"	c
byteena	.\altera_mf.v	/^    input  [i_width_byteena-1:0] byteena; \/\/ Byteena mask input$/;"	p
byteena	.\ram16x512.v	/^	input	[1:0]  byteena;$/;"	p
byteena	.\ram16x512.v	/^	tri1	[1:0]  byteena;$/;"	n
byteena_a	.\altera_mf.v	/^    input [width_byteena_a-1:0] byteena_a; \/\/ Port A byte enable input$/;"	p
byteena_a	.\altera_mf.v	/^    input [width_byteena_a-1:0] byteena_a;$/;"	p
byteena_a	.\altera_mf.v	/^    tri1 [width_byteena_a-1:0] byteena_a;$/;"	n
byteena_aclr_a	.\altera_mf.v	/^    parameter byteena_aclr_a   = "NONE";$/;"	c
byteena_aclr_b	.\altera_mf.v	/^    parameter byteena_aclr_b            = "NONE";$/;"	c
byteena_b	.\altera_mf.v	/^    input [width_byteena_b-1:0] byteena_b; \/\/ Port B byte enable input$/;"	p
byteena_b	.\altera_mf.v	/^    input [width_byteena_b-1:0] byteena_b;$/;"	p
byteena_b	.\altera_mf.v	/^    tri1 [width_byteena_b-1:0] byteena_b;$/;"	n
byteena_reg_b	.\altera_mf.v	/^    parameter byteena_reg_b             = "CLOCK1";$/;"	c
byteena_tmp	.\altera_mf.v	/^    wire [width-1:0] byteena_tmp;$/;"	n
c	.\altera_mf.v	/^    reg [8 : 1] c;$/;"	r
c	.\altera_mf.v	/^    reg [8:1] c;$/;"	r
c0_clk	.\altera_mf.v	/^    wire c0_clk;$/;"	n
c0_count	.\altera_mf.v	/^    integer c0_count;$/;"	r
c0_got_first_rising_edge	.\altera_mf.v	/^    reg c0_got_first_rising_edge;$/;"	r
c0_high	.\altera_mf.v	/^    parameter c0_high = 1;$/;"	c
c0_high	.\altera_mf.v	/^parameter   c0_high             = 1;$/;"	c
c0_initial	.\altera_mf.v	/^    parameter c0_initial = 1;$/;"	c
c0_initial	.\altera_mf.v	/^parameter   c0_initial          = 1;$/;"	c
c0_initial_count	.\altera_mf.v	/^    integer c0_initial_count;$/;"	r
c0_low	.\altera_mf.v	/^    parameter c0_low = 1;$/;"	c
c0_low	.\altera_mf.v	/^parameter   c0_low              = 1;$/;"	c
c0_mode	.\altera_mf.v	/^    parameter c0_mode = "bypass";$/;"	c
c0_mode	.\altera_mf.v	/^parameter   c0_mode             = "bypass";$/;"	c
c0_ph	.\altera_mf.v	/^    parameter c0_ph = 0;$/;"	c
c0_ph	.\altera_mf.v	/^parameter   c0_ph               = 0;$/;"	c
c0_rising_edge_transfer_done	.\altera_mf.v	/^    reg c0_rising_edge_transfer_done;$/;"	r
c0_test_source	.\altera_mf.v	/^    parameter c0_test_source = -1;$/;"	c
c0_test_source	.\altera_mf.v	/^    parameter c0_test_source = 5;$/;"	c
c0_test_source	.\altera_mf.v	/^parameter   c0_test_source      = 5;$/;"	c
c0_tmp	.\altera_mf.v	/^    reg c0_tmp;$/;"	r
c1_clk	.\altera_mf.v	/^    wire c1_clk;$/;"	n
c1_count	.\altera_mf.v	/^    integer c1_count;$/;"	r
c1_got_first_rising_edge	.\altera_mf.v	/^    reg c1_got_first_rising_edge;$/;"	r
c1_high	.\altera_mf.v	/^    parameter c1_high = 1;$/;"	c
c1_high	.\altera_mf.v	/^parameter   c1_high             = 1;$/;"	c
c1_initial	.\altera_mf.v	/^    parameter c1_initial = 1;$/;"	c
c1_initial	.\altera_mf.v	/^parameter   c1_initial          = 1;$/;"	c
c1_initial_count	.\altera_mf.v	/^    integer c1_initial_count;$/;"	r
c1_low	.\altera_mf.v	/^    parameter c1_low = 1;$/;"	c
c1_low	.\altera_mf.v	/^parameter   c1_low              = 1;$/;"	c
c1_mode	.\altera_mf.v	/^    parameter c1_mode = "bypass";$/;"	c
c1_mode	.\altera_mf.v	/^parameter   c1_mode             = "bypass";$/;"	c
c1_ph	.\altera_mf.v	/^    parameter c1_ph = 0;$/;"	c
c1_ph	.\altera_mf.v	/^parameter   c1_ph               = 0;$/;"	c
c1_rising_edge_transfer_done	.\altera_mf.v	/^    reg c1_rising_edge_transfer_done;$/;"	r
c1_test_source	.\altera_mf.v	/^    parameter c1_test_source = -1;$/;"	c
c1_test_source	.\altera_mf.v	/^    parameter c1_test_source = 5;$/;"	c
c1_test_source	.\altera_mf.v	/^parameter   c1_test_source      = 5;$/;"	c
c1_tmp	.\altera_mf.v	/^    reg c1_tmp;$/;"	r
c1_use_casc_in	.\altera_mf.v	/^    parameter c1_use_casc_in = "off";$/;"	c
c1_use_casc_in	.\altera_mf.v	/^parameter   c1_use_casc_in      = "off";$/;"	c
c2_clk	.\altera_mf.v	/^    wire c2_clk;$/;"	n
c2_high	.\altera_mf.v	/^    parameter c2_high = 1;$/;"	c
c2_high	.\altera_mf.v	/^parameter   c2_high             = 1;$/;"	c
c2_initial	.\altera_mf.v	/^    parameter c2_initial = 1;$/;"	c
c2_initial	.\altera_mf.v	/^parameter   c2_initial          = 1;$/;"	c
c2_low	.\altera_mf.v	/^    parameter c2_low = 1;$/;"	c
c2_low	.\altera_mf.v	/^parameter   c2_low              = 1;$/;"	c
c2_mode	.\altera_mf.v	/^    parameter c2_mode = "bypass";$/;"	c
c2_mode	.\altera_mf.v	/^parameter   c2_mode             = "bypass";$/;"	c
c2_ph	.\altera_mf.v	/^    parameter c2_ph = 0;$/;"	c
c2_ph	.\altera_mf.v	/^parameter   c2_ph               = 0;$/;"	c
c2_rising_edge_transfer_done	.\altera_mf.v	/^    reg c2_rising_edge_transfer_done;$/;"	r
c2_test_source	.\altera_mf.v	/^    parameter c2_test_source = -1;$/;"	c
c2_test_source	.\altera_mf.v	/^    parameter c2_test_source = 5;$/;"	c
c2_test_source	.\altera_mf.v	/^parameter   c2_test_source      = 5;$/;"	c
c2_use_casc_in	.\altera_mf.v	/^    parameter c2_use_casc_in = "off";$/;"	c
c2_use_casc_in	.\altera_mf.v	/^parameter   c2_use_casc_in      = "off";$/;"	c
c3_clk	.\altera_mf.v	/^    wire c3_clk;$/;"	n
c3_high	.\altera_mf.v	/^    parameter c3_high = 1;$/;"	c
c3_high	.\altera_mf.v	/^parameter   c3_high             = 1;$/;"	c
c3_initial	.\altera_mf.v	/^    parameter c3_initial = 1;$/;"	c
c3_initial	.\altera_mf.v	/^parameter   c3_initial          = 1;$/;"	c
c3_low	.\altera_mf.v	/^    parameter c3_low = 1;$/;"	c
c3_low	.\altera_mf.v	/^parameter   c3_low              = 1;$/;"	c
c3_mode	.\altera_mf.v	/^    parameter c3_mode = "bypass";$/;"	c
c3_mode	.\altera_mf.v	/^parameter   c3_mode             = "bypass";$/;"	c
c3_ph	.\altera_mf.v	/^    parameter c3_ph = 0;$/;"	c
c3_ph	.\altera_mf.v	/^parameter   c3_ph               = 0;$/;"	c
c3_rising_edge_transfer_done	.\altera_mf.v	/^    reg c3_rising_edge_transfer_done;$/;"	r
c3_test_source	.\altera_mf.v	/^    parameter c3_test_source = -1;$/;"	c
c3_test_source	.\altera_mf.v	/^    parameter c3_test_source = 5;$/;"	c
c3_test_source	.\altera_mf.v	/^parameter   c3_test_source      = 5;$/;"	c
c3_use_casc_in	.\altera_mf.v	/^    parameter c3_use_casc_in = "off";$/;"	c
c3_use_casc_in	.\altera_mf.v	/^parameter   c3_use_casc_in      = "off";$/;"	c
c4_clk	.\altera_mf.v	/^    wire c4_clk;$/;"	n
c4_high	.\altera_mf.v	/^    parameter c4_high = 1;$/;"	c
c4_high	.\altera_mf.v	/^parameter   c4_high             = 1;$/;"	c
c4_initial	.\altera_mf.v	/^    parameter c4_initial = 1;$/;"	c
c4_initial	.\altera_mf.v	/^parameter   c4_initial          = 1;$/;"	c
c4_low	.\altera_mf.v	/^    parameter c4_low = 1;$/;"	c
c4_low	.\altera_mf.v	/^parameter   c4_low              = 1;$/;"	c
c4_mode	.\altera_mf.v	/^    parameter c4_mode = "bypass";$/;"	c
c4_mode	.\altera_mf.v	/^parameter   c4_mode             = "bypass";$/;"	c
c4_ph	.\altera_mf.v	/^    parameter c4_ph = 0;$/;"	c
c4_ph	.\altera_mf.v	/^parameter   c4_ph               = 0;$/;"	c
c4_rising_edge_transfer_done	.\altera_mf.v	/^    reg c4_rising_edge_transfer_done;$/;"	r
c4_test_source	.\altera_mf.v	/^    parameter c4_test_source = -1;$/;"	c
c4_test_source	.\altera_mf.v	/^    parameter c4_test_source = 5;$/;"	c
c4_test_source	.\altera_mf.v	/^parameter   c4_test_source      = 5;$/;"	c
c4_use_casc_in	.\altera_mf.v	/^    parameter c4_use_casc_in = "off";$/;"	c
c4_use_casc_in	.\altera_mf.v	/^parameter   c4_use_casc_in      = "off";$/;"	c
c5_clk	.\altera_mf.v	/^    wire c5_clk;$/;"	n
c5_high	.\altera_mf.v	/^    parameter c5_high = 1;$/;"	c
c5_high	.\altera_mf.v	/^parameter   c5_high             = 1;$/;"	c
c5_initial	.\altera_mf.v	/^    parameter c5_initial = 1;$/;"	c
c5_initial	.\altera_mf.v	/^parameter   c5_initial          = 1;$/;"	c
c5_low	.\altera_mf.v	/^    parameter c5_low = 1;$/;"	c
c5_low	.\altera_mf.v	/^parameter   c5_low              = 1;$/;"	c
c5_mode	.\altera_mf.v	/^    parameter c5_mode = "bypass";$/;"	c
c5_mode	.\altera_mf.v	/^parameter   c5_mode             = "bypass";$/;"	c
c5_ph	.\altera_mf.v	/^    parameter c5_ph = 0;$/;"	c
c5_ph	.\altera_mf.v	/^parameter   c5_ph               = 0;$/;"	c
c5_rising_edge_transfer_done	.\altera_mf.v	/^    reg c5_rising_edge_transfer_done;$/;"	r
c5_test_source	.\altera_mf.v	/^    parameter c5_test_source = -1;$/;"	c
c5_test_source	.\altera_mf.v	/^    parameter c5_test_source = 5;$/;"	c
c5_test_source	.\altera_mf.v	/^parameter   c5_test_source      = 5;$/;"	c
c5_use_casc_in	.\altera_mf.v	/^    parameter c5_use_casc_in = "off";$/;"	c
c5_use_casc_in	.\altera_mf.v	/^parameter   c5_use_casc_in      = "off";$/;"	c
c6_clk	.\altera_mf.v	/^    wire c6_clk;$/;"	n
c6_high	.\altera_mf.v	/^    parameter c6_high = 1;$/;"	c
c6_high	.\altera_mf.v	/^parameter   c6_high             = 1;$/;"	c
c6_initial	.\altera_mf.v	/^    parameter c6_initial = 1;$/;"	c
c6_initial	.\altera_mf.v	/^parameter   c6_initial          = 1;$/;"	c
c6_low	.\altera_mf.v	/^    parameter c6_low = 1;$/;"	c
c6_low	.\altera_mf.v	/^parameter   c6_low              = 1;$/;"	c
c6_mode	.\altera_mf.v	/^    parameter c6_mode = "bypass";$/;"	c
c6_mode	.\altera_mf.v	/^parameter   c6_mode             = "bypass";$/;"	c
c6_ph	.\altera_mf.v	/^    parameter c6_ph = 0;$/;"	c
c6_ph	.\altera_mf.v	/^parameter   c6_ph               = 0;$/;"	c
c6_rising_edge_transfer_done	.\altera_mf.v	/^    reg c6_rising_edge_transfer_done;$/;"	r
c6_test_source	.\altera_mf.v	/^    parameter c6_test_source = -1;$/;"	c
c6_test_source	.\altera_mf.v	/^parameter   c6_test_source      = 5;$/;"	c
c6_use_casc_in	.\altera_mf.v	/^    parameter c6_use_casc_in = "off";$/;"	c
c6_use_casc_in	.\altera_mf.v	/^parameter   c6_use_casc_in      = "off";$/;"	c
c7_clk	.\altera_mf.v	/^    wire c7_clk;$/;"	n
c7_high	.\altera_mf.v	/^    parameter c7_high = 1;$/;"	c
c7_high	.\altera_mf.v	/^parameter   c7_high             = 1;$/;"	c
c7_initial	.\altera_mf.v	/^    parameter c7_initial = 1;$/;"	c
c7_initial	.\altera_mf.v	/^parameter   c7_initial          = 1;$/;"	c
c7_low	.\altera_mf.v	/^    parameter c7_low = 1;$/;"	c
c7_low	.\altera_mf.v	/^parameter   c7_low              = 1;$/;"	c
c7_mode	.\altera_mf.v	/^    parameter c7_mode = "bypass";$/;"	c
c7_mode	.\altera_mf.v	/^parameter   c7_mode             = "bypass";$/;"	c
c7_ph	.\altera_mf.v	/^    parameter c7_ph = 0;$/;"	c
c7_ph	.\altera_mf.v	/^parameter   c7_ph               = 0;$/;"	c
c7_rising_edge_transfer_done	.\altera_mf.v	/^    reg c7_rising_edge_transfer_done;$/;"	r
c7_test_source	.\altera_mf.v	/^    parameter c7_test_source = -1;$/;"	c
c7_test_source	.\altera_mf.v	/^parameter   c7_test_source      = 5;$/;"	c
c7_use_casc_in	.\altera_mf.v	/^    parameter c7_use_casc_in = "off";$/;"	c
c7_use_casc_in	.\altera_mf.v	/^parameter   c7_use_casc_in      = "off";$/;"	c
c8_clk	.\altera_mf.v	/^    wire c8_clk;$/;"	n
c8_high	.\altera_mf.v	/^    parameter c8_high = 1;$/;"	c
c8_high	.\altera_mf.v	/^parameter   c8_high             = 1;$/;"	c
c8_initial	.\altera_mf.v	/^    parameter c8_initial = 1;$/;"	c
c8_initial	.\altera_mf.v	/^parameter   c8_initial          = 1;$/;"	c
c8_low	.\altera_mf.v	/^    parameter c8_low = 1;$/;"	c
c8_low	.\altera_mf.v	/^parameter   c8_low              = 1;$/;"	c
c8_mode	.\altera_mf.v	/^    parameter c8_mode = "bypass";$/;"	c
c8_mode	.\altera_mf.v	/^parameter   c8_mode             = "bypass";$/;"	c
c8_ph	.\altera_mf.v	/^    parameter c8_ph = 0;$/;"	c
c8_ph	.\altera_mf.v	/^parameter   c8_ph               = 0;$/;"	c
c8_rising_edge_transfer_done	.\altera_mf.v	/^    reg c8_rising_edge_transfer_done;$/;"	r
c8_test_source	.\altera_mf.v	/^    parameter c8_test_source = -1;$/;"	c
c8_test_source	.\altera_mf.v	/^parameter   c8_test_source      = 5;$/;"	c
c8_use_casc_in	.\altera_mf.v	/^    parameter c8_use_casc_in = "off";$/;"	c
c8_use_casc_in	.\altera_mf.v	/^parameter   c8_use_casc_in      = "off";$/;"	c
c9_clk	.\altera_mf.v	/^    wire c9_clk;$/;"	n
c9_high	.\altera_mf.v	/^    parameter c9_high = 1;$/;"	c
c9_high	.\altera_mf.v	/^parameter   c9_high             = 1;$/;"	c
c9_initial	.\altera_mf.v	/^    parameter c9_initial = 1;$/;"	c
c9_initial	.\altera_mf.v	/^parameter   c9_initial          = 1;$/;"	c
c9_low	.\altera_mf.v	/^    parameter c9_low = 1;$/;"	c
c9_low	.\altera_mf.v	/^parameter   c9_low              = 1;$/;"	c
c9_mode	.\altera_mf.v	/^    parameter c9_mode = "bypass";$/;"	c
c9_mode	.\altera_mf.v	/^parameter   c9_mode             = "bypass";$/;"	c
c9_ph	.\altera_mf.v	/^    parameter c9_ph = 0;$/;"	c
c9_ph	.\altera_mf.v	/^parameter   c9_ph               = 0;$/;"	c
c9_rising_edge_transfer_done	.\altera_mf.v	/^    reg c9_rising_edge_transfer_done;$/;"	r
c9_test_source	.\altera_mf.v	/^    parameter c9_test_source = -1;$/;"	c
c9_test_source	.\altera_mf.v	/^parameter   c9_test_source      = 5;$/;"	c
c9_use_casc_in	.\altera_mf.v	/^    parameter c9_use_casc_in = "off";$/;"	c
c9_use_casc_in	.\altera_mf.v	/^parameter   c9_use_casc_in      = "off";$/;"	c
cState	.\altera_mf.v	/^    reg [ 4 : 0 ] cState;$/;"	r
cState_tmp	.\altera_mf.v	/^    wire [ 4 : 0 ] cState_tmp;$/;"	n
c_high_val	.\altera_mf.v	/^    reg [31:0] c_high_val[0:5];$/;"	r
c_high_val	.\altera_mf.v	/^    reg [31:0] c_high_val[0:9];$/;"	r
c_high_val_hold	.\altera_mf.v	/^    reg [31:0] c_high_val_hold[0:5];$/;"	r
c_high_val_hold	.\altera_mf.v	/^    reg [31:0] c_high_val_hold[0:9];$/;"	r
c_high_val_old	.\altera_mf.v	/^    reg [31:0] c_high_val_old[0:5];$/;"	r
c_high_val_old	.\altera_mf.v	/^    reg [31:0] c_high_val_old[0:9];$/;"	r
c_high_val_tmp	.\altera_mf.v	/^    reg [31:0] c_high_val_tmp[0:5];$/;"	r
c_high_val_tmp	.\altera_mf.v	/^    reg [31:0] c_high_val_tmp[0:9];$/;"	r
c_hval	.\altera_mf.v	/^    reg [31:0] c_hval[0:9];$/;"	r
c_initial_val	.\altera_mf.v	/^    reg [31:0] c_initial_val[0:5];$/;"	r
c_initial_val	.\altera_mf.v	/^    reg [31:0] c_initial_val[0:9];$/;"	r
c_low_val	.\altera_mf.v	/^    reg [31:0] c_low_val[0:5];$/;"	r
c_low_val	.\altera_mf.v	/^    reg [31:0] c_low_val[0:9];$/;"	r
c_low_val_hold	.\altera_mf.v	/^    reg [31:0] c_low_val_hold[0:5];$/;"	r
c_low_val_hold	.\altera_mf.v	/^    reg [31:0] c_low_val_hold[0:9];$/;"	r
c_low_val_old	.\altera_mf.v	/^    reg [31:0] c_low_val_old[0:5];$/;"	r
c_low_val_old	.\altera_mf.v	/^    reg [31:0] c_low_val_old[0:9];$/;"	r
c_low_val_tmp	.\altera_mf.v	/^    reg [31:0] c_low_val_tmp[0:5];$/;"	r
c_low_val_tmp	.\altera_mf.v	/^    reg [31:0] c_low_val_tmp[0:9];$/;"	r
c_lval	.\altera_mf.v	/^    reg [31:0] c_lval[0:9];$/;"	r
c_mode_val	.\altera_mf.v	/^    reg [8*6:1] c_mode_val[0:5];$/;"	r
c_mode_val	.\altera_mf.v	/^    reg [8*6:1] c_mode_val[0:9];$/;"	r
c_mode_val_hold	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_hold[0:5];$/;"	r
c_mode_val_hold	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_hold[0:9];$/;"	r
c_mode_val_old	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_old[0:5];$/;"	r
c_mode_val_old	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_old[0:9];$/;"	r
c_mode_val_tmp	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_tmp[0:5];$/;"	r
c_mode_val_tmp	.\altera_mf.v	/^    reg [8*6:1] c_mode_val_tmp[0:9];$/;"	r
c_ph_val	.\altera_mf.v	/^    integer c_ph_val[0:5];$/;"	r
c_ph_val	.\altera_mf.v	/^    integer c_ph_val[0:9];$/;"	r
c_ph_val_hold	.\altera_mf.v	/^    integer c_ph_val_hold[0:5];$/;"	r
c_ph_val_hold	.\altera_mf.v	/^    integer c_ph_val_hold[0:9];$/;"	r
c_ph_val_old	.\altera_mf.v	/^    integer c_ph_val_old[0:5];$/;"	r
c_ph_val_old	.\altera_mf.v	/^    integer c_ph_val_old[0:9];$/;"	r
c_ph_val_orig	.\altera_mf.v	/^    integer c_ph_val_orig[0:5];$/;"	r
c_ph_val_orig	.\altera_mf.v	/^    integer c_ph_val_orig[0:9];$/;"	r
c_ph_val_tmp	.\altera_mf.v	/^    integer c_ph_val_tmp[0:5];$/;"	r
c_ph_val_tmp	.\altera_mf.v	/^    integer c_ph_val_tmp[0:9];$/;"	r
c_state	.\altera_mf.v	/^    reg [2 : 0]                             c_state;$/;"	r
c_val	.\altera_mf.v	/^    reg [31:0] c_val; \/\/ placeholder for c_high,c_low values$/;"	r
cal_error	.\altera_mf.v	/^        output   [(number_of_channels-1):0]  cal_error;$/;"	p
cal_pd_wr	.\altera_mf.v	/^	parameter cal_pd_wr		= 5'd5;$/;"	c
cal_rx_rd	.\altera_mf.v	/^	parameter cal_rx_rd		= 5'd6;$/;"	c
cal_rx_wr	.\altera_mf.v	/^	parameter cal_rx_wr		= 5'd7;$/;"	c
calibrate	.\altera_mf.v	/^  input                             calibrate, \/\/ 'start'$/;"	p
cap0_taken	.\omsp_timerA.v	/^reg  cap0_taken;$/;"	r
cap0_taken_clr	.\omsp_timerA.v	/^wire cap0_taken_clr = reg_rd[TACCR0] | (tacctl0_wr & tacctl0[`TACOV] & ~per_din[`TACOV]);$/;"	n
cap1_taken	.\omsp_timerA.v	/^reg  cap1_taken;$/;"	r
cap1_taken_clr	.\omsp_timerA.v	/^wire cap1_taken_clr = reg_rd[TACCR1] | (tacctl1_wr & tacctl1[`TACOV] & ~per_din[`TACOV]);$/;"	n
cap2_taken	.\omsp_timerA.v	/^reg  cap2_taken;$/;"	r
cap2_taken_clr	.\omsp_timerA.v	/^wire cap2_taken_clr = reg_rd[TACCR2] | (tacctl2_wr & tacctl2[`TACOV] & ~per_din[`TACOV]);$/;"	n
capture_ir	.\altera_mf.v	/^    reg   capture_ir;    \/\/ signals force_ir_capture instruction$/;"	r
carry	.\altera_mf.v	/^    reg carry;$/;"	r
cc	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
cc	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
cci0	.\omsp_timerA.v	/^wire        cci0;$/;"	n
cci0_cap	.\omsp_timerA.v	/^wire        cci0_cap;$/;"	n
cci0_dly	.\omsp_timerA.v	/^reg cci0_dly;$/;"	r
cci0_evt	.\omsp_timerA.v	/^wire cci0_evt = (tacctl0[`TACMx]==2'b00) ? 1'b0                  :$/;"	n
cci0_evt_s	.\omsp_timerA.v	/^reg cci0_evt_s;$/;"	r
cci0_s	.\omsp_timerA.v	/^wire        cci0_s;$/;"	n
cci0_sync	.\omsp_timerA.v	/^reg cci0_sync;$/;"	r
cci1	.\omsp_timerA.v	/^wire        cci1;$/;"	n
cci1_cap	.\omsp_timerA.v	/^wire        cci1_cap;$/;"	n
cci1_dly	.\omsp_timerA.v	/^reg cci1_dly;$/;"	r
cci1_evt	.\omsp_timerA.v	/^wire cci1_evt = (tacctl1[`TACMx]==2'b00) ? 1'b0                  :$/;"	n
cci1_evt_s	.\omsp_timerA.v	/^reg cci1_evt_s;$/;"	r
cci1_s	.\omsp_timerA.v	/^wire        cci1_s;$/;"	n
cci1_sync	.\omsp_timerA.v	/^reg cci1_sync;$/;"	r
cci2	.\omsp_timerA.v	/^wire        cci2;$/;"	n
cci2_cap	.\omsp_timerA.v	/^wire        cci2_cap;$/;"	n
cci2_dly	.\omsp_timerA.v	/^reg cci2_dly;$/;"	r
cci2_evt	.\omsp_timerA.v	/^wire cci2_evt = (tacctl2[`TACMx]==2'b00) ? 1'b0                  :$/;"	n
cci2_evt_s	.\omsp_timerA.v	/^reg cci2_evt_s;$/;"	r
cci2_s	.\omsp_timerA.v	/^wire        cci2_s;$/;"	n
cci2_sync	.\omsp_timerA.v	/^reg cci2_sync;$/;"	r
ccifg0_set	.\omsp_timerA.v	/^wire        ccifg0_set;$/;"	n
ccifg1_clr	.\omsp_timerA.v	/^wire        ccifg1_clr;$/;"	n
ccifg1_set	.\omsp_timerA.v	/^wire        ccifg1_set;$/;"	n
ccifg2_clr	.\omsp_timerA.v	/^wire        ccifg2_clr;$/;"	n
ccifg2_set	.\omsp_timerA.v	/^wire        ccifg2_set;$/;"	n
cda_m_cntr	.\altera_mf.v	/^module cda_m_cntr   ( clk,$/;"	m
cda_m_cntr	.\work\cda_m_cntr\_primary.vhd	/^entity cda_m_cntr is$/;"	e
cda_n_cntr	.\altera_mf.v	/^module cda_n_cntr   ( clk,$/;"	m
cda_n_cntr	.\work\cda_n_cntr\_primary.vhd	/^entity cda_n_cntr is$/;"	e
cda_scale_cntr	.\altera_mf.v	/^module cda_scale_cntr   ( clk,$/;"	m
cda_scale_cntr	.\work\cda_scale_cntr\_primary.vhd	/^entity cda_scale_cntr is$/;"	e
cds_mode	.\altera_mf.v	/^    parameter cds_mode = "UNUSED";$/;"	c
center_align_msb	.\altera_mf.v	/^    parameter center_align_msb = "OFF";$/;"	c
ch_adv	.\altera_mf.v	/^	parameter ch_adv		= 5'd12;$/;"	c
ch_wait	.\altera_mf.v	/^	parameter ch_wait		= 5'd1;$/;"	c
cha0_tf_done	.\dma_pri.v	/^input                                   cha0_tf_done   ;$/;"	p
cha0_tf_done	.\dma_pri.v	/^wire                                   cha0_tf_done    ;$/;"	n
cha0_tf_done_sy	.\dma_pri.v	/^reg cha0_tf_done_sy;$/;"	r
cha0_tri	.\dma_pri.v	/^output                                  cha0_tri       ;$/;"	p
cha0_tri	.\dma_pri.v	/^reg                                    cha0_tri        ;$/;"	r
cha1_tf_done	.\dma_pri.v	/^input                                   cha1_tf_done   ;$/;"	p
cha1_tf_done	.\dma_pri.v	/^wire                                   cha1_tf_done    ;$/;"	n
cha1_tf_done_sy	.\dma_pri.v	/^reg cha1_tf_done_sy;$/;"	r
cha1_tri	.\dma_pri.v	/^output                                  cha1_tri       ;$/;"	p
cha1_tri	.\dma_pri.v	/^reg                                    cha1_tri        ;$/;"	r
cha2_tf_done	.\dma_pri.v	/^input                                   cha2_tf_done   ;$/;"	p
cha2_tf_done	.\dma_pri.v	/^wire                                   cha2_tf_done    ;$/;"	n
cha2_tf_done_sy	.\dma_pri.v	/^reg cha2_tf_done_sy;$/;"	r
cha2_tri	.\dma_pri.v	/^output                                  cha2_tri       ;$/;"	p
cha2_tri	.\dma_pri.v	/^reg                                    cha2_tri        ;$/;"	r
cha_tf_done	.\dma_pri.v	/^wire                                   cha_tf_done     ;$/;"	n
cha_tf_done_dly	.\dma_pri.v	/^reg                                    cha_tf_done_dly ;$/;"	r
cha_tf_done_pos	.\dma_pri.v	/^wire                                   cha_tf_done_pos ;$/;"	n
cha_tri	.\dma_pri.v	/^wire                                   cha_tri         ;$/;"	n
cha_tri_dly	.\dma_pri.v	/^reg                                    cha_tri_dly     ;$/;"	r
cha_tri_pos	.\dma_pri.v	/^wire                                   cha_tri_pos     ;$/;"	n
chainin	.\altera_mf.v	/^    input [width_chainin - 1 : 0] chainin;$/;"	p
chainin_int	.\altera_mf.v	/^    tri0 [width_chainin - 1 : 0] chainin_int;$/;"	n
chainin_reg	.\altera_mf.v	/^    reg  [(width_chainin) -1:0] chainin_reg;$/;"	r
chainin_register1	.\altera_mf.v	/^    wire  [(width_chainin) -1:0] chainin_register1;$/;"	n
chainout_aclr	.\altera_mf.v	/^    parameter chainout_aclr = "ACLR3";$/;"	c
chainout_add_result	.\altera_mf.v	/^    wire [int_width_result: 0] chainout_add_result;$/;"	n
chainout_adder	.\altera_mf.v	/^    parameter chainout_adder = "NO";$/;"	c
chainout_adder_in_wire	.\altera_mf.v	/^    wire [int_width_result - 1: 0] chainout_adder_in_wire;$/;"	n
chainout_final_out	.\altera_mf.v	/^    reg [int_width_result: 0] chainout_final_out;$/;"	r
chainout_input_a	.\altera_mf.v	/^    parameter chainout_input_a = (width_a < 18) ? (18 - width_a) : $/;"	c
chainout_input_b	.\altera_mf.v	/^    parameter chainout_input_b = (width_b < 18) ? (18 - width_b) : $/;"	c
chainout_new_dataa_int	.\altera_mf.v	/^    tri0  [4 * int_width_a -1 : 0] chainout_new_dataa_int;$/;"	n
chainout_new_dataa_temp	.\altera_mf.v	/^    wire [chainout_input_a + width_a - 1 :0] chainout_new_dataa_temp;$/;"	n
chainout_new_dataa_temp2	.\altera_mf.v	/^    wire [chainout_input_a + width_a - 1 :0] chainout_new_dataa_temp2;$/;"	n
chainout_new_dataa_temp3	.\altera_mf.v	/^    wire [chainout_input_a + width_a - 1 :0] chainout_new_dataa_temp3;$/;"	n
chainout_new_dataa_temp4	.\altera_mf.v	/^    wire [chainout_input_a + width_a - 1 :0] chainout_new_dataa_temp4;$/;"	n
chainout_new_datab_int	.\altera_mf.v	/^    tri0  [4 * int_width_b -1 : 0] chainout_new_datab_int;$/;"	n
chainout_new_datab_temp	.\altera_mf.v	/^    wire [chainout_input_b + width_b +width_coef - 1 :0] chainout_new_datab_temp;$/;"	n
chainout_new_datab_temp2	.\altera_mf.v	/^    wire [chainout_input_b + width_b +width_coef - 1 :0] chainout_new_datab_temp2;$/;"	n
chainout_new_datab_temp3	.\altera_mf.v	/^    wire [chainout_input_b + width_b +width_coef - 1 :0] chainout_new_datab_temp3;$/;"	n
chainout_new_datab_temp4	.\altera_mf.v	/^    wire [chainout_input_b + width_b +width_coef - 1 :0] chainout_new_datab_temp4;$/;"	n
chainout_output_reg	.\altera_mf.v	/^    reg [int_width_result: 0] chainout_output_reg;$/;"	r
chainout_output_wire	.\altera_mf.v	/^    wire [int_width_result: 0] chainout_output_wire;$/;"	n
chainout_overflow_stat_reg	.\altera_mf.v	/^    reg chainout_overflow_stat_reg;$/;"	r
chainout_overflow_status	.\altera_mf.v	/^    reg chainout_overflow_status;$/;"	r
chainout_reg_wire_clk	.\altera_mf.v	/^    wire chainout_reg_wire_clk;$/;"	n
chainout_reg_wire_clr	.\altera_mf.v	/^    tri0 chainout_reg_wire_clr;$/;"	n
chainout_reg_wire_en	.\altera_mf.v	/^    tri1 chainout_reg_wire_en;$/;"	n
chainout_register	.\altera_mf.v	/^    parameter chainout_register = "UNREGISTERED";$/;"	c
chainout_rnd_sat_blk_res	.\altera_mf.v	/^    reg [int_width_result: 0] chainout_rnd_sat_blk_res;$/;"	r
chainout_round	.\altera_mf.v	/^    input chainout_round;$/;"	p
chainout_round_aclr	.\altera_mf.v	/^    parameter chainout_round_aclr = "NONE";$/;"	c
chainout_round_block_result	.\altera_mf.v	/^    reg [int_width_result: 0] chainout_round_block_result;$/;"	r
chainout_round_int	.\altera_mf.v	/^    tri0 chainout_round_int;$/;"	n
chainout_round_out_reg	.\altera_mf.v	/^    reg chainout_round_out_reg;$/;"	r
chainout_round_out_reg_wire_clk	.\altera_mf.v	/^    wire chainout_round_out_reg_wire_clk;$/;"	n
chainout_round_out_reg_wire_clr	.\altera_mf.v	/^    tri0 chainout_round_out_reg_wire_clr;$/;"	n
chainout_round_out_reg_wire_en	.\altera_mf.v	/^    tri1 chainout_round_out_reg_wire_en;$/;"	n
chainout_round_out_wire	.\altera_mf.v	/^    wire chainout_round_out_wire;$/;"	n
chainout_round_output_aclr	.\altera_mf.v	/^    parameter chainout_round_output_aclr = "NONE";$/;"	c
chainout_round_output_register	.\altera_mf.v	/^    parameter chainout_round_output_register = "UNREGISTERED";$/;"	c
chainout_round_pipe_reg	.\altera_mf.v	/^    reg chainout_round_pipe_reg;$/;"	r
chainout_round_pipe_wire	.\altera_mf.v	/^    wire chainout_round_pipe_wire;$/;"	n
chainout_round_pipe_wire_clk	.\altera_mf.v	/^    wire chainout_round_pipe_wire_clk;$/;"	n
chainout_round_pipe_wire_clr	.\altera_mf.v	/^    tri0 chainout_round_pipe_wire_clr;$/;"	n
chainout_round_pipe_wire_en	.\altera_mf.v	/^    tri1 chainout_round_pipe_wire_en;$/;"	n
chainout_round_pipeline_aclr	.\altera_mf.v	/^    parameter chainout_round_pipeline_aclr = "NONE";$/;"	c
chainout_round_pipeline_register	.\altera_mf.v	/^    parameter chainout_round_pipeline_register = "UNREGISTERED";$/;"	c
chainout_round_position	.\altera_mf.v	/^    parameter chainout_round_position = ((chainout_rounding != "NO") || (output_saturate_type == "SYMMETRIC")) ?$/;"	c
chainout_round_reg	.\altera_mf.v	/^    reg chainout_round_reg;$/;"	r
chainout_round_reg_wire_clk	.\altera_mf.v	/^    wire chainout_round_reg_wire_clk;$/;"	n
chainout_round_reg_wire_clr	.\altera_mf.v	/^    tri0 chainout_round_reg_wire_clr;$/;"	n
chainout_round_reg_wire_en	.\altera_mf.v	/^    tri1 chainout_round_reg_wire_en;$/;"	n
chainout_round_register	.\altera_mf.v	/^    parameter chainout_round_register = "UNREGISTERED";$/;"	c
chainout_round_wire	.\altera_mf.v	/^    wire chainout_round_wire;$/;"	n
chainout_rounding	.\altera_mf.v	/^    parameter chainout_rounding = "NO";$/;"	c
chainout_sat_block_result	.\altera_mf.v	/^    reg [int_width_result: 0] chainout_sat_block_result;$/;"	r
chainout_sat_int	.\altera_mf.v	/^    tri0 chainout_sat_int;$/;"	n
chainout_sat_msb	.\altera_mf.v	/^    parameter chainout_sat_msb = (int_width_result - 1);$/;"	c
chainout_sat_out_reg	.\altera_mf.v	/^    reg chainout_sat_out_reg;$/;"	r
chainout_sat_out_reg_wire_clk	.\altera_mf.v	/^    wire chainout_sat_out_reg_wire_clk;$/;"	n
chainout_sat_out_reg_wire_clr	.\altera_mf.v	/^    tri0 chainout_sat_out_reg_wire_clr;$/;"	n
chainout_sat_out_reg_wire_en	.\altera_mf.v	/^    tri1 chainout_sat_out_reg_wire_en;$/;"	n
chainout_sat_out_wire	.\altera_mf.v	/^    wire chainout_sat_out_wire;$/;"	n
chainout_sat_overflow	.\altera_mf.v	/^    output chainout_sat_overflow;$/;"	p
chainout_sat_pipe_reg	.\altera_mf.v	/^    reg chainout_sat_pipe_reg;$/;"	r
chainout_sat_pipe_wire	.\altera_mf.v	/^    wire chainout_sat_pipe_wire;$/;"	n
chainout_sat_pipe_wire_clk	.\altera_mf.v	/^    wire chainout_sat_pipe_wire_clk;$/;"	n
chainout_sat_pipe_wire_clr	.\altera_mf.v	/^    tri0 chainout_sat_pipe_wire_clr;$/;"	n
chainout_sat_pipe_wire_en	.\altera_mf.v	/^    tri1 chainout_sat_pipe_wire_en;$/;"	n
chainout_sat_reg	.\altera_mf.v	/^    reg chainout_sat_reg;$/;"	r
chainout_sat_reg_wire_clk	.\altera_mf.v	/^    wire chainout_sat_reg_wire_clk;$/;"	n
chainout_sat_reg_wire_clr	.\altera_mf.v	/^    tri0 chainout_sat_reg_wire_clr;$/;"	n
chainout_sat_reg_wire_en	.\altera_mf.v	/^    tri1 chainout_sat_reg_wire_en;$/;"	n
chainout_sat_wire	.\altera_mf.v	/^    wire chainout_sat_wire;$/;"	n
chainout_saturate	.\altera_mf.v	/^    input chainout_saturate;$/;"	p
chainout_saturate_aclr	.\altera_mf.v	/^    parameter chainout_saturate_aclr = "NONE";$/;"	c
chainout_saturate_output_aclr	.\altera_mf.v	/^    parameter chainout_saturate_output_aclr = "NONE";$/;"	c
chainout_saturate_output_register	.\altera_mf.v	/^    parameter chainout_saturate_output_register = "UNREGISTERED";$/;"	c
chainout_saturate_pipeline_aclr	.\altera_mf.v	/^    parameter chainout_saturate_pipeline_aclr = "NONE";$/;"	c
chainout_saturate_pipeline_register	.\altera_mf.v	/^    parameter chainout_saturate_pipeline_register = "UNREGISTERED";$/;"	c
chainout_saturate_register	.\altera_mf.v	/^    parameter chainout_saturate_register = "UNREGISTERED";$/;"	c
chainout_saturation	.\altera_mf.v	/^    parameter chainout_saturation = "NO";$/;"	c
chainout_saturation_position	.\altera_mf.v	/^    parameter chainout_saturation_position = (chainout_saturation != "NO") ?$/;"	c
channel_address_width	.\altera_mf.v	/^        parameter channel_address_width = 1;$/;"	c
channel_address_width	.\altera_mf.v	/^  parameter channel_address_width = 3,$/;"	c
char_idx	.\altera_mf.v	/^    integer   char_idx;       \/\/ character_loop index$/;"	r
character	.\altera_mf.v	/^        input [7 : 0] character;$/;"	p
character_count	.\altera_mf.v	/^    integer character_count;$/;"	r
charge_pump_curr_arr	.\altera_mf.v	/^    integer charge_pump_curr_arr[0:15];$/;"	r
charge_pump_current	.\altera_mf.v	/^    parameter charge_pump_current = 0;$/;"	c
charge_pump_current	.\altera_mf.v	/^    parameter charge_pump_current = 10;$/;"	c
charge_pump_current	.\altera_mf.v	/^    parameter charge_pump_current = 52;$/;"	c
charge_pump_current	.\altera_mf.v	/^parameter   charge_pump_current = 2;$/;"	c
charge_pump_current_bits	.\altera_mf.v	/^parameter charge_pump_current_bits = 0;$/;"	c
charge_pump_current_bits	.\altera_mf.v	/^parameter charge_pump_current_bits = 9999;$/;"	c
check_simultaneous_read_write	.\altera_mf.v	/^    parameter check_simultaneous_read_write =   (((operation_mode == "BIDIR_DUAL_PORT") || (operation_mode == "DUAL_PORT")) && $/;"	c
cho_rnd_bit_cnt	.\altera_mf.v	/^    integer cho_rnd_bit_cnt;$/;"	r
cho_round_happen	.\altera_mf.v	/^    reg cho_round_happen;$/;"	r
cho_sat_all_bit_cnt	.\altera_mf.v	/^    integer cho_sat_all_bit_cnt;$/;"	r
cho_sat_bit_cnt	.\altera_mf.v	/^    integer cho_sat_bit_cnt;$/;"	r
cho_sat_bits_or	.\altera_mf.v	/^    reg cho_sat_bits_or;$/;"	r
cho_stick_bits_or	.\altera_mf.v	/^    reg cho_stick_bits_or;$/;"	r
chout_shftrot_reg	.\altera_mf.v	/^    reg [int_width_result: 0] chout_shftrot_reg;$/;"	r
cin	.\altera_mf.v	/^    input cin;$/;"	p
cin_int	.\altera_mf.v	/^    reg cin_int;$/;"	r
clk	.\altera_mf.v	/^    input   clk;$/;"	p
clk	.\altera_mf.v	/^    input clk;$/;"	p
clk	.\altera_mf.v	/^    output [4:0] clk;$/;"	p
clk	.\altera_mf.v	/^    output [5:0] clk;$/;"	p
clk	.\altera_mf.v	/^    output [9:0] clk;$/;"	p
clk	.\altera_mf.v	/^    tri1 clk;$/;"	n
clk	.\altera_mf.v	/^output        [width_clock-1:0] clk;$/;"	p
clk	.\omsp_clock_gate.v	/^input          clk;            \/\/ Clock$/;"	p
clk	.\omsp_sync_cell.v	/^input               clk;          \/\/ Receiving clock$/;"	p
clk	.\omsp_sync_reset.v	/^input               clk;          \/\/ Receiving clock$/;"	p
clk	.\uart_rx.v	/^input clk;$/;"	p
clk	.\uart_speed_select.v	/^input clk;  \/\/ 50MHz主时钟$/;"	p
clk	.\uart_tx.v	/^input clk;$/;"	p
clk0	.\altera_mf.v	/^    wire clk0;$/;"	n
clk0_count	.\altera_mf.v	/^    integer clk0_count;$/;"	r
clk0_counter	.\altera_mf.v	/^    parameter clk0_counter = "c0";$/;"	c
clk0_counter	.\altera_mf.v	/^    parameter clk0_counter = "g0";$/;"	c
clk0_counter	.\altera_mf.v	/^    parameter clk0_counter = "unused";$/;"	c
clk0_counter	.\altera_mf.v	/^parameter   clk0_counter        = "g0" ;$/;"	c
clk0_cycles_per_sync_period	.\altera_mf.v	/^integer clk0_cycles_per_sync_period;$/;"	r
clk0_div	.\altera_mf.v	/^        input clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	p
clk0_div	.\altera_mf.v	/^        integer clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	r
clk0_div_factor_diff	.\altera_mf.v	/^        real    clk0_div_factor_diff;$/;"	r
clk0_div_factor_int	.\altera_mf.v	/^        integer clk0_div_factor_int;$/;"	r
clk0_div_factor_real	.\altera_mf.v	/^        real    clk0_div_factor_real;$/;"	r
clk0_divide_by	.\altera_mf.v	/^    parameter clk0_divide_by                       = 0;$/;"	c
clk0_divide_by	.\altera_mf.v	/^    parameter clk0_divide_by                       = 1;$/;"	c
clk0_divide_by	.\altera_mf.v	/^    parameter clk0_divide_by = 1;$/;"	c
clk0_divide_by	.\altera_mf.v	/^parameter   clk0_divide_by          = 1;$/;"	c
clk0_duty_cycle	.\altera_mf.v	/^    parameter clk0_duty_cycle                      = 50;$/;"	c
clk0_duty_cycle	.\altera_mf.v	/^    parameter clk0_duty_cycle = 50;$/;"	c
clk0_duty_cycle	.\altera_mf.v	/^parameter   clk0_duty_cycle         = 50;$/;"	c
clk0_is_bad	.\altera_mf.v	/^    reg clk0_is_bad;$/;"	r
clk0_mult	.\altera_mf.v	/^        input clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	p
clk0_mult	.\altera_mf.v	/^        integer clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	r
clk0_multiply_by	.\altera_mf.v	/^    parameter clk0_multiply_by                     = 0;$/;"	c
clk0_multiply_by	.\altera_mf.v	/^    parameter clk0_multiply_by                     = 1;$/;"	c
clk0_multiply_by	.\altera_mf.v	/^    parameter clk0_multiply_by = 1;$/;"	c
clk0_multiply_by	.\altera_mf.v	/^parameter   clk0_multiply_by        = 1;$/;"	c
clk0_output_frequency	.\altera_mf.v	/^    parameter clk0_output_frequency                = 0;$/;"	c
clk0_output_frequency	.\altera_mf.v	/^parameter   clk0_output_frequency   = 0;$/;"	c
clk0_phase_delay	.\altera_mf.v	/^time clk0_phase_delay;$/;"	r
clk0_phase_shift	.\altera_mf.v	/^    parameter clk0_phase_shift                     = "0";$/;"	c
clk0_phase_shift	.\altera_mf.v	/^    parameter clk0_phase_shift = 0;$/;"	c
clk0_phase_shift	.\altera_mf.v	/^parameter   clk0_phase_shift        = "0";$/;"	c
clk0_phase_shift_num	.\altera_mf.v	/^    parameter clk0_phase_shift_num = 0;$/;"	c
clk0_synchronizing_period	.\altera_mf.v	/^time clk0_synchronizing_period;$/;"	r
clk0_time_delay	.\altera_mf.v	/^    parameter clk0_time_delay = 0;$/;"	c
clk0_time_delay	.\altera_mf.v	/^parameter   clk0_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk0_tmp	.\altera_mf.v	/^    wire clk0_tmp;$/;"	n
clk0_tmp	.\altera_mf.v	/^reg clk0_tmp;$/;"	r
clk0_use_even_counter_mode	.\altera_mf.v	/^    parameter clk0_use_even_counter_mode = "off";$/;"	c
clk0_use_even_counter_mode	.\altera_mf.v	/^parameter   clk0_use_even_counter_mode    = "OFF";$/;"	c
clk0_use_even_counter_value	.\altera_mf.v	/^    parameter clk0_use_even_counter_value = "off";$/;"	c
clk0_use_even_counter_value	.\altera_mf.v	/^parameter   clk0_use_even_counter_value   = "OFF";$/;"	c
clk0_used	.\altera_mf.v	/^        input clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	p
clk0_used	.\altera_mf.v	/^        reg[160:1] clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	r
clk1	.\altera_mf.v	/^    wire clk1;$/;"	n
clk1_count	.\altera_mf.v	/^    integer clk1_count;$/;"	r
clk1_counter	.\altera_mf.v	/^    parameter clk1_counter = "c1";$/;"	c
clk1_counter	.\altera_mf.v	/^    parameter clk1_counter = "g1";$/;"	c
clk1_counter	.\altera_mf.v	/^    parameter clk1_counter = "unused";$/;"	c
clk1_counter	.\altera_mf.v	/^parameter   clk1_counter        = "g1" ;$/;"	c
clk1_cycles_per_sync_period	.\altera_mf.v	/^integer clk1_cycles_per_sync_period;$/;"	r
clk1_div	.\altera_mf.v	/^        input clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	p
clk1_div	.\altera_mf.v	/^        integer clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	r
clk1_div_factor_diff	.\altera_mf.v	/^        real    clk1_div_factor_diff;$/;"	r
clk1_div_factor_int	.\altera_mf.v	/^        integer clk1_div_factor_int;$/;"	r
clk1_div_factor_real	.\altera_mf.v	/^        real    clk1_div_factor_real;$/;"	r
clk1_divide_by	.\altera_mf.v	/^    parameter clk1_divide_by                       = 0;$/;"	c
clk1_divide_by	.\altera_mf.v	/^    parameter clk1_divide_by                       = 1;$/;"	c
clk1_divide_by	.\altera_mf.v	/^    parameter clk1_divide_by = 1;$/;"	c
clk1_divide_by	.\altera_mf.v	/^parameter   clk1_divide_by          = 1;$/;"	c
clk1_duty_cycle	.\altera_mf.v	/^    parameter clk1_duty_cycle                      = 50;$/;"	c
clk1_duty_cycle	.\altera_mf.v	/^    parameter clk1_duty_cycle = 50;$/;"	c
clk1_duty_cycle	.\altera_mf.v	/^parameter   clk1_duty_cycle         = 50;$/;"	c
clk1_is_bad	.\altera_mf.v	/^    reg clk1_is_bad;$/;"	r
clk1_mult	.\altera_mf.v	/^        input clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	p
clk1_mult	.\altera_mf.v	/^        integer clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	r
clk1_multiply_by	.\altera_mf.v	/^    parameter clk1_multiply_by                     = 0;$/;"	c
clk1_multiply_by	.\altera_mf.v	/^    parameter clk1_multiply_by                     = 1;$/;"	c
clk1_multiply_by	.\altera_mf.v	/^    parameter clk1_multiply_by = 1;$/;"	c
clk1_multiply_by	.\altera_mf.v	/^parameter   clk1_multiply_by        = 1;$/;"	c
clk1_output_frequency	.\altera_mf.v	/^    parameter clk1_output_frequency                = 0;$/;"	c
clk1_output_frequency	.\altera_mf.v	/^parameter   clk1_output_frequency   = 0;$/;"	c
clk1_phase_delay	.\altera_mf.v	/^time clk1_phase_delay;$/;"	r
clk1_phase_shift	.\altera_mf.v	/^    parameter clk1_phase_shift                     = "0";$/;"	c
clk1_phase_shift	.\altera_mf.v	/^    parameter clk1_phase_shift = 0;$/;"	c
clk1_phase_shift	.\altera_mf.v	/^parameter   clk1_phase_shift        = "0";$/;"	c
clk1_phase_shift_num	.\altera_mf.v	/^    parameter clk1_phase_shift_num = 0;$/;"	c
clk1_synchronizing_period	.\altera_mf.v	/^time clk1_synchronizing_period;$/;"	r
clk1_time_delay	.\altera_mf.v	/^    parameter clk1_time_delay = 0;$/;"	c
clk1_time_delay	.\altera_mf.v	/^parameter   clk1_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk1_tmp	.\altera_mf.v	/^    wire clk1_tmp;$/;"	n
clk1_tmp	.\altera_mf.v	/^reg clk1_tmp;$/;"	r
clk1_use_even_counter_mode	.\altera_mf.v	/^    parameter clk1_use_even_counter_mode = "off";$/;"	c
clk1_use_even_counter_mode	.\altera_mf.v	/^parameter   clk1_use_even_counter_mode    = "OFF";$/;"	c
clk1_use_even_counter_value	.\altera_mf.v	/^    parameter clk1_use_even_counter_value = "off";$/;"	c
clk1_use_even_counter_value	.\altera_mf.v	/^parameter   clk1_use_even_counter_value   = "OFF";$/;"	c
clk1_used	.\altera_mf.v	/^        input clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	p
clk1_used	.\altera_mf.v	/^        reg[160:1] clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	r
clk2	.\altera_mf.v	/^    wire clk2;$/;"	n
clk2_counter	.\altera_mf.v	/^    parameter clk2_counter = "c2";$/;"	c
clk2_counter	.\altera_mf.v	/^    parameter clk2_counter = "g2";$/;"	c
clk2_counter	.\altera_mf.v	/^    parameter clk2_counter = "unused";$/;"	c
clk2_counter	.\altera_mf.v	/^parameter   clk2_counter        = "g2" ;$/;"	c
clk2_cycles_per_sync_period	.\altera_mf.v	/^integer clk2_cycles_per_sync_period;$/;"	r
clk2_div	.\altera_mf.v	/^        input clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	p
clk2_div	.\altera_mf.v	/^        integer clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	r
clk2_div_factor_diff	.\altera_mf.v	/^        real    clk2_div_factor_diff;$/;"	r
clk2_div_factor_int	.\altera_mf.v	/^        integer clk2_div_factor_int;$/;"	r
clk2_div_factor_real	.\altera_mf.v	/^        real    clk2_div_factor_real;$/;"	r
clk2_divide_by	.\altera_mf.v	/^    parameter clk2_divide_by                       = 0;$/;"	c
clk2_divide_by	.\altera_mf.v	/^    parameter clk2_divide_by                       = 1;$/;"	c
clk2_divide_by	.\altera_mf.v	/^    parameter clk2_divide_by = 1;$/;"	c
clk2_divide_by	.\altera_mf.v	/^parameter   clk2_divide_by          = 1;$/;"	c
clk2_duty_cycle	.\altera_mf.v	/^    parameter clk2_duty_cycle                      = 50;$/;"	c
clk2_duty_cycle	.\altera_mf.v	/^    parameter clk2_duty_cycle = 50;$/;"	c
clk2_duty_cycle	.\altera_mf.v	/^parameter   clk2_duty_cycle         = 50;$/;"	c
clk2_mult	.\altera_mf.v	/^        input clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	p
clk2_mult	.\altera_mf.v	/^        integer clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	r
clk2_multiply_by	.\altera_mf.v	/^    parameter clk2_multiply_by                     = 0;$/;"	c
clk2_multiply_by	.\altera_mf.v	/^    parameter clk2_multiply_by                     = 1;$/;"	c
clk2_multiply_by	.\altera_mf.v	/^    parameter clk2_multiply_by = 1;$/;"	c
clk2_multiply_by	.\altera_mf.v	/^parameter   clk2_multiply_by        = 1;$/;"	c
clk2_output_frequency	.\altera_mf.v	/^    parameter clk2_output_frequency                = 0;$/;"	c
clk2_output_frequency	.\altera_mf.v	/^parameter   clk2_output_frequency   = 0;$/;"	c
clk2_phase_delay	.\altera_mf.v	/^time clk2_phase_delay;$/;"	r
clk2_phase_shift	.\altera_mf.v	/^    parameter clk2_phase_shift                     = "0";$/;"	c
clk2_phase_shift	.\altera_mf.v	/^    parameter clk2_phase_shift = 0;$/;"	c
clk2_phase_shift	.\altera_mf.v	/^parameter   clk2_phase_shift        = "0";$/;"	c
clk2_phase_shift_num	.\altera_mf.v	/^    parameter clk2_phase_shift_num = 0;$/;"	c
clk2_synchronizing_period	.\altera_mf.v	/^time clk2_synchronizing_period;$/;"	r
clk2_time_delay	.\altera_mf.v	/^    parameter clk2_time_delay = 0;$/;"	c
clk2_time_delay	.\altera_mf.v	/^parameter   clk2_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk2_tmp	.\altera_mf.v	/^    wire clk2_tmp;$/;"	n
clk2_tmp	.\altera_mf.v	/^reg clk2_tmp;$/;"	r
clk2_use_even_counter_mode	.\altera_mf.v	/^    parameter clk2_use_even_counter_mode = "off";$/;"	c
clk2_use_even_counter_mode	.\altera_mf.v	/^parameter   clk2_use_even_counter_mode    = "OFF";$/;"	c
clk2_use_even_counter_value	.\altera_mf.v	/^    parameter clk2_use_even_counter_value = "off";$/;"	c
clk2_use_even_counter_value	.\altera_mf.v	/^parameter   clk2_use_even_counter_value   = "OFF";$/;"	c
clk2_used	.\altera_mf.v	/^        input clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	p
clk2_used	.\altera_mf.v	/^        reg[160:1] clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	r
clk3	.\altera_mf.v	/^    wire clk3;$/;"	n
clk3_counter	.\altera_mf.v	/^    parameter clk3_counter = "c3";$/;"	c
clk3_counter	.\altera_mf.v	/^    parameter clk3_counter = "g3";$/;"	c
clk3_counter	.\altera_mf.v	/^    parameter clk3_counter = "unused";$/;"	c
clk3_counter	.\altera_mf.v	/^parameter   clk3_counter        = "g3" ;$/;"	c
clk3_div	.\altera_mf.v	/^        input clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	p
clk3_div	.\altera_mf.v	/^        integer clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	r
clk3_div_factor_diff	.\altera_mf.v	/^        real    clk3_div_factor_diff;$/;"	r
clk3_div_factor_int	.\altera_mf.v	/^        integer clk3_div_factor_int;$/;"	r
clk3_div_factor_real	.\altera_mf.v	/^        real    clk3_div_factor_real;$/;"	r
clk3_divide_by	.\altera_mf.v	/^    parameter clk3_divide_by                       = 0;$/;"	c
clk3_divide_by	.\altera_mf.v	/^    parameter clk3_divide_by                       = 1;$/;"	c
clk3_divide_by	.\altera_mf.v	/^    parameter clk3_divide_by = 1;$/;"	c
clk3_divide_by	.\altera_mf.v	/^parameter   clk3_divide_by          = 1;$/;"	c
clk3_duty_cycle	.\altera_mf.v	/^    parameter clk3_duty_cycle                      = 50;$/;"	c
clk3_duty_cycle	.\altera_mf.v	/^    parameter clk3_duty_cycle = 50;$/;"	c
clk3_duty_cycle	.\altera_mf.v	/^parameter   clk3_duty_cycle         = 50;$/;"	c
clk3_mult	.\altera_mf.v	/^        input clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	p
clk3_mult	.\altera_mf.v	/^        integer clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	r
clk3_multiply_by	.\altera_mf.v	/^    parameter clk3_multiply_by                     = 0;$/;"	c
clk3_multiply_by	.\altera_mf.v	/^    parameter clk3_multiply_by                     = 1;$/;"	c
clk3_multiply_by	.\altera_mf.v	/^    parameter clk3_multiply_by = 1;$/;"	c
clk3_multiply_by	.\altera_mf.v	/^parameter   clk3_multiply_by        = 1;$/;"	c
clk3_output_frequency	.\altera_mf.v	/^    parameter clk3_output_frequency                = 0;$/;"	c
clk3_phase_shift	.\altera_mf.v	/^    parameter clk3_phase_shift                     = "0";$/;"	c
clk3_phase_shift	.\altera_mf.v	/^    parameter clk3_phase_shift = 0;$/;"	c
clk3_phase_shift	.\altera_mf.v	/^parameter   clk3_phase_shift        = "0";$/;"	c
clk3_phase_shift_num	.\altera_mf.v	/^    parameter clk3_phase_shift_num = 0;$/;"	c
clk3_time_delay	.\altera_mf.v	/^    parameter clk3_time_delay = 0;$/;"	c
clk3_time_delay	.\altera_mf.v	/^parameter   clk3_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk3_tmp	.\altera_mf.v	/^    wire clk3_tmp;$/;"	n
clk3_use_even_counter_mode	.\altera_mf.v	/^    parameter clk3_use_even_counter_mode = "off";$/;"	c
clk3_use_even_counter_mode	.\altera_mf.v	/^parameter   clk3_use_even_counter_mode    = "OFF";$/;"	c
clk3_use_even_counter_value	.\altera_mf.v	/^    parameter clk3_use_even_counter_value = "off";$/;"	c
clk3_use_even_counter_value	.\altera_mf.v	/^parameter   clk3_use_even_counter_value   = "OFF";$/;"	c
clk3_used	.\altera_mf.v	/^        input clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	p
clk3_used	.\altera_mf.v	/^        reg[160:1] clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	r
clk4	.\altera_mf.v	/^    wire clk4;$/;"	n
clk4_counter	.\altera_mf.v	/^    parameter clk4_counter = "c4";$/;"	c
clk4_counter	.\altera_mf.v	/^    parameter clk4_counter = "l0";$/;"	c
clk4_counter	.\altera_mf.v	/^    parameter clk4_counter = "unused";$/;"	c
clk4_counter	.\altera_mf.v	/^parameter   clk4_counter        = "l0" ;$/;"	c
clk4_div	.\altera_mf.v	/^        input clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	p
clk4_div	.\altera_mf.v	/^        integer clk0_div,  clk1_div,  clk2_div,  clk3_div,  clk4_div;$/;"	r
clk4_div_factor_diff	.\altera_mf.v	/^        real    clk4_div_factor_diff;$/;"	r
clk4_div_factor_int	.\altera_mf.v	/^        integer clk4_div_factor_int;$/;"	r
clk4_div_factor_real	.\altera_mf.v	/^        real    clk4_div_factor_real;$/;"	r
clk4_divide_by	.\altera_mf.v	/^    parameter clk4_divide_by                       = 0;$/;"	c
clk4_divide_by	.\altera_mf.v	/^    parameter clk4_divide_by                       = 1;$/;"	c
clk4_divide_by	.\altera_mf.v	/^    parameter clk4_divide_by = 1;$/;"	c
clk4_divide_by	.\altera_mf.v	/^parameter   clk4_divide_by          = 1;$/;"	c
clk4_duty_cycle	.\altera_mf.v	/^    parameter clk4_duty_cycle                      = 50;$/;"	c
clk4_duty_cycle	.\altera_mf.v	/^    parameter clk4_duty_cycle = 50;$/;"	c
clk4_duty_cycle	.\altera_mf.v	/^parameter   clk4_duty_cycle         = 50;$/;"	c
clk4_mult	.\altera_mf.v	/^        input clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	p
clk4_mult	.\altera_mf.v	/^        integer clk0_mult, clk1_mult, clk2_mult, clk3_mult, clk4_mult;$/;"	r
clk4_multiply_by	.\altera_mf.v	/^    parameter clk4_multiply_by                     = 0;$/;"	c
clk4_multiply_by	.\altera_mf.v	/^    parameter clk4_multiply_by                     = 1;$/;"	c
clk4_multiply_by	.\altera_mf.v	/^    parameter clk4_multiply_by = 1;$/;"	c
clk4_multiply_by	.\altera_mf.v	/^parameter   clk4_multiply_by        = 1;$/;"	c
clk4_output_frequency	.\altera_mf.v	/^    parameter clk4_output_frequency                = 0;$/;"	c
clk4_phase_shift	.\altera_mf.v	/^    parameter clk4_phase_shift                     = "0";$/;"	c
clk4_phase_shift	.\altera_mf.v	/^    parameter clk4_phase_shift = 0;$/;"	c
clk4_phase_shift	.\altera_mf.v	/^parameter   clk4_phase_shift        = "0";$/;"	c
clk4_phase_shift_num	.\altera_mf.v	/^    parameter clk4_phase_shift_num = 0;$/;"	c
clk4_time_delay	.\altera_mf.v	/^    parameter clk4_time_delay = 0;$/;"	c
clk4_time_delay	.\altera_mf.v	/^parameter   clk4_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk4_tmp	.\altera_mf.v	/^    wire clk4_tmp;$/;"	n
clk4_use_even_counter_mode	.\altera_mf.v	/^    parameter clk4_use_even_counter_mode = "off";$/;"	c
clk4_use_even_counter_mode	.\altera_mf.v	/^parameter   clk4_use_even_counter_mode    = "OFF";$/;"	c
clk4_use_even_counter_value	.\altera_mf.v	/^    parameter clk4_use_even_counter_value = "off";$/;"	c
clk4_use_even_counter_value	.\altera_mf.v	/^parameter   clk4_use_even_counter_value   = "OFF";$/;"	c
clk4_used	.\altera_mf.v	/^        input clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	p
clk4_used	.\altera_mf.v	/^        reg[160:1] clk0_used,  clk1_used,  clk2_used,  clk3_used,  clk4_used;$/;"	r
clk5	.\altera_mf.v	/^    wire clk5;$/;"	n
clk5_counter	.\altera_mf.v	/^    parameter clk5_counter = "c5";$/;"	c
clk5_counter	.\altera_mf.v	/^    parameter clk5_counter = "l1";$/;"	c
clk5_counter	.\altera_mf.v	/^    parameter clk5_counter = "unused";$/;"	c
clk5_counter	.\altera_mf.v	/^parameter   clk5_counter        = "l1" ;$/;"	c
clk5_div	.\altera_mf.v	/^        input clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	p
clk5_div	.\altera_mf.v	/^        integer clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	r
clk5_div_factor_diff	.\altera_mf.v	/^        real    clk5_div_factor_diff;$/;"	r
clk5_div_factor_int	.\altera_mf.v	/^        integer clk5_div_factor_int;$/;"	r
clk5_div_factor_real	.\altera_mf.v	/^        real    clk5_div_factor_real;$/;"	r
clk5_divide_by	.\altera_mf.v	/^    parameter clk5_divide_by                       = 0;$/;"	c
clk5_divide_by	.\altera_mf.v	/^    parameter clk5_divide_by                       = 1;$/;"	c
clk5_divide_by	.\altera_mf.v	/^    parameter clk5_divide_by = 1;$/;"	c
clk5_divide_by	.\altera_mf.v	/^parameter   clk5_divide_by          = 1;$/;"	c
clk5_duty_cycle	.\altera_mf.v	/^    parameter clk5_duty_cycle                      = 50;$/;"	c
clk5_duty_cycle	.\altera_mf.v	/^    parameter clk5_duty_cycle = 50;$/;"	c
clk5_duty_cycle	.\altera_mf.v	/^parameter   clk5_duty_cycle         = 50;$/;"	c
clk5_mult	.\altera_mf.v	/^        input clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	p
clk5_mult	.\altera_mf.v	/^        integer clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	r
clk5_multiply_by	.\altera_mf.v	/^    parameter clk5_multiply_by                     = 0;$/;"	c
clk5_multiply_by	.\altera_mf.v	/^    parameter clk5_multiply_by                     = 1;$/;"	c
clk5_multiply_by	.\altera_mf.v	/^    parameter clk5_multiply_by = 1;$/;"	c
clk5_multiply_by	.\altera_mf.v	/^parameter   clk5_multiply_by        = 1;$/;"	c
clk5_output_frequency	.\altera_mf.v	/^    parameter clk5_output_frequency                = 0;$/;"	c
clk5_phase_shift	.\altera_mf.v	/^    parameter clk5_phase_shift                     = "0";$/;"	c
clk5_phase_shift	.\altera_mf.v	/^    parameter clk5_phase_shift = 0;$/;"	c
clk5_phase_shift	.\altera_mf.v	/^parameter   clk5_phase_shift        = "0";$/;"	c
clk5_time_delay	.\altera_mf.v	/^    parameter clk5_time_delay = 0;$/;"	c
clk5_time_delay	.\altera_mf.v	/^parameter   clk5_time_delay         = "0";  \/\/ For stratix pll use only$/;"	c
clk5_tmp	.\altera_mf.v	/^    wire clk5_tmp;$/;"	n
clk5_use_even_counter_mode	.\altera_mf.v	/^    parameter clk5_use_even_counter_mode = "off";$/;"	c
clk5_use_even_counter_mode	.\altera_mf.v	/^parameter   clk5_use_even_counter_mode    = "OFF";$/;"	c
clk5_use_even_counter_value	.\altera_mf.v	/^    parameter clk5_use_even_counter_value = "off";$/;"	c
clk5_use_even_counter_value	.\altera_mf.v	/^parameter   clk5_use_even_counter_value   = "OFF";$/;"	c
clk5_used	.\altera_mf.v	/^        input clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	p
clk5_used	.\altera_mf.v	/^        reg[160:1] clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	r
clk6_counter	.\altera_mf.v	/^    parameter clk6_counter = "unused";$/;"	c
clk6_counter	.\altera_mf.v	/^parameter   clk6_counter        = "c6" ;$/;"	c
clk6_div	.\altera_mf.v	/^        input clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	p
clk6_div	.\altera_mf.v	/^        integer clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	r
clk6_div_factor_diff	.\altera_mf.v	/^        real    clk6_div_factor_diff;$/;"	r
clk6_div_factor_int	.\altera_mf.v	/^        integer clk6_div_factor_int;$/;"	r
clk6_div_factor_real	.\altera_mf.v	/^        real    clk6_div_factor_real;$/;"	r
clk6_divide_by	.\altera_mf.v	/^    parameter clk6_divide_by                       = 0;$/;"	c
clk6_divide_by	.\altera_mf.v	/^parameter   clk6_divide_by          = 1;$/;"	c
clk6_duty_cycle	.\altera_mf.v	/^    parameter clk6_duty_cycle                      = 50;$/;"	c
clk6_duty_cycle	.\altera_mf.v	/^parameter   clk6_duty_cycle         = 50;$/;"	c
clk6_mult	.\altera_mf.v	/^        input clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	p
clk6_mult	.\altera_mf.v	/^        integer clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	r
clk6_multiply_by	.\altera_mf.v	/^    parameter clk6_multiply_by                     = 0;$/;"	c
clk6_multiply_by	.\altera_mf.v	/^parameter   clk6_multiply_by        = 1;$/;"	c
clk6_output_frequency	.\altera_mf.v	/^    parameter clk6_output_frequency                = 0;$/;"	c
clk6_phase_shift	.\altera_mf.v	/^    parameter clk6_phase_shift                     = "0";$/;"	c
clk6_phase_shift	.\altera_mf.v	/^parameter   clk6_phase_shift        = "0";$/;"	c
clk6_use_even_counter_mode	.\altera_mf.v	/^    parameter clk6_use_even_counter_mode = "off";$/;"	c
clk6_use_even_counter_mode	.\altera_mf.v	/^parameter   clk6_use_even_counter_mode    = "OFF";$/;"	c
clk6_use_even_counter_value	.\altera_mf.v	/^    parameter clk6_use_even_counter_value = "off";$/;"	c
clk6_use_even_counter_value	.\altera_mf.v	/^parameter   clk6_use_even_counter_value   = "OFF";$/;"	c
clk6_used	.\altera_mf.v	/^        input clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	p
clk6_used	.\altera_mf.v	/^        reg[160:1] clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	r
clk7_counter	.\altera_mf.v	/^    parameter clk7_counter = "unused";$/;"	c
clk7_counter	.\altera_mf.v	/^parameter   clk7_counter        = "c7" ;$/;"	c
clk7_div	.\altera_mf.v	/^        input clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	p
clk7_div	.\altera_mf.v	/^        integer clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	r
clk7_div_factor_diff	.\altera_mf.v	/^        real    clk7_div_factor_diff;$/;"	r
clk7_div_factor_int	.\altera_mf.v	/^        integer clk7_div_factor_int;$/;"	r
clk7_div_factor_real	.\altera_mf.v	/^        real    clk7_div_factor_real;$/;"	r
clk7_divide_by	.\altera_mf.v	/^    parameter clk7_divide_by                       = 0;$/;"	c
clk7_divide_by	.\altera_mf.v	/^parameter   clk7_divide_by          = 1;$/;"	c
clk7_duty_cycle	.\altera_mf.v	/^    parameter clk7_duty_cycle                      = 50;$/;"	c
clk7_duty_cycle	.\altera_mf.v	/^parameter   clk7_duty_cycle         = 50;$/;"	c
clk7_mult	.\altera_mf.v	/^        input clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	p
clk7_mult	.\altera_mf.v	/^        integer clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	r
clk7_multiply_by	.\altera_mf.v	/^    parameter clk7_multiply_by                     = 0;$/;"	c
clk7_multiply_by	.\altera_mf.v	/^parameter   clk7_multiply_by        = 1;$/;"	c
clk7_output_frequency	.\altera_mf.v	/^    parameter clk7_output_frequency                = 0;$/;"	c
clk7_phase_shift	.\altera_mf.v	/^    parameter clk7_phase_shift                     = "0";$/;"	c
clk7_phase_shift	.\altera_mf.v	/^parameter   clk7_phase_shift        = "0";$/;"	c
clk7_use_even_counter_mode	.\altera_mf.v	/^    parameter clk7_use_even_counter_mode = "off";$/;"	c
clk7_use_even_counter_mode	.\altera_mf.v	/^parameter   clk7_use_even_counter_mode    = "OFF";$/;"	c
clk7_use_even_counter_value	.\altera_mf.v	/^    parameter clk7_use_even_counter_value = "off";$/;"	c
clk7_use_even_counter_value	.\altera_mf.v	/^parameter   clk7_use_even_counter_value   = "OFF";$/;"	c
clk7_used	.\altera_mf.v	/^        input clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	p
clk7_used	.\altera_mf.v	/^        reg[160:1] clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	r
clk8_counter	.\altera_mf.v	/^    parameter clk8_counter = "unused";$/;"	c
clk8_counter	.\altera_mf.v	/^parameter   clk8_counter        = "c8" ;$/;"	c
clk8_div	.\altera_mf.v	/^        input clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	p
clk8_div	.\altera_mf.v	/^        integer clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	r
clk8_div_factor_diff	.\altera_mf.v	/^        real    clk8_div_factor_diff;$/;"	r
clk8_div_factor_int	.\altera_mf.v	/^        integer clk8_div_factor_int;$/;"	r
clk8_div_factor_real	.\altera_mf.v	/^        real    clk8_div_factor_real;$/;"	r
clk8_divide_by	.\altera_mf.v	/^    parameter clk8_divide_by                       = 0;$/;"	c
clk8_divide_by	.\altera_mf.v	/^parameter   clk8_divide_by          = 1;$/;"	c
clk8_duty_cycle	.\altera_mf.v	/^    parameter clk8_duty_cycle                      = 50;$/;"	c
clk8_duty_cycle	.\altera_mf.v	/^parameter   clk8_duty_cycle         = 50;$/;"	c
clk8_mult	.\altera_mf.v	/^        input clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	p
clk8_mult	.\altera_mf.v	/^        integer clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	r
clk8_multiply_by	.\altera_mf.v	/^    parameter clk8_multiply_by                     = 0;$/;"	c
clk8_multiply_by	.\altera_mf.v	/^parameter   clk8_multiply_by        = 1;$/;"	c
clk8_output_frequency	.\altera_mf.v	/^    parameter clk8_output_frequency                = 0;$/;"	c
clk8_phase_shift	.\altera_mf.v	/^    parameter clk8_phase_shift                     = "0";$/;"	c
clk8_phase_shift	.\altera_mf.v	/^parameter   clk8_phase_shift        = "0";$/;"	c
clk8_use_even_counter_mode	.\altera_mf.v	/^    parameter clk8_use_even_counter_mode = "off";$/;"	c
clk8_use_even_counter_mode	.\altera_mf.v	/^parameter   clk8_use_even_counter_mode    = "OFF";$/;"	c
clk8_use_even_counter_value	.\altera_mf.v	/^    parameter clk8_use_even_counter_value = "off";$/;"	c
clk8_use_even_counter_value	.\altera_mf.v	/^parameter   clk8_use_even_counter_value   = "OFF";$/;"	c
clk8_used	.\altera_mf.v	/^        input clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	p
clk8_used	.\altera_mf.v	/^        reg[160:1] clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	r
clk9_counter	.\altera_mf.v	/^    parameter clk9_counter = "unused";$/;"	c
clk9_counter	.\altera_mf.v	/^parameter   clk9_counter        = "c9" ;$/;"	c
clk9_div	.\altera_mf.v	/^        input clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	p
clk9_div	.\altera_mf.v	/^        integer clk5_div,  clk6_div,  clk7_div,  clk8_div,  clk9_div;$/;"	r
clk9_div_factor_diff	.\altera_mf.v	/^        real    clk9_div_factor_diff;$/;"	r
clk9_div_factor_int	.\altera_mf.v	/^        integer clk9_div_factor_int;$/;"	r
clk9_div_factor_real	.\altera_mf.v	/^        real    clk9_div_factor_real;$/;"	r
clk9_divide_by	.\altera_mf.v	/^    parameter clk9_divide_by                       = 0;$/;"	c
clk9_divide_by	.\altera_mf.v	/^parameter   clk9_divide_by          = 1;$/;"	c
clk9_duty_cycle	.\altera_mf.v	/^    parameter clk9_duty_cycle                      = 50;$/;"	c
clk9_duty_cycle	.\altera_mf.v	/^parameter   clk9_duty_cycle         = 50;$/;"	c
clk9_mult	.\altera_mf.v	/^        input clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	p
clk9_mult	.\altera_mf.v	/^        integer clk5_mult, clk6_mult, clk7_mult, clk8_mult, clk9_mult;$/;"	r
clk9_multiply_by	.\altera_mf.v	/^    parameter clk9_multiply_by                     = 0;$/;"	c
clk9_multiply_by	.\altera_mf.v	/^parameter   clk9_multiply_by        = 1;$/;"	c
clk9_output_frequency	.\altera_mf.v	/^    parameter clk9_output_frequency                = 0;$/;"	c
clk9_phase_shift	.\altera_mf.v	/^    parameter clk9_phase_shift                     = "0";$/;"	c
clk9_phase_shift	.\altera_mf.v	/^parameter   clk9_phase_shift        = "0";$/;"	c
clk9_use_even_counter_mode	.\altera_mf.v	/^    parameter clk9_use_even_counter_mode = "off";$/;"	c
clk9_use_even_counter_mode	.\altera_mf.v	/^parameter   clk9_use_even_counter_mode    = "OFF";$/;"	c
clk9_use_even_counter_value	.\altera_mf.v	/^    parameter clk9_use_even_counter_value = "off";$/;"	c
clk9_use_even_counter_value	.\altera_mf.v	/^parameter   clk9_use_even_counter_value   = "OFF";$/;"	c
clk9_used	.\altera_mf.v	/^        input clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	p
clk9_used	.\altera_mf.v	/^        reg[160:1] clk5_used,  clk6_used,  clk7_used,  clk8_used,  clk9_used;$/;"	r
clk_bps	.\uart_rx.v	/^input clk_bps;$/;"	p
clk_bps	.\uart_speed_select.v	/^output clk_bps; \/\/ clk_bps的高电平为接收或者发送数据位的中间采样点$/;"	p
clk_bps	.\uart_tx.v	/^input clk_bps;$/;"	p
clk_bps1	.\uart_top.v	/^wire                clk_bps1;$/;"	n
clk_bps2	.\uart_top.v	/^wire                clk_bps2;$/;"	n
clk_bps_r	.\uart_speed_select.v	/^reg clk_bps_r;          \/\/波特率时钟寄存器$/;"	r
clk_check	.\altera_mf.v	/^reg clk_check;$/;"	r
clk_cnt0	.\altera_mf.v	/^integer clk_cnt0;$/;"	r
clk_cnt1	.\altera_mf.v	/^integer clk_cnt1;$/;"	r
clk_cnt2	.\altera_mf.v	/^integer clk_cnt2;$/;"	r
clk_cnt_ext	.\altera_mf.v	/^integer clk_cnt_ext;$/;"	r
clk_div	.\omsp_timerA.v	/^reg [2:0] clk_div;$/;"	r
clk_divide	.\altera_mf.v	/^    input clk_divide, clk_mult, M, N;$/;"	p
clk_divide	.\altera_mf.v	/^    integer clk_divide, clk_mult, M, N;$/;"	r
clk_divide_by	.\altera_mf.v	/^parameter clk_divide_by =1;$/;"	c
clk_divisor	.\altera_mf.v	/^    parameter    clk_divisor    =    1;$/;"	c
clk_en	.\altera_mf.v	/^    input  clk_en;$/;"	p
clk_en	.\altera_mf.v	/^    input clk_en;$/;"	p
clk_en	.\altera_mf.v	/^    tri1 clk_en;$/;"	n
clk_in0	.\omsp_clock_mux.v	/^input          clk_in0;        \/\/ Clock input 0$/;"	p
clk_in0_inv	.\omsp_clock_mux.v	/^wire clk_in0_inv;$/;"	n
clk_in0_scan_fix_inv	.\omsp_clock_mux.v	/^wire clk_in0_scan_fix_inv;$/;"	n
clk_in1	.\omsp_clock_mux.v	/^input          clk_in1;        \/\/ Clock input 1$/;"	p
clk_in1_inv	.\omsp_clock_mux.v	/^wire clk_in1_inv;$/;"	n
clk_in1_scan_fix_inv	.\omsp_clock_mux.v	/^wire clk_in1_scan_fix_inv;$/;"	n
clk_last_valid_value	.\altera_mf.v	/^    reg clk_last_valid_value;$/;"	r
clk_last_value	.\altera_mf.v	/^    reg clk_last_value;$/;"	r
clk_last_value	.\altera_mf.v	/^reg clk_last_value;$/;"	r
clk_mult	.\altera_mf.v	/^    input clk_divide, clk_mult, M, N;$/;"	p
clk_mult	.\altera_mf.v	/^    integer clk_divide, clk_mult, M, N;$/;"	r
clk_num	.\altera_mf.v	/^    reg [8*6:1] clk_num[0:4];$/;"	r
clk_num	.\altera_mf.v	/^    reg [8*6:1] clk_num[0:9];$/;"	r
clk_out	.\altera_mf.v	/^    wire [4:0] clk_out;$/;"	n
clk_out	.\altera_mf.v	/^    wire [5:0] clk_out;$/;"	n
clk_out	.\altera_mf.v	/^    wire [9:0] clk_out;$/;"	n
clk_out	.\omsp_clock_mux.v	/^output         clk_out;        \/\/ Clock output$/;"	p
clk_out_pfd	.\altera_mf.v	/^    wire [4:0] clk_tmp, clk_out_pfd;$/;"	n
clk_out_pfd	.\altera_mf.v	/^    wire [9:0] clk_tmp, clk_out_pfd;$/;"	n
clk_per_tolerance	.\altera_mf.v	/^integer clk_per_tolerance;$/;"	r
clk_period	.\altera_mf.v	/^    real clk_period, last_clk_period;$/;"	r
clk_src_en	.\omsp_watchdog.v	/^wire  clk_src_en = wdtctl[2] ? aclk_en : smclk_en;$/;"	n
clk_src_is_pll	.\altera_mf.v	/^    parameter clk_src_is_pll = "off";$/;"	c
clk_time_delay	.\altera_mf.v	/^    input clk_time_delay, m_time_delay, n_time_delay;$/;"	p
clk_time_delay	.\altera_mf.v	/^    integer clk_time_delay, m_time_delay, n_time_delay;$/;"	r
clk_tmp	.\altera_mf.v	/^    wire [4:0] clk_tmp, clk_out_pfd;$/;"	n
clk_tmp	.\altera_mf.v	/^    wire [5:0] clk_tmp;$/;"	n
clk_tmp	.\altera_mf.v	/^    wire [9:0] clk_tmp, clk_out_pfd;$/;"	n
clk_tmp	.\altera_mf.v	/^wire[9:0] clk_tmp;$/;"	n
clk_wire	.\altera_mf.v	/^wire[9:0] clk_wire;$/;"	n
clkbad	.\altera_mf.v	/^    output [1:0] clkbad;$/;"	p
clkbad	.\altera_mf.v	/^output        [1:0] clkbad;$/;"	p
clkbad_wire	.\altera_mf.v	/^wire[1:0] clkbad_wire;$/;"	n
clken	.\altera_mf.v	/^    input clken;                    \/\/ Clock enable for the clock port$/;"	p
clken	.\altera_mf.v	/^    input clken;                \/\/ Default = 1$/;"	p
clken	.\altera_mf.v	/^    tri1 clken;$/;"	n
clken	.\ram16x512.v	/^	input	  clken;$/;"	p
clken	.\ram16x512.v	/^	tri1	  clken;$/;"	n
clken	.\rom16x2048.v	/^	input	  clken;$/;"	p
clken	.\rom16x2048.v	/^	tri1	  clken;$/;"	n
clken_int	.\altera_mf.v	/^    tri1 clken_int;$/;"	n
clkena	.\altera_mf.v	/^    input [5:0] clkena;$/;"	p
clkena	.\altera_mf.v	/^input       [5:0] clkena;$/;"	p
clkena0_ipd	.\altera_mf.v	/^    wire clkena0_ipd;$/;"	n
clkena1_ipd	.\altera_mf.v	/^    wire clkena1_ipd;$/;"	n
clkena2_ipd	.\altera_mf.v	/^    wire clkena2_ipd;$/;"	n
clkena3_ipd	.\altera_mf.v	/^    wire clkena3_ipd;$/;"	n
clkena4_ipd	.\altera_mf.v	/^    wire clkena4_ipd;$/;"	n
clkena5_ipd	.\altera_mf.v	/^    wire clkena5_ipd;$/;"	n
clkena_pullup	.\altera_mf.v	/^tri1 [5:0] clkena_pullup;$/;"	n
clkin	.\altera_mf.v	/^input clkin;$/;"	p
clkloss	.\altera_mf.v	/^    output clkloss;$/;"	p
clkloss	.\altera_mf.v	/^output        clkloss;$/;"	p
clkloss_tmp	.\altera_mf.v	/^    reg clkloss_tmp;$/;"	r
clkloss_wire	.\altera_mf.v	/^wire clkloss_wire;$/;"	n
clkout_tmp	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] clkout_tmp;$/;"	r
clkswitch	.\altera_mf.v	/^    input clkswitch;$/;"	p
clkswitch	.\altera_mf.v	/^input       clkswitch;$/;"	p
clkswitch_ipd	.\altera_mf.v	/^    wire clkswitch_ipd;$/;"	n
clkswitch_pulldown	.\altera_mf.v	/^tri0 clkswitch_pulldown;$/;"	n
clock	.\altera_mf.v	/^        input   clock;$/;"	p
clock	.\altera_mf.v	/^    input  clock;$/;"	p
clock	.\altera_mf.v	/^    input clock;                    \/\/ Positive-edge triggered clock$/;"	p
clock	.\altera_mf.v	/^    input clock;                \/\/ Required port$/;"	p
clock	.\altera_mf.v	/^    input clock;$/;"	p
clock	.\altera_mf.v	/^    tri1 clock;$/;"	n
clock	.\ram16x512.v	/^	input	  clock;$/;"	p
clock	.\ram16x512.v	/^	tri1	  clock;$/;"	n
clock	.\rom16x2048.v	/^	input	  clock;$/;"	p
clock	.\rom16x2048.v	/^	tri1	  clock;$/;"	n
clock0	.\altera_mf.v	/^    input  clock0;$/;"	p
clock0	.\altera_mf.v	/^    input clock0;$/;"	p
clock0	.\altera_mf.v	/^    tri1 clock0;$/;"	n
clock0	.\altera_mf.v	/^output clock0;$/;"	p
clock0	.\altera_mf.v	/^reg clock0;$/;"	r
clock0_boost	.\altera_mf.v	/^parameter clock0_boost = 1;$/;"	c
clock0_divide	.\altera_mf.v	/^parameter clock0_divide = 1;$/;"	c
clock0_settings	.\altera_mf.v	/^parameter clock0_settings = "UNUSED";$/;"	c
clock0_time_delay	.\altera_mf.v	/^parameter clock0_time_delay = "0";$/;"	c
clock1	.\altera_mf.v	/^    input  clock1;$/;"	p
clock1	.\altera_mf.v	/^    input clock1;$/;"	p
clock1	.\altera_mf.v	/^output clock1;$/;"	p
clock1	.\altera_mf.v	/^reg clock1;$/;"	r
clock1_boost	.\altera_mf.v	/^parameter clock1_boost = 1;$/;"	c
clock1_divide	.\altera_mf.v	/^parameter clock1_divide = 1;$/;"	c
clock1_settings	.\altera_mf.v	/^parameter clock1_settings = "UNUSED";$/;"	c
clock1_time_delay	.\altera_mf.v	/^parameter clock1_time_delay = "0";$/;"	c
clock2	.\altera_mf.v	/^    input clock2;$/;"	p
clock2	.\altera_mf.v	/^output clock2;$/;"	p
clock2	.\altera_mf.v	/^reg clock2;$/;"	r
clock2_boost	.\altera_mf.v	/^parameter clock2_boost = 1;$/;"	c
clock2_divide	.\altera_mf.v	/^parameter clock2_divide = 1;$/;"	c
clock2_settings	.\altera_mf.v	/^parameter clock2_settings = "UNUSED";$/;"	c
clock2_time_delay	.\altera_mf.v	/^parameter clock2_time_delay = "0";$/;"	c
clock3	.\altera_mf.v	/^    input clock3;$/;"	p
clock_enable_core_a	.\altera_mf.v	/^    parameter clock_enable_core_a = "USE_INPUT_CLKEN";$/;"	c
clock_enable_core_b	.\altera_mf.v	/^    parameter clock_enable_core_b = "USE_INPUT_CLKEN";$/;"	c
clock_enable_input_a	.\altera_mf.v	/^    parameter clock_enable_input_a  = "NORMAL";$/;"	c
clock_enable_input_b	.\altera_mf.v	/^    parameter clock_enable_input_b  = "NORMAL";$/;"	c
clock_enable_output_a	.\altera_mf.v	/^    parameter clock_enable_output_a = "NORMAL";$/;"	c
clock_enable_output_b	.\altera_mf.v	/^    parameter clock_enable_output_b = "NORMAL";$/;"	c
clock_ext	.\altera_mf.v	/^output clock_ext;$/;"	p
clock_ext	.\altera_mf.v	/^reg clock_ext;$/;"	r
clock_ext_boost	.\altera_mf.v	/^parameter clock_ext_boost = 1;$/;"	c
clock_ext_divide	.\altera_mf.v	/^parameter clock_ext_divide = 1;$/;"	c
clock_ext_settings	.\altera_mf.v	/^parameter clock_ext_settings = "UNUSED";$/;"	c
clock_ext_time_delay	.\altera_mf.v	/^parameter clock_ext_time_delay = "0";$/;"	c
clock_tck	.\altera_mf.v	/^    task clock_tck;$/;"	t
clocken0	.\altera_mf.v	/^    input  clocken0;$/;"	p
clocken0	.\altera_mf.v	/^    tri1 clocken0;$/;"	n
clocken1	.\altera_mf.v	/^    input  clocken1;$/;"	p
clocken1	.\altera_mf.v	/^    tri1 clocken1;$/;"	n
clocken2	.\altera_mf.v	/^    input  clocken2;$/;"	p
clocken2	.\altera_mf.v	/^    tri1 clocken2;$/;"	n
clocken3	.\altera_mf.v	/^    input  clocken3;$/;"	p
clocken3	.\altera_mf.v	/^    tri1 clocken3;$/;"	n
clocks_are_synchronized	.\altera_mf.v	/^    parameter clocks_are_synchronized = "FALSE";$/;"	c
closest_vco_step_value	.\altera_mf.v	/^        integer closest_vco_step_value;$/;"	r
clr	.\altera_mf.v	/^    input    clr;$/;"	p
clrn	.\altera_mf.v	/^    input    clrn;$/;"	p
clrn	.\altera_mf.v	/^    input clrn;$/;"	p
clrn	.\altera_mf.v	/^    tri1 prn, clrn, ena;$/;"	n
cmd_valid	.\omsp_dbg_i2c.v	/^wire cmd_valid   = (dbg_state==RX_CMD)     & shift_rx_data_done;$/;"	n
cmd_valid	.\omsp_dbg_uart.v	/^wire cmd_valid = (uart_state==RX_CMD) & xfer_done;$/;"	n
cnt	.\altera_mf.v	/^    reg [width-1:0] cnt;$/;"	r
cnt	.\altera_mf.v	/^reg[4:0] cnt;$/;"	r
cnt	.\tb_openMSP430_fpga.v	/^reg [7:0] cnt;$/;"	r
cnt	.\uart_speed_select.v	/^reg[12:0] cnt;          \/\/分频计数$/;"	r
cnt_en	.\altera_mf.v	/^    input  cnt_en;$/;"	p
cnt_en	.\altera_mf.v	/^    tri1 cnt_en;$/;"	n
cnt_mod	.\altera_mf.v	/^    integer cnt_mod;$/;"	r
cnt_mod_r	.\altera_mf.v	/^    integer cnt_mod_r;$/;"	r
cntr_e0_delay	.\altera_mf.v	/^    wire [31:0] cntr_e0_delay;$/;"	n
cntr_e0_initial	.\altera_mf.v	/^    wire [31:0] cntr_e0_initial;$/;"	n
cntr_e1_delay	.\altera_mf.v	/^    wire [31:0] cntr_e1_delay;$/;"	n
cntr_e1_initial	.\altera_mf.v	/^    wire [31:0] cntr_e1_initial;$/;"	n
cntr_e2_delay	.\altera_mf.v	/^    wire [31:0] cntr_e2_delay;$/;"	n
cntr_e2_initial	.\altera_mf.v	/^    wire [31:0] cntr_e2_initial;$/;"	n
cntr_e3_delay	.\altera_mf.v	/^    wire [31:0] cntr_e3_delay;$/;"	n
cntr_e3_initial	.\altera_mf.v	/^    wire [31:0] cntr_e3_initial;$/;"	n
cntr_name	.\altera_mf.v	/^    input [8*2:1] cntr_name;$/;"	p
cntrl1	.\template_periph_16b.v	/^reg  [15:0] cntrl1;$/;"	r
cntrl1	.\template_periph_8b.v	/^reg  [7:0] cntrl1;$/;"	r
cntrl1_nxt	.\template_periph_8b.v	/^wire [7:0] cntrl1_nxt = CNTRL1[0] ? per_din[15:8]     : per_din[7:0];$/;"	n
cntrl1_rd	.\template_periph_16b.v	/^wire [15:0] cntrl1_rd  = cntrl1  & {16{reg_rd[CNTRL1]}};$/;"	n
cntrl1_rd	.\template_periph_8b.v	/^wire [15:0] cntrl1_rd   = {8'h00, (cntrl1  & {8{reg_rd[CNTRL1]}})}  << (8 & {4{CNTRL1[0]}});$/;"	n
cntrl1_wr	.\template_periph_16b.v	/^wire        cntrl1_wr = reg_wr[CNTRL1];$/;"	n
cntrl1_wr	.\template_periph_8b.v	/^wire       cntrl1_wr  = CNTRL1[0] ? reg_hi_wr[CNTRL1] : reg_lo_wr[CNTRL1];$/;"	n
cntrl2	.\template_periph_16b.v	/^reg  [15:0] cntrl2;$/;"	r
cntrl2	.\template_periph_8b.v	/^reg  [7:0] cntrl2;$/;"	r
cntrl2_nxt	.\template_periph_8b.v	/^wire [7:0] cntrl2_nxt = CNTRL2[0] ? per_din[15:8]     : per_din[7:0];$/;"	n
cntrl2_rd	.\template_periph_16b.v	/^wire [15:0] cntrl2_rd  = cntrl2  & {16{reg_rd[CNTRL2]}};$/;"	n
cntrl2_rd	.\template_periph_8b.v	/^wire [15:0] cntrl2_rd   = {8'h00, (cntrl2  & {8{reg_rd[CNTRL2]}})}  << (8 & {4{CNTRL2[0]}});$/;"	n
cntrl2_wr	.\template_periph_16b.v	/^wire        cntrl2_wr = reg_wr[CNTRL2];$/;"	n
cntrl2_wr	.\template_periph_8b.v	/^wire       cntrl2_wr  = CNTRL2[0] ? reg_hi_wr[CNTRL2] : reg_lo_wr[CNTRL2];$/;"	n
cntrl3	.\template_periph_16b.v	/^reg  [15:0] cntrl3;$/;"	r
cntrl3	.\template_periph_8b.v	/^reg  [7:0] cntrl3;$/;"	r
cntrl3_nxt	.\template_periph_8b.v	/^wire [7:0] cntrl3_nxt = CNTRL3[0] ? per_din[15:8]     : per_din[7:0];$/;"	n
cntrl3_rd	.\template_periph_16b.v	/^wire [15:0] cntrl3_rd  = cntrl3  & {16{reg_rd[CNTRL3]}};$/;"	n
cntrl3_rd	.\template_periph_8b.v	/^wire [15:0] cntrl3_rd   = {8'h00, (cntrl3  & {8{reg_rd[CNTRL3]}})}  << (8 & {4{CNTRL3[0]}});$/;"	n
cntrl3_wr	.\template_periph_16b.v	/^wire        cntrl3_wr = reg_wr[CNTRL3];$/;"	n
cntrl3_wr	.\template_periph_8b.v	/^wire       cntrl3_wr  = CNTRL3[0] ? reg_hi_wr[CNTRL3] : reg_lo_wr[CNTRL3];$/;"	n
cntrl4	.\template_periph_16b.v	/^reg  [15:0] cntrl4;$/;"	r
cntrl4	.\template_periph_8b.v	/^reg  [7:0] cntrl4;$/;"	r
cntrl4_nxt	.\template_periph_8b.v	/^wire [7:0] cntrl4_nxt = CNTRL4[0] ? per_din[15:8]     : per_din[7:0];$/;"	n
cntrl4_rd	.\template_periph_16b.v	/^wire [15:0] cntrl4_rd  = cntrl4  & {16{reg_rd[CNTRL4]}};$/;"	n
cntrl4_rd	.\template_periph_8b.v	/^wire [15:0] cntrl4_rd   = {8'h00, (cntrl4  & {8{reg_rd[CNTRL4]}})}  << (8 & {4{CNTRL4[0]}});$/;"	n
cntrl4_wr	.\template_periph_16b.v	/^wire        cntrl4_wr = reg_wr[CNTRL4];$/;"	n
cntrl4_wr	.\template_periph_8b.v	/^wire       cntrl4_wr  = CNTRL4[0] ? reg_hi_wr[CNTRL4] : reg_lo_wr[CNTRL4];$/;"	n
co	.\altera_mf.v	/^        reg co; \/\/ temporary storage to store the carry out bit$/;"	r
code_ctrl	.\dma_tfbuffer.v	/^ output         [15:0]      code_ctrl;$/;"	p
code_ctrl	.\openMSP430_fpga.v	/^wire    [15:0]     code_ctrl;$/;"	n
code_ctrl_en	.\dma_tfbuffer.v	/^ output                     code_ctrl_en;$/;"	p
code_ctrl_en	.\openMSP430_fpga.v	/^wire               code_ctrl_en;$/;"	n
code_ctrl_rd	.\dma_tfbuffer.v	/^wire [15:0] code_ctrl_rd               = code_ctrlout2          & {16{reg_rd[CODE_CTRLOUT     ]}};$/;"	n
code_ctrlen	.\dma_tfbuffer.v	/^reg         code_ctrlen;$/;"	r
code_ctrlout2	.\dma_tfbuffer.v	/^reg  [15:0] code_ctrlout2;$/;"	r
code_ctrlout2_wr	.\dma_tfbuffer.v	/^wire        code_ctrlout2_wr = reg_wr[CODE_CTRLOUT];$/;"	n
code_sel_tri	.\openMSP430_fpga.v	/^wire               code_sel_tri;$/;"	n
coef0_0	.\altera_mf.v	/^	parameter coef0_0 = 0;$/;"	c
coef0_1	.\altera_mf.v	/^	parameter coef0_1 = 0;$/;"	c
coef0_2	.\altera_mf.v	/^	parameter coef0_2 = 0;$/;"	c
coef0_3	.\altera_mf.v	/^	parameter coef0_3 = 0;$/;"	c
coef0_4	.\altera_mf.v	/^	parameter coef0_4 = 0;$/;"	c
coef0_5	.\altera_mf.v	/^	parameter coef0_5 = 0;$/;"	c
coef0_6	.\altera_mf.v	/^	parameter coef0_6 = 0;$/;"	c
coef0_7	.\altera_mf.v	/^	parameter coef0_7 = 0;$/;"	c
coef1_0	.\altera_mf.v	/^	parameter coef1_0 = 0;$/;"	c
coef1_1	.\altera_mf.v	/^	parameter coef1_1 = 0;$/;"	c
coef1_2	.\altera_mf.v	/^	parameter coef1_2 = 0;$/;"	c
coef1_3	.\altera_mf.v	/^	parameter coef1_3 = 0;$/;"	c
coef1_4	.\altera_mf.v	/^	parameter coef1_4 = 0;$/;"	c
coef1_5	.\altera_mf.v	/^	parameter coef1_5 = 0;$/;"	c
coef1_6	.\altera_mf.v	/^	parameter coef1_6 = 0;$/;"	c
coef1_7	.\altera_mf.v	/^	parameter coef1_7 = 0;$/;"	c
coef2_0	.\altera_mf.v	/^	parameter coef2_0 = 0;$/;"	c
coef2_1	.\altera_mf.v	/^	parameter coef2_1 = 0;$/;"	c
coef2_2	.\altera_mf.v	/^	parameter coef2_2 = 0;$/;"	c
coef2_3	.\altera_mf.v	/^	parameter coef2_3 = 0;$/;"	c
coef2_4	.\altera_mf.v	/^	parameter coef2_4 = 0;$/;"	c
coef2_5	.\altera_mf.v	/^	parameter coef2_5 = 0;$/;"	c
coef2_6	.\altera_mf.v	/^	parameter coef2_6 = 0;$/;"	c
coef2_7	.\altera_mf.v	/^	parameter coef2_7 = 0;$/;"	c
coef3_0	.\altera_mf.v	/^	parameter coef3_0 = 0;$/;"	c
coef3_1	.\altera_mf.v	/^	parameter coef3_1 = 0;$/;"	c
coef3_2	.\altera_mf.v	/^	parameter coef3_2 = 0;$/;"	c
coef3_3	.\altera_mf.v	/^	parameter coef3_3 = 0;$/;"	c
coef3_4	.\altera_mf.v	/^	parameter coef3_4 = 0;$/;"	c
coef3_5	.\altera_mf.v	/^	parameter coef3_5 = 0;$/;"	c
coef3_6	.\altera_mf.v	/^	parameter coef3_6 = 0;$/;"	c
coef3_7	.\altera_mf.v	/^	parameter coef3_7 = 0;$/;"	c
coeffsel_a_int	.\altera_mf.v	/^	tri0 [2:0]coeffsel_a_int;$/;"	n
coeffsel_a_pre	.\altera_mf.v	/^    wire [26:0] coeffsel_a_pre;$/;"	n
coeffsel_a_reg	.\altera_mf.v	/^    reg [2:0]coeffsel_a_reg;$/;"	r
coeffsel_a_wire	.\altera_mf.v	/^    wire [2:0]coeffsel_a_wire;$/;"	n
coeffsel_b_int	.\altera_mf.v	/^    tri0 [2:0]coeffsel_b_int;$/;"	n
coeffsel_b_pre	.\altera_mf.v	/^    wire [26:0] coeffsel_b_pre;$/;"	n
coeffsel_b_reg	.\altera_mf.v	/^    reg [2:0]coeffsel_b_reg;$/;"	r
coeffsel_b_wire	.\altera_mf.v	/^    wire [2:0]coeffsel_b_wire;$/;"	n
coeffsel_c_int	.\altera_mf.v	/^    tri0 [2:0]coeffsel_c_int;$/;"	n
coeffsel_c_pre	.\altera_mf.v	/^    wire [26:0] coeffsel_c_pre;$/;"	n
coeffsel_c_reg	.\altera_mf.v	/^    reg [2:0]coeffsel_c_reg;$/;"	r
coeffsel_c_wire	.\altera_mf.v	/^    wire [2:0]coeffsel_c_wire;$/;"	n
coeffsel_d_int	.\altera_mf.v	/^    tri0 [2:0]coeffsel_d_int;$/;"	n
coeffsel_d_pre	.\altera_mf.v	/^    wire [26:0] coeffsel_d_pre;$/;"	n
coeffsel_d_reg	.\altera_mf.v	/^    reg [2:0]coeffsel_d_reg;$/;"	r
coeffsel_d_wire	.\altera_mf.v	/^    wire [2:0]coeffsel_d_wire;$/;"	n
coeffsela_reg_wire_clk	.\altera_mf.v	/^    wire coeffsela_reg_wire_clk;$/;"	n
coeffsela_reg_wire_clr	.\altera_mf.v	/^    tri0 coeffsela_reg_wire_clr;$/;"	n
coeffsela_reg_wire_en	.\altera_mf.v	/^    tri1 coeffsela_reg_wire_en;$/;"	n
coeffselb_reg_wire_clk	.\altera_mf.v	/^    wire coeffselb_reg_wire_clk;$/;"	n
coeffselb_reg_wire_clr	.\altera_mf.v	/^    tri0 coeffselb_reg_wire_clr;$/;"	n
coeffselb_reg_wire_en	.\altera_mf.v	/^    tri1 coeffselb_reg_wire_en;$/;"	n
coeffselc_reg_wire_clk	.\altera_mf.v	/^    wire coeffselc_reg_wire_clk;$/;"	n
coeffselc_reg_wire_clr	.\altera_mf.v	/^    tri0 coeffselc_reg_wire_clr;$/;"	n
coeffselc_reg_wire_en	.\altera_mf.v	/^    tri1 coeffselc_reg_wire_en;$/;"	n
coeffseld_reg_wire_clk	.\altera_mf.v	/^    wire coeffseld_reg_wire_clk;$/;"	n
coeffseld_reg_wire_clr	.\altera_mf.v	/^    tri0 coeffseld_reg_wire_clr;$/;"	n
coeffseld_reg_wire_en	.\altera_mf.v	/^    tri1 coeffseld_reg_wire_en;$/;"	n
coefsel0	.\altera_mf.v	/^	input [2:0]coefsel0;$/;"	p
coefsel0_aclr	.\altera_mf.v	/^   	parameter coefsel0_aclr	= "ACLR0";$/;"	c
coefsel0_register	.\altera_mf.v	/^	parameter coefsel0_register = "CLOCK0";$/;"	c
coefsel1	.\altera_mf.v	/^	input [2:0]coefsel1;$/;"	p
coefsel1_aclr	.\altera_mf.v	/^   	parameter coefsel1_aclr	= "ACLR0";$/;"	c
coefsel1_register	.\altera_mf.v	/^  	parameter coefsel1_register	= "CLOCK0";$/;"	c
coefsel2	.\altera_mf.v	/^	input [2:0]coefsel2;$/;"	p
coefsel2_aclr	.\altera_mf.v	/^	parameter coefsel2_aclr	= "ACLR0";$/;"	c
coefsel2_register	.\altera_mf.v	/^  	parameter coefsel2_register	= "CLOCK0";$/;"	c
coefsel3	.\altera_mf.v	/^	input [2:0]coefsel3;$/;"	p
coefsel3_aclr	.\altera_mf.v	/^   	parameter coefsel3_aclr	= "ACLR0";$/;"	c
coefsel3_register	.\altera_mf.v	/^  	parameter coefsel3_register	= "CLOCK0";$/;"	c
combout	.\altera_mf.v	/^output [width-1:0] combout;$/;"	p
comment_with_double_minus_found	.\altera_mf.v	/^    integer comment_with_double_minus_found;$/;"	r
comment_with_percent_found	.\altera_mf.v	/^    integer comment_with_percent_found;$/;"	r
common_rx_tx	.\altera_mf.v	/^    parameter common_rx_tx                         = "off";$/;"	c
common_rx_tx	.\altera_mf.v	/^    parameter common_rx_tx = "off";$/;"	c
common_rx_tx_pll	.\altera_mf.v	/^    parameter common_rx_tx_pll = "ON";$/;"	c
comparator	.\altera_mf.v	/^    input comparator;$/;"	p
comparator_ipd	.\altera_mf.v	/^    wire comparator_ipd;$/;"	n
comparator_pulldown	.\altera_mf.v	/^tri0 comparator_pulldown;$/;"	n
compare	.\compare.vhd	/^ENTITY compare IS$/;"	e
compare_param_name	.\altera_mf.v	/^    input [8*50:1] compare_param_name; \/\/ parameter name to be looking for in the given_string.$/;"	p
compensate_clock	.\altera_mf.v	/^    parameter compensate_clock                     = "clk0";$/;"	c
compensate_clock	.\altera_mf.v	/^    parameter compensate_clock                     = "clock0";$/;"	c
compensate_clock	.\altera_mf.v	/^    parameter compensate_clock = "clk0";$/;"	c
compensate_clock	.\altera_mf.v	/^parameter   compensate_clock          = "CLK0" ;$/;"	c
conf_data_width	.\altera_mf.v	/^    parameter    conf_data_width    =    1;$/;"	c
conf_wait_timer_width	.\altera_mf.v	/^    parameter    conf_wait_timer_width    =    16;$/;"	c
configupdate	.\altera_mf.v	/^    input configupdate;$/;"	p
configupdate	.\altera_mf.v	/^input       configupdate;$/;"	p
configupdate_ipd	.\altera_mf.v	/^    wire configupdate_ipd;$/;"	n
configupdate_pulldown	.\altera_mf.v	/^tri0 configupdate_pulldown;$/;"	n
contents	.\altera_mf.v	/^    reg [width-1:0] contents [0:TOTAL_TAP_DISTANCE-1];$/;"	r
controller_ram	.\controller_ram.vhd	/^ENTITY controller_ram IS$/;"	e
conv	.\conv_encode7.vhd	/^FUNCTION conv (conv_reg : STD_LOGIC_VECTOR ; data : STD_LOGIC) RETURN STD_LOGIC_VECTOR IS--卷积函数$/;"	f
conv_char	.\altera_mf.v	/^    reg [8:1] conv_char;$/;"	r
conv_char	.\altera_mf.v	/^reg [8:1] conv_char;$/;"	r
conv_encode7	.\conv_encode7.vhd	/^ENTITY conv_encode7 IS$/;"	e
conv_error	.\altera_mf.v	/^  output [number_of_channels-1:0]   conv_error,$/;"	p
convert_hex2ver	.\altera_mf.v	/^task convert_hex2ver;$/;"	t
convert_mif2ver	.\altera_mf.v	/^task convert_mif2ver;$/;"	t
convert_to_ver_file	.\altera_mf.v	/^task convert_to_ver_file;$/;"	t
coreclock_divide_by	.\altera_mf.v	/^    parameter coreclock_divide_by = 2;$/;"	c
count	.\altera_mf.v	/^    integer count, result;$/;"	r
count	.\altera_mf.v	/^    integer count;$/;"	r
count	.\altera_mf.v	/^reg count;$/;"	r
count_id	.\altera_mf.v	/^    reg [lpm_widthu-1:0] count_id;$/;"	r
count_value	.\altera_mf.v	/^    integer count_value;$/;"	r
counter_h	.\altera_mf.v	/^    integer output_counter_value, duty_cycle, counter_h;$/;"	r
counter_l	.\altera_mf.v	/^    integer counter_l, tmp_counter_low;$/;"	r
counter_mode	.\altera_mf.v	/^    function [8*6:1] counter_mode;$/;"	f
counter_reset_value	.\altera_mf.v	/^    real counter_reset_value;$/;"	r
cout	.\altera_mf.v	/^        output cout; \/\/ carry out bit$/;"	p
cout	.\altera_mf.v	/^    output cout;$/;"	p
cout	.\altera_mf.v	/^    reg cout;$/;"	r
cout	.\altera_mf.v	/^    wire cout;$/;"	n
cout_delayed_wire	.\altera_mf.v	/^    wire cout_delayed_wire;$/;"	n
cout_int	.\altera_mf.v	/^    reg cout_int;$/;"	r
cout_int_wire	.\altera_mf.v	/^    wire cout_int_wire;$/;"	n
cout_tmp	.\altera_mf.v	/^    reg cout_tmp;$/;"	r
cov0_set	.\omsp_timerA.v	/^wire        cov0_set;$/;"	n
cov1_set	.\omsp_timerA.v	/^wire        cov1_set;$/;"	n
cov2_set	.\omsp_timerA.v	/^wire        cov2_set;$/;"	n
cp_curr_bit_setting	.\altera_mf.v	/^    reg [14:16] cp_curr_bit_setting, cp_curr_old_bit_setting;$/;"	r
cp_curr_old	.\altera_mf.v	/^    integer cp_curr_old;$/;"	r
cp_curr_old_bit_setting	.\altera_mf.v	/^    reg [14:16] cp_curr_bit_setting, cp_curr_old_bit_setting;$/;"	r
cp_curr_val	.\altera_mf.v	/^    integer cp_curr_val;$/;"	r
cpu_asic	.\omsp_sfr.v	/^wire        cpu_asic     =  1'b0;$/;"	n
cpu_asic	.\omsp_sfr.v	/^wire        cpu_asic     =  1'b1;$/;"	n
cpu_ctl	.\omsp_dbg.v	/^reg   [6:3] cpu_ctl;$/;"	r
cpu_ctl	.\omsp_dbg.v	/^wire  [7:0] cpu_ctl_full = {1'b0, cpu_ctl, 3'b000};$/;"	n
cpu_ctl_full	.\omsp_dbg.v	/^wire  [7:0] cpu_ctl_full = {1'b0, cpu_ctl, 3'b000};$/;"	n
cpu_ctl_full	.\omsp_dbg.v	/^wire [15:0] cpu_ctl_rd   = {8'h00, cpu_ctl_full}  & {16{reg_rd[CPU_CTL]}};$/;"	n
cpu_ctl_rd	.\omsp_dbg.v	/^wire [15:0] cpu_ctl_rd   = {8'h00, cpu_ctl_full}  & {16{reg_rd[CPU_CTL]}};$/;"	n
cpu_ctl_wr	.\omsp_dbg.v	/^wire        cpu_ctl_wr = reg_wr[CPU_CTL];$/;"	n
cpu_en	.\omsp_clock_module.v	/^input               cpu_en;           \/\/ Enable CPU code execution (asynchronous)$/;"	p
cpu_en	.\openMSP430.v	/^input                cpu_en;                 \/\/ Enable CPU code execution (asynchronous and non-glitchy)$/;"	p
cpu_en_aux_s	.\omsp_clock_module.v	/^   wire   cpu_en_aux_s    = cpu_en_s;$/;"	n
cpu_en_aux_s	.\omsp_clock_module.v	/^   wire cpu_en_aux_s;$/;"	n
cpu_en_s	.\omsp_clock_module.v	/^output              cpu_en_s;         \/\/ Enable CPU code execution (synchronous)$/;"	p
cpu_en_s	.\omsp_dbg.v	/^input               cpu_en_s;          \/\/ Enable CPU code execution (synchronous)$/;"	p
cpu_en_s	.\omsp_frontend.v	/^input                cpu_en_s;         \/\/ Enable CPU code execution (synchronous)$/;"	p
cpu_en_s	.\openMSP430.v	/^wire                 cpu_en_s;$/;"	n
cpu_en_sm_s	.\omsp_clock_module.v	/^     wire cpu_en_sm_s;$/;"	n
cpu_en_sm_s	.\omsp_clock_module.v	/^   wire   cpu_en_sm_s    = cpu_en_s;$/;"	n
cpu_en_wkup	.\omsp_clock_module.v	/^wire cpu_en_wkup;$/;"	n
cpu_enabled_with_dco	.\omsp_clock_module.v	/^   wire cpu_enabled_with_dco;$/;"	n
cpu_enabled_with_lfxt	.\omsp_clock_module.v	/^   wire cpu_enabled_with_lfxt;$/;"	n
cpu_halt_cmd	.\omsp_frontend.v	/^input                cpu_halt_cmd;     \/\/ Halt CPU command$/;"	p
cpu_halt_cmd	.\omsp_mem_backbone.v	/^output               cpu_halt_cmd;      \/\/ Halt CPU command$/;"	p
cpu_halt_cmd	.\openMSP430.v	/^wire                 cpu_halt_cmd;$/;"	n
cpu_halt_req	.\omsp_frontend.v	/^wire   cpu_halt_req = cpu_halt_cmd | ~cpu_en_s;$/;"	n
cpu_halt_st	.\omsp_frontend.v	/^output               cpu_halt_st;      \/\/ Halt\/Run status from CPU$/;"	p
cpu_halt_st	.\omsp_frontend.v	/^reg    cpu_halt_st;$/;"	r
cpu_halt_st	.\omsp_mem_backbone.v	/^input                cpu_halt_st;       \/\/ Halt\/Run status from CPU$/;"	p
cpu_halt_st	.\openMSP430.v	/^wire                 cpu_halt_st;$/;"	n
cpu_id	.\omsp_dbg.v	/^input        [31:0] cpu_id;            \/\/ CPU ID$/;"	p
cpu_id	.\omsp_sfr.v	/^output       [31:0] cpu_id;       \/\/ CPU ID$/;"	p
cpu_id	.\openMSP430.v	/^wire          [31:0] cpu_id;$/;"	n
cpu_id_hi_rd	.\omsp_dbg.v	/^wire [15:0] cpu_id_hi_rd = cpu_id[31:16]          & {16{reg_rd[CPU_ID_HI]}};$/;"	n
cpu_id_hi_rd	.\omsp_sfr.v	/^wire [15:0] cpu_id_hi_rd  = cpu_id[31:16] & {16{reg_rd[CPU_ID_HI]}};$/;"	n
cpu_id_lo_rd	.\omsp_dbg.v	/^wire [15:0] cpu_id_lo_rd = cpu_id[15:0]           & {16{reg_rd[CPU_ID_LO]}};$/;"	n
cpu_id_lo_rd	.\omsp_sfr.v	/^wire [15:0] cpu_id_lo_rd  = cpu_id[15:0]  & {16{reg_rd[CPU_ID_LO]}};$/;"	n
cpu_mclk	.\omsp_clock_module.v	/^output              cpu_mclk;         \/\/ Main system CPU only clock$/;"	p
cpu_mclk	.\openMSP430.v	/^wire                 cpu_mclk;$/;"	n
cpu_nr	.\omsp_dbg.v	/^wire [15:0] cpu_nr = {cpu_nr_total, cpu_nr_inst};$/;"	n
cpu_nr	.\omsp_sfr.v	/^wire [15:0] cpu_nr = {cpu_nr_total, cpu_nr_inst};$/;"	n
cpu_nr_inst	.\omsp_dbg.v	/^input         [7:0] cpu_nr_inst;       \/\/ Current oMSP instance number$/;"	p
cpu_nr_inst	.\omsp_dbg.v	/^wire [15:0] cpu_nr = {cpu_nr_total, cpu_nr_inst};$/;"	n
cpu_nr_inst	.\omsp_sfr.v	/^input         [7:0] cpu_nr_inst;  \/\/ Current oMSP instance number$/;"	p
cpu_nr_inst	.\omsp_sfr.v	/^wire [15:0] cpu_nr = {cpu_nr_total, cpu_nr_inst};$/;"	n
cpu_nr_inst	.\openMSP430.v	/^wire           [7:0] cpu_nr_inst  = INST_NR;$/;"	n
cpu_nr_rd	.\omsp_dbg.v	/^wire [15:0] cpu_nr_rd    = cpu_nr                 & {16{reg_rd[CPU_NR]}};$/;"	n
cpu_nr_rd	.\omsp_sfr.v	/^wire [15:0] cpu_nr_rd     = cpu_nr        & {16{reg_rd[CPU_NR]}};$/;"	n
cpu_nr_total	.\omsp_dbg.v	/^input         [7:0] cpu_nr_total;      \/\/ Total number of oMSP instances-1$/;"	p
cpu_nr_total	.\omsp_sfr.v	/^input         [7:0] cpu_nr_total; \/\/ Total number of oMSP instances-1$/;"	p
cpu_nr_total	.\openMSP430.v	/^wire           [7:0] cpu_nr_total = TOTAL_NR;$/;"	n
cpu_stat	.\omsp_dbg.v	/^                             cpu_stat, 1'b0, dbg_halt_st};$/;"	n
cpu_stat	.\omsp_dbg.v	/^reg   [3:2] cpu_stat;$/;"	r
cpu_stat_clr	.\omsp_dbg.v	/^wire  [3:2] cpu_stat_clr = ~dbg_din[3:2];$/;"	n
cpu_stat_full	.\omsp_dbg.v	/^wire  [7:0] cpu_stat_full = {brk3_pnd, brk2_pnd, brk1_pnd, brk0_pnd,$/;"	n
cpu_stat_full	.\omsp_dbg.v	/^wire [15:0] cpu_stat_rd  = {8'h00, cpu_stat_full} & {16{reg_rd[CPU_STAT]}};$/;"	n
cpu_stat_rd	.\omsp_dbg.v	/^wire [15:0] cpu_stat_rd  = {8'h00, cpu_stat_full} & {16{reg_rd[CPU_STAT]}};$/;"	n
cpu_stat_set	.\omsp_dbg.v	/^wire  [3:2] cpu_stat_set = {dbg_swbrk, puc_pnd_set};$/;"	n
cpu_stat_wr	.\omsp_dbg.v	/^wire        cpu_stat_wr  = reg_wr[CPU_STAT];$/;"	n
cpu_version	.\omsp_sfr.v	/^wire  [2:0] cpu_version  =  `CPU_VERSION;$/;"	n
cpuoff	.\omsp_clock_module.v	/^input               cpuoff;           \/\/ Turns off the CPU$/;"	p
cpuoff	.\omsp_execution_unit.v	/^output              cpuoff;        \/\/ Turns off the CPU$/;"	p
cpuoff	.\omsp_frontend.v	/^input                cpuoff;           \/\/ Turns off the CPU$/;"	p
cpuoff	.\omsp_register_file.v	/^output              cpuoff;       \/\/ Turns off the CPU$/;"	p
cpuoff	.\openMSP430.v	/^wire                 cpuoff;$/;"	n
cpuoff_and_mclk_dma_enable	.\omsp_clock_module.v	/^   wire cpuoff_and_mclk_dma_enable;$/;"	n
cpuoff_and_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire cpuoff_and_mclk_dma_wkup;$/;"	n
cpuoff_and_mclk_dma_wkup_s	.\omsp_clock_module.v	/^wire cpuoff_and_mclk_dma_wkup_s;$/;"	n
cpuoff_and_mclk_enable	.\omsp_clock_module.v	/^   wire cpuoff_and_mclk_enable;$/;"	n
cpuoff_mask	.\omsp_register_file.v	/^   wire [15:0] cpuoff_mask = 16'h0000;$/;"	n
cpuoff_mask	.\omsp_register_file.v	/^   wire [15:0] cpuoff_mask = 16'h0010; \/\/ For the FPGA version: - the CPUOFF mode is emulated$/;"	n
cpuoff_mask	.\omsp_register_file.v	/^   wire [15:0] cpuoff_mask = 16'h0010;$/;"	n
crc	.\altera_mf.v	/^    input    [SLD_NODE_CRC_BITS-1:0]    crc;$/;"	p
cread_during_write_mode_mixed_ports	.\altera_mf.v	/^    reg [21*8:0] cread_during_write_mode_mixed_ports;$/;"	r
current_clk_is_bad	.\altera_mf.v	/^    reg current_clk_is_bad;$/;"	r
current_clock	.\altera_mf.v	/^    integer current_clock;$/;"	r
current_clock_man	.\altera_mf.v	/^    integer current_clock_man;$/;"	r
current_state	.\dma_pri.v	/^reg       [3:0]      current_state;$/;"	r
cyc0	.\altera_mf.v	/^integer cyc0;$/;"	r
cyc1	.\altera_mf.v	/^integer cyc1;$/;"	r
cyc2	.\altera_mf.v	/^integer cyc2;$/;"	r
cyc_ext	.\altera_mf.v	/^integer cyc_ext;$/;"	r
cycle	.\omsp_multiplier.v	/^reg [1:0] cycle;$/;"	r
cycle	.\omsp_multiplier.v	/^reg cycle;$/;"	r
cycle_to_adjust	.\altera_mf.v	/^    integer cycle_to_adjust;$/;"	r
cycle_to_adjust0	.\altera_mf.v	/^integer cycle_to_adjust0;$/;"	r
cycle_to_adjust1	.\altera_mf.v	/^integer cycle_to_adjust1;$/;"	r
cycle_to_adjust2	.\altera_mf.v	/^integer cycle_to_adjust2;$/;"	r
cycle_to_adjust_ext	.\altera_mf.v	/^integer cycle_to_adjust_ext;$/;"	r
cycles_pfd_high	.\altera_mf.v	/^    integer cycles_pfd_low, cycles_pfd_high;$/;"	r
cycles_pfd_low	.\altera_mf.v	/^    integer cycles_pfd_low, cycles_pfd_high;$/;"	r
cycles_to_lock	.\altera_mf.v	/^    integer cycles_to_lock;$/;"	r
cycles_to_unlock	.\altera_mf.v	/^    integer cycles_to_unlock;$/;"	r
cyclone3_activeclock	.\altera_mf.v	/^wire cyclone3_activeclock;$/;"	n
cyclone3_areset	.\altera_mf.v	/^wire cyclone3_areset;$/;"	n
cyclone3_clk	.\altera_mf.v	/^wire [4:0] cyclone3_clk;$/;"	n
cyclone3_clkbad	.\altera_mf.v	/^wire [1:0] cyclone3_clkbad;$/;"	n
cyclone3_clkswitch	.\altera_mf.v	/^wire cyclone3_clkswitch;$/;"	n
cyclone3_fbout	.\altera_mf.v	/^wire cyclone3_fbout;$/;"	n
cyclone3_inclk	.\altera_mf.v	/^wire [1:0] cyclone3_inclk;$/;"	n
cyclone3_locked	.\altera_mf.v	/^wire cyclone3_locked;$/;"	n
cyclone3_pfdena	.\altera_mf.v	/^wire cyclone3_pfdena;$/;"	n
cyclone3_phasecounterselect	.\altera_mf.v	/^wire [2:0] cyclone3_phasecounterselect;$/;"	n
cyclone3_phasedone	.\altera_mf.v	/^wire cyclone3_phasedone;$/;"	n
cyclone3_scanclk	.\altera_mf.v	/^wire cyclone3_scanclk;$/;"	n
cyclone3_scandataout	.\altera_mf.v	/^wire cyclone3_scandataout;$/;"	n
cyclone3_scandone	.\altera_mf.v	/^wire cyclone3_scandone;$/;"	n
cyclone3_vcooverrange	.\altera_mf.v	/^wire cyclone3_vcooverrange;$/;"	n
cyclone3_vcounderrange	.\altera_mf.v	/^wire cyclone3_vcounderrange;$/;"	n
cyclone3gl_activeclock	.\altera_mf.v	/^wire cyclone3gl_activeclock;$/;"	n
cyclone3gl_areset	.\altera_mf.v	/^wire cyclone3gl_areset;$/;"	n
cyclone3gl_clk	.\altera_mf.v	/^wire [4:0] cyclone3gl_clk;$/;"	n
cyclone3gl_clkbad	.\altera_mf.v	/^wire [1:0] cyclone3gl_clkbad;$/;"	n
cyclone3gl_clkswitch	.\altera_mf.v	/^wire cyclone3gl_clkswitch;$/;"	n
cyclone3gl_fbout	.\altera_mf.v	/^wire cyclone3gl_fbout;$/;"	n
cyclone3gl_fref	.\altera_mf.v	/^wire cyclone3gl_fref;$/;"	n
cyclone3gl_icdrclk	.\altera_mf.v	/^wire cyclone3gl_icdrclk;$/;"	n
cyclone3gl_inclk	.\altera_mf.v	/^wire [1:0] cyclone3gl_inclk;$/;"	n
cyclone3gl_locked	.\altera_mf.v	/^wire cyclone3gl_locked;$/;"	n
cyclone3gl_pfdena	.\altera_mf.v	/^wire cyclone3gl_pfdena;$/;"	n
cyclone3gl_phasecounterselect	.\altera_mf.v	/^wire [2:0] cyclone3gl_phasecounterselect;$/;"	n
cyclone3gl_phasedone	.\altera_mf.v	/^wire cyclone3gl_phasedone;$/;"	n
cyclone3gl_scanclk	.\altera_mf.v	/^wire cyclone3gl_scanclk;$/;"	n
cyclone3gl_scandataout	.\altera_mf.v	/^wire cyclone3gl_scandataout;$/;"	n
cyclone3gl_scandone	.\altera_mf.v	/^wire cyclone3gl_scandone;$/;"	n
cyclone3gl_vcooverrange	.\altera_mf.v	/^wire cyclone3gl_vcooverrange;$/;"	n
cyclone3gl_vcounderrange	.\altera_mf.v	/^wire cyclone3gl_vcounderrange;$/;"	n
cycloneiiigl_post_divider	.\altera_mf.v	/^module cycloneiiigl_post_divider   ( clk,$/;"	m
cycloneiiigl_post_divider	.\work\cycloneiiigl_post_divider\_primary.vhd	/^entity cycloneiiigl_post_divider is$/;"	e
d	.\altera_mf.v	/^    input [lpm_width-1:0] d;$/;"	p
d	.\altera_mf.v	/^    input d;$/;"	p
d_addr0_rd	.\omsp_dbg_hwbrk.v	/^wire d_addr0_rd =  equ_d_addr0 & ~brk_ctl[`BRK_I_EN] & ~|eu_mb_wr;$/;"	n
d_addr0_wr	.\omsp_dbg_hwbrk.v	/^wire d_addr0_wr =  equ_d_addr0 & ~brk_ctl[`BRK_I_EN] &  |eu_mb_wr;$/;"	n
d_addr1_rd	.\omsp_dbg_hwbrk.v	/^wire d_addr1_rd =  equ_d_addr1 & ~brk_ctl[`BRK_I_EN] & ~|eu_mb_wr;$/;"	n
d_addr1_wr	.\omsp_dbg_hwbrk.v	/^wire d_addr1_wr =  equ_d_addr1 & ~brk_ctl[`BRK_I_EN] &  |eu_mb_wr;$/;"	n
d_msg	.\altera_mf.v	/^    reg d_msg;$/;"	r
d_range_rd	.\omsp_dbg_hwbrk.v	/^wire d_range_rd =  equ_d_range & ~brk_ctl[`BRK_I_EN] & ~|eu_mb_wr;$/;"	n
d_range_wr	.\omsp_dbg_hwbrk.v	/^wire d_range_wr =  equ_d_range & ~brk_ctl[`BRK_I_EN] &  |eu_mb_wr;$/;"	n
d_value	.\altera_mf.v	/^        integer d_value;$/;"	r
data	.\altera_mf.v	/^    input  [lpm_width-1:0] data;$/;"	p
data	.\altera_mf.v	/^    input  [width-1:0] data;     \/\/ Data input to the memory$/;"	p
data	.\altera_mf.v	/^    input [data_width - 1 : 0] data;$/;"	p
data	.\altera_mf.v	/^    input [lpm_width-1:0] data;$/;"	p
data	.\altera_mf.v	/^    input [width*size-1:0] data;  \/\/ Required port$/;"	p
data	.\altera_mf.v	/^    input [width-1:0]      data;$/;"	p
data	.\altera_mf.v	/^    input [width_in-1:0] data;  \/\/ Required port$/;"	p
data	.\ram16x512.v	/^	input	[15:0]  data;$/;"	p
data0out	.\altera_mf.v	/^    output    data0out;$/;"	p
data_a	.\altera_mf.v	/^    input  [width_a-1:0] data_a; \/\/ Port A data input$/;"	p
data_a	.\altera_mf.v	/^    input  [width_a-1:0] data_a;$/;"	p
data_align_rollover	.\altera_mf.v	/^    parameter data_align_rollover = deserialization_factor;$/;"	c
data_b	.\altera_mf.v	/^    input  [width_b-1:0] data_b; \/\/ Port B data input$/;"	p
data_b	.\altera_mf.v	/^    input  [width_b-1:0] data_b;$/;"	p
data_delay_count	.\altera_mf.v	/^    reg [2:0] data_delay_count [(1<<lpm_widthu)-1:0];$/;"	r
data_in	.\altera_mf.v	/^    input    [3:0]    data_in;$/;"	p
data_in	.\io_cell.v	/^output         data_in;        \/\/ Input value$/;"	p
data_in	.\omsp_sync_cell.v	/^input               data_in;      \/\/ Asynchronous data input$/;"	p
data_in_func	.\omsp_scan_mux.v	/^input               data_in_func;  \/\/ Selected data input for functional mode$/;"	p
data_in_scan	.\omsp_scan_mux.v	/^input               data_in_scan;  \/\/ Selected data input for scan mode$/;"	p
data_int	.\altera_mf.v	/^    reg [width_out -1:0] data_int;$/;"	r
data_oe	.\altera_mf.v	/^    input    [3:0]    data_oe;$/;"	p
data_out	.\altera_mf.v	/^    output    [3:0]    data_out;$/;"	p
data_out	.\io_cell.v	/^input          data_out;       \/\/ Output value$/;"	p
data_out	.\omsp_scan_mux.v	/^output              data_out;      \/\/ Scan mux data output$/;"	p
data_out	.\omsp_sync_cell.v	/^output              data_out;      \/\/ Synchronized data output$/;"	p
data_out_en	.\io_cell.v	/^input          data_out_en;    \/\/ Output enable$/;"	p
data_radix	.\altera_mf.v	/^    reg [24 : 1] address_radix, data_radix;$/;"	r
data_radix_found	.\altera_mf.v	/^    reg data_radix_found;$/;"	r
data_rate	.\altera_mf.v	/^    parameter data_rate = "UNUSED";$/;"	c
data_ready	.\altera_mf.v	/^    reg [(1<<lpm_widthu)-1:0] data_ready;$/;"	r
data_ready	.\altera_mf.v	/^    reg data_ready [(1<<lpm_widthu)-1:0];$/;"	r
data_shown	.\altera_mf.v	/^    reg [(1<<lpm_widthu)-1:0] data_shown;$/;"	r
data_sync	.\omsp_sync_cell.v	/^reg  [1:0] data_sync;$/;"	r
data_sync	.\omsp_sync_reset.v	/^reg    [1:0] data_sync;$/;"	r
data_temp	.\tb_openMSP430_fpga.v	/^reg [7:0] data_temp;$/;"	r
data_tmp	.\altera_mf.v	/^    wire [width-1:0] data_tmp;$/;"	n
data_width	.\altera_mf.v	/^    parameter data_width = 1;$/;"	c
data_write_at_high	.\altera_mf.v	/^    reg [width-1:0] data_write_at_high;$/;"	r
data_write_at_low	.\altera_mf.v	/^    reg [width-1:0] data_write_at_low;$/;"	r
dataa	.\altera_mf.v	/^    input [WIDTH_MAN_EXP : 0] dataa;$/;"	p
dataa	.\altera_mf.v	/^    input [number_of_multipliers * width_a -1 : 0] dataa;$/;"	p
dataa	.\altera_mf.v	/^    input [width_a -1 : 0] dataa;$/;"	p
dataa	.\altera_mf.v	/^    tri0 [width_a -1 : 0] dataa;$/;"	n
dataa_int	.\altera_mf.v	/^    tri0  [4 * int_width_a -1 : 0] dataa_int;$/;"	n
dataa_reg	.\altera_mf.v	/^    reg  [4 * int_width_a -1 : 0] dataa_reg;$/;"	r
datab	.\altera_mf.v	/^    input [WIDTH_MAN_EXP : 0] datab;$/;"	p
datab	.\altera_mf.v	/^    input [number_of_multipliers * width_b -1 : 0] datab;$/;"	p
datab	.\altera_mf.v	/^    input [width_b -1 : 0] datab;$/;"	p
datab	.\altera_mf.v	/^    tri0 [width_b -1 : 0] datab;$/;"	n
datab_int	.\altera_mf.v	/^    tri0  [4 * int_width_b -1 : 0] datab_int;$/;"	n
datab_reg	.\altera_mf.v	/^    reg  [4 * int_width_b -1 : 0] datab_reg;$/;"	r
datac	.\altera_mf.v	/^	input [width_c -1 : 0] datac;$/;"	p
datac	.\altera_mf.v	/^    input [number_of_multipliers * width_c -1 : 0] datac;$/;"	p
datac_int	.\altera_mf.v	/^    tri0  [int_width_c -1 : 0] datac_int;$/;"	n
datain	.\altera_mf.v	/^input [width-1:0] datain;$/;"	p
datain_h	.\altera_mf.v	/^input [width-1:0] datain_h;$/;"	p
datain_h_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] datain_h_reg;$/;"	r
datain_h_reg_int	.\altera_mf.v	/^    reg[number_of_channels -1 :0] datain_h_reg_int [NUM_OF_SYNC_STAGES:0];$/;"	r
datain_l	.\altera_mf.v	/^input [width-1:0] datain_l;$/;"	p
datain_l_latch	.\altera_mf.v	/^    reg [number_of_channels -1 :0] datain_l_latch;$/;"	r
datain_l_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] datain_l_reg;$/;"	r
datain_l_reg_int	.\altera_mf.v	/^    reg[number_of_channels -1 :0] datain_l_reg_int [NUM_OF_SYNC_STAGES:0];$/;"	r
datain_latched	.\altera_mf.v	/^reg [width-1:0] datain_latched;$/;"	r
dataout	.\altera_mf.v	/^output [width-1:0] dataout;$/;"	p
dataout	.\altera_mf.v	/^reg  [width-1:0] dataout;$/;"	r
dataout_h	.\altera_mf.v	/^    reg [number_of_channels -1 :0] dataout_h;$/;"	r
dataout_h	.\altera_mf.v	/^    reg [number_of_channels-1 :0] dataout_h;$/;"	r
dataout_h	.\altera_mf.v	/^output [width-1:0] dataout_h;$/;"	p
dataout_h	.\altera_mf.v	/^reg  [width-1:0] dataout_h;$/;"	r
dataout_h_tmp	.\altera_mf.v	/^reg [width-1:0] dataout_h_tmp;$/;"	r
dataout_l	.\altera_mf.v	/^    reg [number_of_channels -1 :0] dataout_l;$/;"	r
dataout_l	.\altera_mf.v	/^    reg [number_of_channels-1 :0] dataout_l;$/;"	r
dataout_l	.\altera_mf.v	/^output [width-1:0] dataout_l;$/;"	p
dataout_l	.\altera_mf.v	/^reg  [width-1:0] dataout_l;$/;"	r
dataout_l_tmp	.\altera_mf.v	/^reg [width-1:0] dataout_l_tmp;$/;"	r
dataout_tmp	.\altera_mf.v	/^    reg [number_of_channels -1 :0] dataout_tmp;$/;"	r
dataout_tmp	.\altera_mf.v	/^reg  [width-1:0] dataout_tmp;$/;"	r
dbg_addr	.\omsp_dbg.v	/^wire  [5:0] dbg_addr;$/;"	n
dbg_addr	.\omsp_dbg_i2c.v	/^output        [5:0] dbg_addr;          \/\/ Debug register address$/;"	p
dbg_addr	.\omsp_dbg_i2c.v	/^reg [5:0] dbg_addr;$/;"	r
dbg_addr	.\omsp_dbg_uart.v	/^output        [5:0] dbg_addr;       \/\/ Debug register address$/;"	p
dbg_addr	.\omsp_dbg_uart.v	/^reg [5:0] dbg_addr;$/;"	r
dbg_addr_in	.\omsp_dbg.v	/^wire  [5:0] dbg_addr_in = mem_burst ? MEM_DATA : dbg_addr;$/;"	n
dbg_bw	.\omsp_dbg_i2c.v	/^reg         dbg_bw;$/;"	r
dbg_bw	.\omsp_dbg_uart.v	/^reg       dbg_bw;$/;"	r
dbg_clk	.\omsp_clock_module.v	/^output              dbg_clk;          \/\/ Debug unit clock$/;"	p
dbg_clk	.\omsp_dbg.v	/^input               dbg_clk;           \/\/ Debug unit clock$/;"	p
dbg_clk	.\omsp_dbg_hwbrk.v	/^input          dbg_clk;      \/\/ Debug unit clock$/;"	p
dbg_clk	.\omsp_dbg_i2c.v	/^input               dbg_clk;           \/\/ Debug unit clock$/;"	p
dbg_clk	.\omsp_dbg_uart.v	/^input               dbg_clk;        \/\/ Debug unit clock$/;"	p
dbg_clk	.\openMSP430.v	/^wire                 dbg_clk;$/;"	n
dbg_cpu_reset	.\omsp_clock_module.v	/^input               dbg_cpu_reset;    \/\/ Reset CPU from debug interface$/;"	p
dbg_cpu_reset	.\omsp_dbg.v	/^output              dbg_cpu_reset;     \/\/ Reset CPU from debug interface$/;"	p
dbg_cpu_reset	.\omsp_dbg.v	/^wire dbg_cpu_reset  = cpu_ctl[`CPU_RST];$/;"	n
dbg_cpu_reset	.\openMSP430.v	/^wire                 dbg_cpu_reset;$/;"	n
dbg_din	.\omsp_dbg.v	/^wire [15:0] dbg_din;$/;"	n
dbg_din	.\omsp_dbg_hwbrk.v	/^input   [15:0] dbg_din;      \/\/ Debug register data input$/;"	p
dbg_din	.\omsp_dbg_i2c.v	/^output       [15:0] dbg_din;           \/\/ Debug register data input$/;"	p
dbg_din	.\omsp_dbg_uart.v	/^output       [15:0] dbg_din;        \/\/ Debug register data input$/;"	p
dbg_din	.\omsp_dbg_uart.v	/^wire [15:0] dbg_din    =  dbg_din_bw ? {8'h00,           xfer_buf_nxt[18:11]} :$/;"	n
dbg_din_bw	.\omsp_dbg_uart.v	/^wire        dbg_din_bw =  mem_burst  ? mem_bw : dbg_bw;$/;"	n
dbg_din_hi	.\omsp_dbg_i2c.v	/^reg [7:0] dbg_din_hi;$/;"	r
dbg_din_lo	.\omsp_dbg_i2c.v	/^reg [7:0] dbg_din_lo;$/;"	r
dbg_dout	.\omsp_dbg.v	/^wire [15:0] dbg_dout = cpu_id_lo_rd |$/;"	n
dbg_dout	.\omsp_dbg_i2c.v	/^input        [15:0] dbg_dout;          \/\/ Debug register data output$/;"	p
dbg_dout	.\omsp_dbg_uart.v	/^input        [15:0] dbg_dout;       \/\/ Debug register data output$/;"	p
dbg_en	.\omsp_clock_module.v	/^input               dbg_en;           \/\/ Debug interface enable (asynchronous)$/;"	p
dbg_en	.\openMSP430.v	/^input                dbg_en;                 \/\/ Debug interface enable (asynchronous and non-glitchy)$/;"	p
dbg_en_n_s	.\omsp_clock_module.v	/^    wire dbg_en_n_s;$/;"	n
dbg_en_s	.\omsp_clock_module.v	/^output              dbg_en_s;         \/\/ Debug unit enable (synchronous)$/;"	p
dbg_en_s	.\omsp_dbg.v	/^input               dbg_en_s;          \/\/ Debug interface enable (synchronous)$/;"	p
dbg_en_s	.\openMSP430.v	/^wire                 dbg_en_s;$/;"	n
dbg_freeze	.\omsp_dbg.v	/^output              dbg_freeze;        \/\/ Freeze peripherals$/;"	p
dbg_freeze	.\omsp_dbg.v	/^wire dbg_freeze = dbg_halt_st & (cpu_ctl[`FRZ_BRK_EN] | ~cpu_en_s);$/;"	n
dbg_freeze	.\omsp_timerA.v	/^input               dbg_freeze;     \/\/ Freeze Timer A counter$/;"	p
dbg_freeze	.\omsp_watchdog.v	/^input               dbg_freeze;     \/\/ Freeze Watchdog counter$/;"	p
dbg_freeze	.\openMSP430.v	/^output               dbg_freeze;             \/\/ Freeze peripherals$/;"	p
dbg_freeze	.\openMSP430_fpga.v	/^wire               dbg_freeze;$/;"	n
dbg_halt_cmd	.\omsp_dbg.v	/^output              dbg_halt_cmd;      \/\/ Halt CPU command$/;"	p
dbg_halt_cmd	.\omsp_dbg.v	/^wire dbg_halt_cmd = (halt_flag | halt_flag_set) & ~inc_step[1];$/;"	n
dbg_halt_cmd	.\omsp_mem_backbone.v	/^input                dbg_halt_cmd;      \/\/ Debug interface Halt CPU command$/;"	p
dbg_halt_cmd	.\openMSP430.v	/^wire                 dbg_halt_cmd;$/;"	n
dbg_halt_st	.\omsp_alu.v	/^input               dbg_halt_st;   \/\/ Halt\/Run status from CPU$/;"	p
dbg_halt_st	.\omsp_dbg.v	/^input               dbg_halt_st;       \/\/ Halt\/Run status from CPU$/;"	p
dbg_halt_st	.\omsp_execution_unit.v	/^input               dbg_halt_st;   \/\/ Halt\/Run status from CPU$/;"	p
dbg_i2c_addr	.\omsp_dbg.v	/^input         [6:0] dbg_i2c_addr;      \/\/ Debug interface: I2C Address$/;"	p
dbg_i2c_addr	.\omsp_dbg_i2c.v	/^input         [6:0] dbg_i2c_addr;      \/\/ Debug interface: I2C ADDRESS$/;"	p
dbg_i2c_addr	.\openMSP430.v	/^input          [6:0] dbg_i2c_addr;           \/\/ Debug interface: I2C Address$/;"	p
dbg_i2c_broadcast	.\omsp_dbg.v	/^input         [6:0] dbg_i2c_broadcast; \/\/ Debug interface: I2C Broadcast Address (for multicore systems)$/;"	p
dbg_i2c_broadcast	.\omsp_dbg_i2c.v	/^input         [6:0] dbg_i2c_broadcast; \/\/ Debug interface: I2C Broadcast Address (for multicore systems)$/;"	p
dbg_i2c_broadcast	.\openMSP430.v	/^input          [6:0] dbg_i2c_broadcast;      \/\/ Debug interface: I2C Broadcast Address (for multicore systems)$/;"	p
dbg_i2c_scl	.\omsp_dbg.v	/^input               dbg_i2c_scl;       \/\/ Debug interface: I2C SCL$/;"	p
dbg_i2c_scl	.\omsp_dbg_i2c.v	/^input               dbg_i2c_scl;       \/\/ Debug interface: I2C SCL$/;"	p
dbg_i2c_scl	.\openMSP430.v	/^input                dbg_i2c_scl;            \/\/ Debug interface: I2C SCL$/;"	p
dbg_i2c_sda_in	.\omsp_dbg.v	/^input               dbg_i2c_sda_in;    \/\/ Debug interface: I2C SDA IN$/;"	p
dbg_i2c_sda_in	.\omsp_dbg_i2c.v	/^input               dbg_i2c_sda_in;    \/\/ Debug interface: I2C SDA IN$/;"	p
dbg_i2c_sda_in	.\openMSP430.v	/^input                dbg_i2c_sda_in;         \/\/ Debug interface: I2C SDA IN$/;"	p
dbg_i2c_sda_out	.\omsp_dbg.v	/^output              dbg_i2c_sda_out;   \/\/ Debug interface: I2C SDA OUT$/;"	p
dbg_i2c_sda_out	.\omsp_dbg_i2c.v	/^output              dbg_i2c_sda_out;   \/\/ Debug interface: I2C SDA OUT$/;"	p
dbg_i2c_sda_out	.\omsp_dbg_i2c.v	/^reg dbg_i2c_sda_out;$/;"	r
dbg_i2c_sda_out	.\openMSP430.v	/^output               dbg_i2c_sda_out;        \/\/ Debug interface: I2C SDA OUT$/;"	p
dbg_mem_acc	.\omsp_dbg.v	/^wire        dbg_mem_acc  = (|dbg_mem_wr | (dbg_rd_rdy & ~mem_ctl[2]));$/;"	n
dbg_mem_addr	.\omsp_dbg.v	/^output       [15:0] dbg_mem_addr;      \/\/ Debug address for rd\/wr access$/;"	p
dbg_mem_addr	.\omsp_mem_backbone.v	/^input         [15:1] dbg_mem_addr;      \/\/ Debug address for rd\/wr access$/;"	p
dbg_mem_addr	.\openMSP430.v	/^wire          [15:0] dbg_mem_addr;$/;"	n
dbg_mem_din	.\omsp_dbg.v	/^                              mem_addr[0] ? {8'h00, dbg_mem_din[15:8]} :$/;"	n
dbg_mem_din	.\omsp_dbg.v	/^input        [15:0] dbg_mem_din;       \/\/ Debug unit Memory data input$/;"	p
dbg_mem_din	.\omsp_mem_backbone.v	/^output        [15:0] dbg_mem_din;       \/\/ Debug unit Memory data input$/;"	p
dbg_mem_din	.\openMSP430.v	/^wire          [15:0] dbg_mem_din;$/;"	n
dbg_mem_din_bw	.\omsp_dbg.v	/^wire [15:0] dbg_mem_din_bw = ~mem_bw      ? dbg_mem_din                :$/;"	n
dbg_mem_dout	.\omsp_dbg.v	/^output       [15:0] dbg_mem_dout;      \/\/ Debug unit data output$/;"	p
dbg_mem_dout	.\omsp_execution_unit.v	/^input        [15:0] dbg_mem_dout;  \/\/ Debug unit data output$/;"	p
dbg_mem_dout	.\omsp_mem_backbone.v	/^input         [15:0] dbg_mem_dout;      \/\/ Debug unit data output$/;"	p
dbg_mem_dout	.\openMSP430.v	/^wire          [15:0] dbg_mem_dout;$/;"	n
dbg_mem_en	.\omsp_dbg.v	/^output              dbg_mem_en;        \/\/ Debug unit memory enable$/;"	p
dbg_mem_en	.\omsp_mem_backbone.v	/^input                dbg_mem_en;        \/\/ Debug unit memory enable$/;"	p
dbg_mem_en	.\openMSP430.v	/^wire                 dbg_mem_en;$/;"	n
dbg_mem_rd	.\omsp_dbg.v	/^wire        dbg_mem_rd;$/;"	n
dbg_mem_rd_dly	.\omsp_dbg.v	/^reg         dbg_mem_rd_dly;$/;"	r
dbg_mem_wr	.\omsp_dbg.v	/^output        [1:0] dbg_mem_wr;        \/\/ Debug unit memory write$/;"	p
dbg_mem_wr	.\omsp_mem_backbone.v	/^input          [1:0] dbg_mem_wr;        \/\/ Debug unit memory write$/;"	p
dbg_mem_wr	.\openMSP430.v	/^wire           [1:0] dbg_mem_wr;$/;"	n
dbg_mem_wr_msk	.\omsp_dbg.v	/^wire  [1:0] dbg_mem_wr_msk = ~mem_bw      ? 2'b11 :$/;"	n
dbg_rd	.\omsp_dbg.v	/^wire        dbg_rd;$/;"	n
dbg_rd	.\omsp_dbg_i2c.v	/^output              dbg_rd;            \/\/ Debug register data read$/;"	p
dbg_rd	.\omsp_dbg_i2c.v	/^reg         dbg_rd;$/;"	r
dbg_rd	.\omsp_dbg_uart.v	/^output              dbg_rd;         \/\/ Debug register data read$/;"	p
dbg_rd	.\omsp_dbg_uart.v	/^wire        dbg_rd     = mem_burst ? (xfer_done & (uart_state==TX_DATA2)) :$/;"	n
dbg_rd_rdy	.\omsp_dbg.v	/^reg         dbg_rd_rdy;$/;"	r
dbg_rd_rdy	.\omsp_dbg_uart.v	/^input               dbg_rd_rdy;     \/\/ Debug register data is ready for read$/;"	p
dbg_reg_acc	.\omsp_dbg.v	/^wire        dbg_reg_acc  = ( dbg_reg_wr | (dbg_rd_rdy &  mem_ctl[2]));$/;"	n
dbg_reg_din	.\omsp_dbg.v	/^input        [15:0] dbg_reg_din;       \/\/ Debug unit CPU register data input$/;"	p
dbg_reg_din	.\omsp_execution_unit.v	/^output       [15:0] dbg_reg_din;   \/\/ Debug unit CPU register data input$/;"	p
dbg_reg_din	.\openMSP430.v	/^wire          [15:0] dbg_reg_din;$/;"	n
dbg_reg_rd	.\omsp_dbg.v	/^wire        dbg_reg_rd;$/;"	n
dbg_reg_sel	.\omsp_frontend.v	/^input          [3:0] dbg_reg_sel;      \/\/ Debug selected register for rd\/wr access$/;"	p
dbg_reg_wr	.\omsp_dbg.v	/^output              dbg_reg_wr;        \/\/ Debug unit CPU register write$/;"	p
dbg_reg_wr	.\omsp_execution_unit.v	/^input               dbg_reg_wr;    \/\/ Debug unit CPU register write$/;"	p
dbg_reg_wr	.\openMSP430.v	/^wire                 dbg_reg_wr;$/;"	n
dbg_rst	.\omsp_clock_module.v	/^output              dbg_rst;          \/\/ Debug unit reset$/;"	p
dbg_rst	.\omsp_dbg.v	/^input               dbg_rst;           \/\/ Debug unit reset$/;"	p
dbg_rst	.\omsp_dbg_hwbrk.v	/^input          dbg_rst;      \/\/ Debug unit reset$/;"	p
dbg_rst	.\omsp_dbg_i2c.v	/^input               dbg_rst;           \/\/ Debug unit reset$/;"	p
dbg_rst	.\omsp_dbg_uart.v	/^input               dbg_rst;        \/\/ Debug unit reset$/;"	p
dbg_rst	.\openMSP430.v	/^wire                 dbg_rst;$/;"	n
dbg_rst_noscan	.\omsp_clock_module.v	/^   wire   dbg_rst_noscan = 1'b1;$/;"	n
dbg_rst_noscan	.\omsp_clock_module.v	/^reg  dbg_rst_noscan;$/;"	r
dbg_rst_nxt	.\omsp_clock_module.v	/^    wire   dbg_rst_nxt   =  1'b0;$/;"	n
dbg_rst_nxt	.\omsp_clock_module.v	/^    wire   dbg_rst_nxt   =  dbg_en_n_s;$/;"	n
dbg_rst_nxt	.\omsp_clock_module.v	/^    wire   dbg_rst_nxt   = ~dbg_en;$/;"	n
dbg_state	.\omsp_dbg_i2c.v	/^reg   [2:0] dbg_state;$/;"	r
dbg_state_nxt	.\omsp_dbg_i2c.v	/^reg   [2:0] dbg_state_nxt;$/;"	r
dbg_swbrk	.\omsp_dbg.v	/^wire        dbg_swbrk;$/;"	n
dbg_uart_rxd	.\omsp_dbg.v	/^input               dbg_uart_rxd;      \/\/ Debug interface: UART RXD (asynchronous)$/;"	p
dbg_uart_rxd	.\omsp_dbg_uart.v	/^input               dbg_uart_rxd;   \/\/ Debug interface: UART RXD$/;"	p
dbg_uart_rxd	.\openMSP430.v	/^input                dbg_uart_rxd;           \/\/ Debug interface: UART RXD (asynchronous)$/;"	p
dbg_uart_rxd	.\openMSP430_fpga.v	/^wire               dbg_uart_rxd;$/;"	n
dbg_uart_txd	.\omsp_dbg.v	/^output              dbg_uart_txd;      \/\/ Debug interface: UART TXD$/;"	p
dbg_uart_txd	.\omsp_dbg_uart.v	/^output              dbg_uart_txd;   \/\/ Debug interface: UART TXD$/;"	p
dbg_uart_txd	.\omsp_dbg_uart.v	/^reg dbg_uart_txd;$/;"	r
dbg_uart_txd	.\openMSP430.v	/^output               dbg_uart_txd;           \/\/ Debug interface: UART TXD$/;"	p
dbg_uart_txd	.\openMSP430_fpga.v	/^wire               dbg_uart_txd;$/;"	n
dbg_wr	.\omsp_dbg.v	/^wire        dbg_wr;$/;"	n
dbg_wr	.\omsp_dbg_i2c.v	/^output              dbg_wr;            \/\/ Debug register data write$/;"	p
dbg_wr	.\omsp_dbg_i2c.v	/^reg  dbg_wr;$/;"	r
dbg_wr	.\omsp_dbg_uart.v	/^output              dbg_wr;         \/\/ Debug register data write$/;"	p
dbg_wr	.\omsp_dbg_uart.v	/^wire        dbg_wr     = (xfer_done & (uart_state==RX_DATA2));$/;"	n
dcfifo	.\altera_mf.v	/^module dcfifo ( data, rdclk, wrclk, aclr, rdreq, wrreq,$/;"	m
dcfifo	.\work\dcfifo\_primary.vhd	/^entity dcfifo is$/;"	e
dcfifo_async	.\altera_mf.v	/^module dcfifo_async (data, rdclk, wrclk, aclr, rdreq, wrreq,$/;"	m
dcfifo_async	.\work\dcfifo_async\_primary.vhd	/^entity dcfifo_async is$/;"	e
dcfifo_dffpipe	.\altera_mf.v	/^module dcfifo_dffpipe ( d, clock, aclr,$/;"	m
dcfifo_dffpipe	.\work\dcfifo_dffpipe\_primary.vhd	/^entity dcfifo_dffpipe is$/;"	e
dcfifo_fefifo	.\altera_mf.v	/^module dcfifo_fefifo  ( usedw_in, wreq, rreq, clock, aclr,$/;"	m
dcfifo_fefifo	.\work\dcfifo_fefifo\_primary.vhd	/^entity dcfifo_fefifo is$/;"	e
dcfifo_low_latency	.\altera_mf.v	/^module dcfifo_low_latency (data, rdclk, wrclk, aclr, rdreq, wrreq,$/;"	m
dcfifo_low_latency	.\work\dcfifo_low_latency\_primary.vhd	/^entity dcfifo_low_latency is$/;"	e
dcfifo_mixed_widths	.\altera_mf.v	/^module dcfifo_mixed_widths ( data, rdclk, wrclk, aclr, rdreq, wrreq,$/;"	m
dcfifo_mixed_widths	.\work\dcfifo_mixed_widths\_primary.vhd	/^entity dcfifo_mixed_widths is$/;"	e
dcfifo_sync	.\altera_mf.v	/^module dcfifo_sync (data, rdclk, wrclk, aclr, rdreq, wrreq,$/;"	m
dcfifo_sync	.\work\dcfifo_sync\_primary.vhd	/^entity dcfifo_sync is$/;"	e
dclk_create_delay	.\altera_mf.v	/^    parameter    dclk_create_delay    =    0;$/;"	c
dclk_divisor	.\altera_mf.v	/^    parameter    dclk_divisor    =    1;$/;"	c
dclkin	.\altera_mf.v	/^    input    dclkin;$/;"	p
dco_clk	.\omsp_clock_module.v	/^input               dco_clk;          \/\/ Fast oscillator (fast clock)$/;"	p
dco_clk	.\openMSP430.v	/^input                dco_clk;                \/\/ Fast oscillator (fast clock)$/;"	p
dco_clk	.\openMSP430_fpga.v	/^input  dco_clk ;$/;"	p
dco_clk	.\tb_openMSP430_fpga.v	/^reg                dco_clk;$/;"	r
dco_clk_n	.\omsp_clock_module.v	/^   wire dco_clk_n;$/;"	n
dco_disable	.\omsp_clock_module.v	/^   reg  dco_disable;$/;"	r
dco_disable_by_cpu_en	.\omsp_clock_module.v	/^   wire dco_disable_by_cpu_en;$/;"	n
dco_disable_by_scg0	.\omsp_clock_module.v	/^   wire dco_disable_by_scg0;$/;"	n
dco_en_wkup	.\omsp_clock_module.v	/^   wire dco_en_wkup;$/;"	n
dco_enable	.\omsp_clock_module.v	/^      reg  dco_enable;$/;"	r
dco_enable	.\omsp_clock_module.v	/^output              dco_enable;       \/\/ Fast oscillator enable$/;"	p
dco_enable	.\openMSP430.v	/^output               dco_enable;             \/\/ ASIC ONLY: Fast oscillator enable$/;"	p
dco_enable	.\openMSP430_fpga.v	/^wire               dco_enable;$/;"	n
dco_enable_nxt	.\omsp_clock_module.v	/^   wire dco_enable_nxt;$/;"	n
dco_mclk_wkup	.\omsp_clock_module.v	/^   wire dco_mclk_wkup;$/;"	n
dco_not_enabled_by_dbg	.\omsp_clock_module.v	/^   wire dco_not_enabled_by_dbg;$/;"	n
dco_wkup	.\omsp_clock_module.v	/^output              dco_wkup;         \/\/ Fast oscillator wake-up (asynchronous)$/;"	p
dco_wkup	.\omsp_clock_module.v	/^wire dco_wkup;$/;"	n
dco_wkup	.\openMSP430.v	/^output               dco_wkup;               \/\/ ASIC ONLY: Fast oscillator wake-up (asynchronous)$/;"	p
dco_wkup	.\openMSP430_fpga.v	/^wire               dco_wkup;$/;"	n
dco_wkup_n	.\omsp_clock_module.v	/^   wire dco_wkup_n;$/;"	n
dco_wkup_set	.\omsp_clock_module.v	/^   wire dco_wkup_set = dco_mclk_wkup | scg0_and_mclk_dma_wkup | dco_en_wkup | cpu_en_wkup;$/;"	n
dco_wkup_set_scan	.\omsp_clock_module.v	/^   wire dco_wkup_set_scan;$/;"	n
dco_wkup_set_scan_observe	.\omsp_clock_module.v	/^   wire dco_wkup_set_scan_observe;$/;"	n
dd	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
dd	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
ddio_h_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] ddio_h_reg;$/;"	r
ddio_l_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] ddio_l_reg;$/;"	r
decode	.\omsp_frontend.v	/^wire   decode       =  decode_noirq | irq_detect;$/;"	n
decode_noirq	.\omsp_dbg.v	/^input               decode_noirq;      \/\/ Frontend decode instruction$/;"	p
decode_noirq	.\omsp_dbg_hwbrk.v	/^input          decode_noirq; \/\/ Frontend decode instruction$/;"	p
decode_noirq	.\omsp_frontend.v	/^output               decode_noirq;     \/\/ Frontend decode instruction$/;"	p
decode_noirq	.\omsp_frontend.v	/^wire   decode_noirq =  ((i_state==I_DEC) &  (exec_done | (e_state==E_IDLE)));$/;"	n
decode_noirq	.\openMSP430.v	/^wire                 decode_noirq;$/;"	n
decoder_buffer_dout	.\dma_tfbuffer.v	/^ output         [15:0]      decoder_buffer_dout;$/;"	p
decoder_buffer_dout	.\openMSP430_fpga.v	/^wire    [15:0]     decoder_buffer_dout;$/;"	n
decoder_buffer_dout_en	.\dma_tfbuffer.v	/^ output                     decoder_buffer_dout_en;$/;"	p
decoder_buffer_dout_en	.\openMSP430_fpga.v	/^wire               decoder_buffer_dout_en;$/;"	n
decoder_buffer_dout_rd	.\dma_tfbuffer.v	/^wire [15:0] decoder_buffer_dout_rd     = decoder_bufferout1     & {16{reg_rd[DECODER_BUFFEROUT]}};$/;"	n
decoder_buffer_douten	.\dma_tfbuffer.v	/^reg         decoder_buffer_douten;$/;"	r
decoder_buffer_douten_dly1	.\dma_tfbuffer.v	/^reg         decoder_buffer_douten_dly1;$/;"	r
decoder_bufferout1	.\dma_tfbuffer.v	/^reg  [15:0] decoder_bufferout1;$/;"	r
decoder_bufferout1_wr	.\dma_tfbuffer.v	/^wire        decoder_bufferout1_wr = reg_wr[DECODER_BUFFEROUT];$/;"	n
decompressor_mode	.\altera_mf.v	/^    parameter    decompressor_mode    =    "NONE";$/;"	c
dedicated_multiplier_circuitry	.\altera_mf.v	/^    parameter dedicated_multiplier_circuitry = "AUTO";$/;"	c
delay	.\altera_mf.v	/^    parameter delay = (lpm_delay < 2) ? 1 : lpm_delay-1;$/;"	c
delayTime	.\altera_mf.v	/^                reg [`TIME_BIT_LENGTH - 1 : 0 ] delayTime;                    $/;"	r
delay_chain	.\altera_mf.v	/^    integer delay_chain;$/;"	r
delay_rdusedw	.\altera_mf.v	/^    parameter delay_rdusedw = 1;$/;"	c
delay_rdusedw	.\altera_mf.v	/^    parameter delay_rdusedw = 2;$/;"	c
delay_wrusedw	.\altera_mf.v	/^    parameter delay_wrusedw = 1;$/;"	c
delay_wrusedw	.\altera_mf.v	/^    parameter delay_wrusedw = 2;$/;"	c
den	.\altera_mf.v	/^        integer den;$/;"	r
den_dataa	.\altera_mf.v	/^    reg den_dataa;$/;"	r
den_datab	.\altera_mf.v	/^    reg den_datab;$/;"	r
denominator	.\altera_mf.v	/^        input denominator;$/;"	p
denominator	.\altera_mf.v	/^        integer denominator;$/;"	r
denormal	.\altera_mf.v	/^    output denormal;$/;"	p
denormal_bit	.\altera_mf.v	/^    reg denormal_bit;$/;"	r
denormal_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] denormal_pipe;$/;"	r
denormal_support	.\altera_mf.v	/^    parameter denormal_support = "YES";$/;"	c
depth	.\altera_mf.v	/^    parameter depth = 3;   $/;"	c
depth	.\altera_mf.v	/^    parameter depth = 3; \/\/ This value must be >= 2 !$/;"	c
depth_found	.\altera_mf.v	/^    reg depth_found;$/;"	r
deserialization_factor	.\altera_mf.v	/^    parameter deserialization_factor = 4;$/;"	c
dest_reg	.\omsp_frontend.v	/^wire [3:0] dest_reg = ir[3:0];$/;"	n
device	.\altera_mf.v	/^    input[8*20:1] device;$/;"	p
dffa_out	.\altera_mf.v	/^    wire dffa_out;$/;"	n
dffb_out	.\altera_mf.v	/^    wire dffb_out;$/;"	n
dffc_out	.\altera_mf.v	/^    wire dffc_out;$/;"	n
dffd_out	.\altera_mf.v	/^    wire dffd_out;$/;"	n
dffp	.\altera_mf.v	/^module dffp ( $/;"	m
dffp	.\work\dffp\_primary.vhd	/^entity dffp is$/;"	e
dffpipe	.\altera_mf.v	/^    reg [(lpm_width*delay)-1:0] dffpipe;$/;"	r
diff_percent_period	.\altera_mf.v	/^    real last_inclk0_edge,last_inclk1_edge,diff_percent_period;$/;"	r
diff_width_a	.\altera_mf.v	/^    parameter diff_width_a = (int_width_a > width_a) ? int_width_a - width_a : 1;$/;"	c
diff_width_b	.\altera_mf.v	/^    parameter diff_width_b = (int_width_b > width_b) ? int_width_b - width_b : 1;$/;"	c
differential_drive	.\altera_mf.v	/^    parameter differential_drive = 0;$/;"	c
digit	.\altera_mf.v	/^        reg [8:1] digit;$/;"	r
digit	.\altera_mf.v	/^    reg [8:1] digit;$/;"	r
digit	.\altera_mf.v	/^reg [8:1] digit;$/;"	r
din	.\altera_mf.v	/^    input   din;$/;"	p
din	.\altera_mf.v	/^    input [width-1:0] din;$/;"	p
din_last	.\altera_mf.v	/^    reg   din_last;$/;"	r
disable_crc_checkbox	.\altera_mf.v	/^    parameter    disable_crc_checkbox    =    0;$/;"	c
display_address	.\altera_mf.v	/^    reg display_address;$/;"	r
div_clk_count_neg	.\altera_mf.v	/^    reg [3 : 0] div_clk_count_neg;$/;"	r
div_clk_count_pos	.\altera_mf.v	/^    reg [3 : 0] div_clk_count_pos;$/;"	r
divax_mask	.\omsp_clock_module.v	/^wire [7:0] divax_mask      = 8'h00;$/;"	n
divax_mask	.\omsp_clock_module.v	/^wire [7:0] divax_mask      = 8'h30;$/;"	n
divax_s	.\omsp_clock_module.v	/^   reg [1:0] divax_s;$/;"	r
divax_ss	.\omsp_clock_module.v	/^   reg [1:0] divax_ss;$/;"	r
divax_ss	.\omsp_clock_module.v	/^   wire [1:0] divax_ss     = bcsctl1[`DIVAx];$/;"	n
divide_factor	.\altera_mf.v	/^    integer divide_factor;$/;"	r
divmx_mask	.\omsp_clock_module.v	/^wire [7:0] divmx_mask = 8'h00;$/;"	n
divmx_mask	.\omsp_clock_module.v	/^wire [7:0] divmx_mask = 8'h30;$/;"	n
divsx_mask	.\omsp_clock_module.v	/^wire [7:0] divsx_mask = 8'h00;$/;"	n
divsx_mask	.\omsp_clock_module.v	/^wire [7:0] divsx_mask = 8'h06;$/;"	n
divsx_s	.\omsp_clock_module.v	/^     reg [1:0] divsx_s;$/;"	r
divsx_ss	.\omsp_clock_module.v	/^      wire [1:0] divsx_ss     = bcsctl2[`DIVSx];$/;"	n
divsx_ss	.\omsp_clock_module.v	/^     reg [1:0] divsx_ss;$/;"	r
dma0_ctl	.\dma_pri.v	/^input  [15:0]                           dma0_ctl       ;$/;"	p
dma0_ctl	.\dma_pri.v	/^wire  [15:0]                           dma0_ctl        ;$/;"	n
dma0_ctl	.\openMSP430_fpga.v	/^wire         [15:0]dma0_ctl;$/;"	n
dma0_ctl_en	.\dma_pri.v	/^input                                   dma0_ctl_en    ;$/;"	p
dma0_ctl_en	.\dma_pri.v	/^wire                                   dma0_ctl_en     ;$/;"	n
dma0_ctl_rd	.\dma_decode_16b.v	/^wire [15:0] dma0_ctl_rd  = dma0_ctl  & {16{reg_rd[DMA0CTL]}};$/;"	n
dma0_ctl_wr	.\dma_decode_16b.v	/^wire        dma0_ctl_wr = reg_wr[DMA0CTL];$/;"	n
dma0_da	.\openMSP430_fpga.v	/^wire         [15:0]dma0_da;$/;"	n
dma0_da_rd	.\dma_decode_16b.v	/^wire [15:0] dma0_da_rd   = dma0_da   & {16{reg_rd[DMA0DA ]}};$/;"	n
dma0_da_wr	.\dma_decode_16b.v	/^wire        dma0_da_wr = reg_wr[DMA0DA];$/;"	n
dma0_sa	.\openMSP430_fpga.v	/^wire         [15:0]dma0_sa;$/;"	n
dma0_sa_rd	.\dma_decode_16b.v	/^wire [15:0] dma0_sa_rd   = dma0_sa   & {16{reg_rd[DMA0SA ]}};$/;"	n
dma0_sa_wr	.\dma_decode_16b.v	/^wire        dma0_sa_wr = reg_wr[DMA0SA];$/;"	n
dma0_sz	.\openMSP430_fpga.v	/^wire         [15:0]dma0_sz;$/;"	n
dma0_sz_rd	.\dma_decode_16b.v	/^wire [15:0] dma0_sz_rd   = dma0_sz   & {16{reg_rd[DMA0SZ ]}};$/;"	n
dma0_sz_wr	.\dma_decode_16b.v	/^wire        dma0_sz_wr = reg_wr[DMA0SZ];$/;"	n
dma0_tri	.\dma_pri.v	/^reg                                    dma0_tri        ;$/;"	r
dma0req_en	.\dma_pri.v	/^wire                                   dma0req_en      ;$/;"	n
dma0req_en_reg	.\dma_pri.v	/^reg                                    dma0req_en_reg  ;$/;"	r
dma1_ctl	.\dma_pri.v	/^input  [15:0]                           dma1_ctl       ;$/;"	p
dma1_ctl	.\dma_pri.v	/^wire  [15:0]                           dma1_ctl        ;$/;"	n
dma1_ctl	.\openMSP430_fpga.v	/^wire         [15:0]dma1_ctl;$/;"	n
dma1_ctl_en	.\dma_pri.v	/^input                                   dma1_ctl_en    ;$/;"	p
dma1_ctl_en	.\dma_pri.v	/^wire                                   dma1_ctl_en     ;$/;"	n
dma1_ctl_rd	.\dma_decode_16b.v	/^wire [15:0] dma1_ctl_rd  = dma1_ctl  & {16{reg_rd[DMA1CTL]}};$/;"	n
dma1_ctl_wr	.\dma_decode_16b.v	/^wire        dma1_ctl_wr = reg_wr[DMA1CTL];$/;"	n
dma1_da	.\openMSP430_fpga.v	/^wire         [15:0]dma1_da;$/;"	n
dma1_da_rd	.\dma_decode_16b.v	/^wire [15:0] dma1_da_rd   = dma1_da   & {16{reg_rd[DMA1DA ]}};$/;"	n
dma1_da_wr	.\dma_decode_16b.v	/^wire        dma1_da_wr = reg_wr[DMA1DA];$/;"	n
dma1_sa	.\openMSP430_fpga.v	/^wire         [15:0]dma1_sa;$/;"	n
dma1_sa_rd	.\dma_decode_16b.v	/^wire [15:0] dma1_sa_rd   = dma1_sa   & {16{reg_rd[DMA1SA ]}};$/;"	n
dma1_sa_wr	.\dma_decode_16b.v	/^wire        dma1_sa_wr = reg_wr[DMA1SA];$/;"	n
dma1_sz	.\openMSP430_fpga.v	/^wire         [15:0]dma1_sz;$/;"	n
dma1_sz_rd	.\dma_decode_16b.v	/^wire [15:0] dma1_sz_rd   = dma1_sz   & {16{reg_rd[DMA1SZ ]}};$/;"	n
dma1_sz_wr	.\dma_decode_16b.v	/^wire        dma1_sz_wr = reg_wr[DMA1SZ];$/;"	n
dma1_tri	.\dma_pri.v	/^reg                                    dma1_tri        ;$/;"	r
dma1req_en	.\dma_pri.v	/^wire                                   dma1req_en      ;$/;"	n
dma1req_en_reg	.\dma_pri.v	/^reg                                    dma1req_en_reg  ;$/;"	r
dma2_ctl	.\dma_pri.v	/^input  [15:0]                           dma2_ctl       ;$/;"	p
dma2_ctl	.\dma_pri.v	/^wire  [15:0]                           dma2_ctl        ;$/;"	n
dma2_ctl	.\openMSP430_fpga.v	/^wire         [15:0]dma2_ctl;$/;"	n
dma2_ctl_en	.\dma_pri.v	/^input                                   dma2_ctl_en    ;$/;"	p
dma2_ctl_en	.\dma_pri.v	/^wire                                   dma2_ctl_en     ;$/;"	n
dma2_ctl_rd	.\dma_decode_16b.v	/^wire [15:0] dma2_ctl_rd  = dma2_ctl  & {16{reg_rd[DMA2CTL]}};$/;"	n
dma2_ctl_wr	.\dma_decode_16b.v	/^wire        dma2_ctl_wr = reg_wr[DMA2CTL];$/;"	n
dma2_da	.\openMSP430_fpga.v	/^wire         [15:0]dma2_da;$/;"	n
dma2_da_rd	.\dma_decode_16b.v	/^wire [15:0] dma2_da_rd   = dma2_da   & {16{reg_rd[DMA2DA ]}};$/;"	n
dma2_da_wr	.\dma_decode_16b.v	/^wire        dma2_da_wr = reg_wr[DMA2DA];$/;"	n
dma2_sa	.\openMSP430_fpga.v	/^wire         [15:0]dma2_sa;$/;"	n
dma2_sa_rd	.\dma_decode_16b.v	/^wire [15:0] dma2_sa_rd   = dma2_sa   & {16{reg_rd[DMA2SA ]}};$/;"	n
dma2_sa_wr	.\dma_decode_16b.v	/^wire        dma2_sa_wr = reg_wr[DMA2SA];$/;"	n
dma2_sz	.\openMSP430_fpga.v	/^wire         [15:0]dma2_sz;$/;"	n
dma2_sz_rd	.\dma_decode_16b.v	/^wire [15:0] dma2_sz_rd   = dma2_sz   & {16{reg_rd[DMA2SZ ]}};$/;"	n
dma2_sz_wr	.\dma_decode_16b.v	/^wire        dma2_sz_wr = reg_wr[DMA2SZ];$/;"	n
dma2_tri	.\dma_pri.v	/^reg                                    dma2_tri        ;$/;"	r
dma2req_en	.\dma_pri.v	/^wire                                   dma2req_en      ;$/;"	n
dma2req_en_reg	.\dma_pri.v	/^reg                                    dma2req_en_reg  ;$/;"	r
dma_addr	.\omsp_mem_backbone.v	/^input         [15:1] dma_addr;          \/\/ Direct Memory Access address$/;"	p
dma_addr	.\openMSP430.v	/^input         [15:1] dma_addr;               \/\/ Direct Memory Access address$/;"	p
dma_addr	.\openMSP430_fpga.v	/^wire        [15:1] dma_addr;$/;"	n
dma_channel	.\dma_channel.vhd	/^ENTITY dma_channel IS$/;"	e
dma_cpuoff_mask	.\omsp_clock_module.v	/^wire [7:0] dma_cpuoff_mask = 8'h00;$/;"	n
dma_cpuoff_mask	.\omsp_clock_module.v	/^wire [7:0] dma_cpuoff_mask = 8'h01;$/;"	n
dma_ctl0	.\dma_pri.v	/^input  [15:0]                           dma_ctl0       ;$/;"	p
dma_ctl0	.\dma_pri.v	/^wire  [15:0]                           dma_ctl0        ;$/;"	n
dma_ctl0	.\openMSP430_fpga.v	/^wire         [15:0]dma_ctl0;$/;"	n
dma_ctl0_rd	.\dma_decode_16b.v	/^wire [15:0] dma_ctl0_rd  = dma_ctl0  & {16{reg_rd[DMACTL0]}};$/;"	n
dma_ctl0_wr	.\dma_decode_16b.v	/^wire        dma_ctl0_wr = reg_wr[DMACTL0];$/;"	n
dma_ctl1	.\dma_pri.v	/^input  [15:0]                           dma_ctl1       ;$/;"	p
dma_ctl1	.\dma_pri.v	/^wire  [15:0]                           dma_ctl1        ;$/;"	n
dma_ctl1	.\openMSP430_fpga.v	/^wire         [15:0]dma_ctl1;$/;"	n
dma_ctl1_rd	.\dma_decode_16b.v	/^wire [15:0] dma_ctl1_rd  = dma_ctl1  & {16{reg_rd[DMACTL1]}};$/;"	n
dma_ctl1_wr	.\dma_decode_16b.v	/^wire        dma_ctl1_wr = reg_wr[DMACTL1];$/;"	n
dma_decode_16b	.\dma_decode_16b.v	/^module  dma_decode_16b ($/;"	m
dma_decode_16b	.\work\dma_decode_16b\_primary.vhd	/^entity dma_decode_16b is$/;"	e
dma_din	.\omsp_mem_backbone.v	/^input         [15:0] dma_din;           \/\/ Direct Memory Access data input$/;"	p
dma_din	.\openMSP430.v	/^input         [15:0] dma_din;                \/\/ Direct Memory Access data input$/;"	p
dma_din	.\openMSP430_fpga.v	/^wire        [15:0] dma_din;$/;"	n
dma_dout	.\omsp_mem_backbone.v	/^output        [15:0] dma_dout;          \/\/ Direct Memory Access data output$/;"	p
dma_dout	.\openMSP430.v	/^output        [15:0] dma_dout;               \/\/ Direct Memory Access data output$/;"	p
dma_dout	.\openMSP430_fpga.v	/^wire        [15:0] dma_dout;$/;"	n
dma_en	.\omsp_frontend.v	/^input                dma_en;           \/\/ Direct Memory Access enable (high active)$/;"	p
dma_en	.\omsp_mem_backbone.v	/^input                dma_en;            \/\/ Direct Memory Access enable (high active)$/;"	p
dma_en	.\openMSP430.v	/^input                dma_en;                 \/\/ Direct Memory Access enable (high active)$/;"	p
dma_en	.\openMSP430_fpga.v	/^wire               dma_en;$/;"	n
dma_master	.\dma_master.vhd	/^ENTITY dma_master IS$/;"	e
dma_mclk	.\omsp_clock_module.v	/^output              dma_mclk;         \/\/ Main system DMA and\/or CPU clock$/;"	p
dma_mclk	.\openMSP430.v	/^wire                 dma_mclk;$/;"	n
dma_oscoff_mask	.\omsp_clock_module.v	/^wire [7:0] dma_oscoff_mask = 8'h00;$/;"	n
dma_oscoff_mask	.\omsp_clock_module.v	/^wire [7:0] dma_oscoff_mask = 8'h02;$/;"	n
dma_pri	.\dma_pri.v	/^module  dma_pri ($/;"	m
dma_pri	.\work\dma_pri\_primary.vhd	/^entity dma_pri is$/;"	e
dma_priority	.\dma_pri.v	/^output                                  dma_priority   ;$/;"	p
dma_priority	.\omsp_mem_backbone.v	/^input                dma_priority;      \/\/ Direct Memory Access priority (0:low \/ 1:high)$/;"	p
dma_priority	.\openMSP430.v	/^input                dma_priority;           \/\/ Direct Memory Access priority (0:low \/ 1:high)$/;"	p
dma_priority	.\openMSP430_fpga.v	/^wire               dma_priority;$/;"	n
dma_ready	.\omsp_mem_backbone.v	/^output               dma_ready;         \/\/ Direct Memory Access is complete$/;"	p
dma_ready	.\openMSP430.v	/^output               dma_ready;              \/\/ Direct Memory Access is complete$/;"	p
dma_ready	.\openMSP430_fpga.v	/^wire               dma_ready;$/;"	n
dma_ready_dly	.\omsp_mem_backbone.v	/^reg         dma_ready_dly;$/;"	r
dma_resp	.\omsp_mem_backbone.v	/^output               dma_resp;          \/\/ Direct Memory Access response (0:Okay \/ 1:Error)$/;"	p
dma_resp	.\openMSP430.v	/^output               dma_resp;               \/\/ Direct Memory Access response (0:Okay \/ 1:Error)$/;"	p
dma_resp	.\openMSP430_fpga.v	/^wire               dma_resp;$/;"	n
dma_scg0_mask	.\omsp_clock_module.v	/^wire [7:0] dma_scg0_mask   = 8'h00;$/;"	n
dma_scg0_mask	.\omsp_clock_module.v	/^wire [7:0] dma_scg0_mask   = 8'h04;$/;"	n
dma_scg1_mask	.\omsp_clock_module.v	/^wire [7:0] dma_scg1_mask   = 8'h00;$/;"	n
dma_scg1_mask	.\omsp_clock_module.v	/^wire [7:0] dma_scg1_mask   = 8'h08;$/;"	n
dma_tfbuffer	.\dma_tfbuffer.v	/^module dma_tfbuffer($/;"	m
dma_tfbuffer	.\work\dma_tfbuffer\_primary.vhd	/^entity dma_tfbuffer is$/;"	e
dma_we	.\omsp_mem_backbone.v	/^input          [1:0] dma_we;            \/\/ Direct Memory Access write byte enable (high active)$/;"	p
dma_we	.\openMSP430.v	/^input          [1:0] dma_we;                 \/\/ Direct Memory Access write byte enable (high active)$/;"	p
dma_we	.\openMSP430_fpga.v	/^wire         [1:0] dma_we;$/;"	n
dma_wkup	.\omsp_frontend.v	/^input                dma_wkup;         \/\/ DMA Sub-System Wake-up (asynchronous and non-glitchy)$/;"	p
dma_wkup	.\openMSP430.v	/^input                dma_wkup;               \/\/ ASIC ONLY: DMA Wake-up (asynchronous and non-glitchy)$/;"	p
dma_wkup	.\openMSP430_fpga.v	/^wire               dma_wkup;$/;"	n
dmem_addr	.\omsp_mem_backbone.v	/^output [`DMEM_MSB:0] dmem_addr;         \/\/ Data Memory address$/;"	p
dmem_addr	.\omsp_mem_backbone.v	/^wire [`DMEM_MSB:0] dmem_addr     =   ext_dmem_en ?  ext_dmem_addr[`DMEM_MSB:0] :  eu_dmem_addr[`DMEM_MSB:0];$/;"	n
dmem_addr	.\openMSP430.v	/^output [`DMEM_MSB:0] dmem_addr;              \/\/ Data Memory address$/;"	p
dmem_addr	.\openMSP430_fpga.v	/^wire [`DMEM_MSB:0] dmem_addr;$/;"	n
dmem_cen	.\omsp_mem_backbone.v	/^output               dmem_cen;          \/\/ Data Memory chip enable (low active)$/;"	p
dmem_cen	.\omsp_mem_backbone.v	/^wire               dmem_cen      = ~(ext_dmem_en | eu_dmem_en);$/;"	n
dmem_cen	.\openMSP430.v	/^output               dmem_cen;               \/\/ Data Memory chip enable (low active)$/;"	p
dmem_cen	.\openMSP430_fpga.v	/^wire               dmem_cen;$/;"	n
dmem_din	.\omsp_mem_backbone.v	/^output        [15:0] dmem_din;          \/\/ Data Memory data input$/;"	p
dmem_din	.\omsp_mem_backbone.v	/^wire        [15:0] dmem_din      =   ext_dmem_en ?  ext_mem_dout               :  eu_mdb_out;$/;"	n
dmem_din	.\openMSP430.v	/^output        [15:0] dmem_din;               \/\/ Data Memory data input$/;"	p
dmem_din	.\openMSP430_fpga.v	/^wire        [15:0] dmem_din;$/;"	n
dmem_dout	.\omsp_mem_backbone.v	/^input         [15:0] dmem_dout;         \/\/ Data Memory data output$/;"	p
dmem_dout	.\openMSP430.v	/^input         [15:0] dmem_dout;              \/\/ Data Memory data output$/;"	p
dmem_dout	.\openMSP430_fpga.v	/^wire        [15:0] dmem_dout;$/;"	n
dmem_size	.\omsp_sfr.v	/^wire  [8:0] dmem_size    = (`DMEM_SIZE >> 7);  \/\/ cpu_id_dmem *  128 = data memory size$/;"	n
dmem_wen	.\omsp_mem_backbone.v	/^output         [1:0] dmem_wen;          \/\/ Data Memory write enable (low active)$/;"	p
dmem_wen	.\omsp_mem_backbone.v	/^wire         [1:0] dmem_wen      =   ext_dmem_en ? ~ext_mem_wr                 : ~eu_mb_wr;$/;"	n
dmem_wen	.\openMSP430.v	/^output         [1:0] dmem_wen;               \/\/ Data Memory write byte enable (low active)$/;"	p
dmem_wen	.\openMSP430_fpga.v	/^wire         [1:0] dmem_wen;$/;"	n
do_add1_level1	.\altera_mf.v	/^    function [2*int_width_result - 1:0] do_add1_level1;$/;"	f
do_add3_level1	.\altera_mf.v	/^    function [2*int_width_result - 1:0] do_add3_level1;$/;"	f
do_multiply	.\altera_mf.v	/^    function [(int_width_a + int_width_b - 1):0] do_multiply;$/;"	f
do_multiply_loopback	.\altera_mf.v	/^    function [(int_width_a + int_width_b - 1):0] do_multiply_loopback;$/;"	f
do_multiply_stratixv	.\altera_mf.v	/^    function [(int_width_a + int_width_b  - 1):0] do_multiply_stratixv;$/;"	f
do_preadder_add	.\altera_mf.v	/^    function [2*int_width_result - 1:0] do_preadder_add;$/;"	f
do_preadder_sub	.\altera_mf.v	/^    function [2*int_width_result - 1:0] do_preadder_sub;$/;"	f
do_sub1_level1	.\altera_mf.v	/^    function [2*int_width_result:0] do_sub1_level1;$/;"	f
do_sub3_level1	.\altera_mf.v	/^    function [2*int_width_result - 1:0] do_sub3_level1;$/;"	f
done	.\altera_mf.v	/^    reg done;$/;"	r
dout	.\altera_mf.v	/^    output  dout;$/;"	p
dout	.\altera_mf.v	/^    output [width-1:0] dout;$/;"	p
dout	.\altera_mf.v	/^    wire  dout;$/;"	n
down_spread	.\altera_mf.v	/^    parameter down_spread                          = "0.0";$/;"	c
down_spread	.\altera_mf.v	/^    parameter down_spread = "0.0";$/;"	c
down_spread	.\altera_mf.v	/^parameter   down_spread               = "0.0";$/;"	c
dpa_clk_tmp	.\altera_mf.v	/^    reg [PHASE_NUM-1 : 0] dpa_clk_tmp;$/;"	r
dpa_clock	.\altera_mf.v	/^    wire dpa_clock;$/;"	n
dpa_dataout_tmp	.\altera_mf.v	/^    reg [PHASE_NUM-1 : 0] dpa_dataout_tmp;$/;"	r
dpa_divide_by	.\altera_mf.v	/^    parameter dpa_divide_by = 0;$/;"	c
dpa_divide_by	.\altera_mf.v	/^parameter dpa_divide_by = 0;$/;"	c
dpa_divider	.\altera_mf.v	/^    parameter dpa_divider = 0;       \/\/ 0, 1, 2, 4$/;"	c
dpa_divider	.\altera_mf.v	/^    parameter dpa_divider = 1;$/;"	c
dpa_divider	.\altera_mf.v	/^parameter dpa_divider = 0;$/;"	c
dpa_in	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] dpa_in;$/;"	r
dpa_in	.\altera_mf.v	/^    reg dpa_in;$/;"	r
dpa_initial_phase_value	.\altera_mf.v	/^    parameter dpa_initial_phase_value = 0;$/;"	c
dpa_loaden	.\altera_mf.v	/^    reg [PHASE_NUM-1 : 0] dpa_loaden;$/;"	r
dpa_loaden	.\altera_mf.v	/^    wire dpa_loaden;$/;"	n
dpa_locked	.\altera_mf.v	/^    wire dpa_locked;$/;"	n
dpa_locked_dly	.\altera_mf.v	/^    reg dpa_locked_dly;$/;"	r
dpa_locked_tmp	.\altera_mf.v	/^    reg dpa_locked_tmp;$/;"	r
dpa_multiply_by	.\altera_mf.v	/^    parameter dpa_multiply_by = 0;$/;"	c
dpa_multiply_by	.\altera_mf.v	/^parameter dpa_multiply_by = 0;$/;"	c
dpa_pll_cal_busy	.\altera_mf.v	/^    output dpa_pll_cal_busy;$/;"	p
dpa_pll_recal	.\altera_mf.v	/^    input dpa_pll_recal;$/;"	p
dpa_pll_recalibrate	.\altera_mf.v	/^    tri0 dpa_pll_recalibrate;$/;"	n
dpagclk	.\altera_mf.v	/^    wire [number_of_channels -1:0] dpagclk;$/;"	n
dpagclk_pre	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] dpagclk_pre;$/;"	r
dpaswitch	.\altera_mf.v	/^    wire dpaswitch;$/;"	n
dpll_clk_count	.\altera_mf.v	/^    integer dpll_clk_count[number_of_channels -1: 0];$/;"	r
dpll_first_lock	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] dpll_first_lock;$/;"	r
dpll_first_lock	.\altera_mf.v	/^    reg dpll_first_lock;$/;"	r
dpll_lock_count	.\altera_mf.v	/^    parameter dpll_lock_count = 0;$/;"	c
dpll_lock_window	.\altera_mf.v	/^    parameter dpll_lock_window = 0;$/;"	c
dprio_addr	.\altera_mf.v	/^        output   [15:0]  dprio_addr;$/;"	p
dprio_addr	.\altera_mf.v	/^  output [15:0]                     dprio_addr, \/\/ increase to 16 bits$/;"	p
dprio_busy	.\altera_mf.v	/^        input   dprio_busy;$/;"	p
dprio_busy	.\altera_mf.v	/^  input                             dprio_busy,$/;"	p
dprio_data_width	.\altera_mf.v	/^  parameter dprio_data_width = 16,$/;"	c
dprio_datain	.\altera_mf.v	/^        input   [15:0]  dprio_datain;$/;"	p
dprio_dataout	.\altera_mf.v	/^        output   [15:0]  dprio_dataout;$/;"	p
dprio_rden	.\altera_mf.v	/^        output   dprio_rden;$/;"	p
dprio_read	.\altera_mf.v	/^	parameter dprio_read		= 5'd14;$/;"	c
dprio_reg	.\altera_mf.v	/^  reg [12:0] dprio_reg [(1 << channel_address_width)-1:0];$/;"	r
dprio_reg	.\altera_mf.v	/^  reg [6:0] dprio_reg [(1 << channel_address_width)-1:0];$/;"	r
dprio_reg0q	.\altera_mf.v	/^  reg [12:0] dprio_reg0q [(1 << channel_address_width)-1:0]; \/\/ make this scale with the channel width - 6 bits for phase step, one for enable$/;"	r
dprio_reg0q	.\altera_mf.v	/^  reg [6:0] dprio_reg0q [(1 << channel_address_width)-1:0]; \/\/ make this scale with the channel width - 6 bits for phase step, one for enable$/;"	r
dprio_wait	.\altera_mf.v	/^	parameter dprio_wait		= 5'd8;$/;"	c
dprio_wren	.\altera_mf.v	/^        output   dprio_wren;$/;"	p
dprio_wren	.\altera_mf.v	/^  output                            dprio_wren,$/;"	p
dprio_write	.\altera_mf.v	/^	parameter dprio_write		= 5'd15;$/;"	c
dqsundelayedout	.\altera_mf.v	/^output [width-1:0] dqsundelayedout;$/;"	p
dsp_block_balancing	.\altera_mf.v	/^    parameter dsp_block_balancing            = "AUTO";$/;"	c
dst_acalc	.\omsp_frontend.v	/^wire dst_acalc     =  inst_ad[`IDX]       | inst_ad[`SYMB]        | inst_ad[`ABS];$/;"	n
dst_acalc_pre	.\omsp_frontend.v	/^wire dst_acalc_pre =  inst_ad_nxt[`IDX]   | inst_ad_nxt[`SYMB]    | inst_ad_nxt[`ABS];$/;"	n
dst_fffe_sel	.\omsp_execution_unit.v	/^wire dst_fffe_sel       =  (e_state==`E_IRQ_0)  |$/;"	n
dst_inst_sext_sel	.\omsp_execution_unit.v	/^wire dst_inst_sext_sel  = ((e_state==`E_SRC_RD) & (inst_as[`IDX] | inst_as[`SYMB] |$/;"	n
dst_mdb_in_bw_sel	.\omsp_execution_unit.v	/^wire dst_mdb_in_bw_sel  = ((e_state==`E_DST_WR) &   inst_so[`RETI]) |$/;"	n
dst_rd	.\omsp_frontend.v	/^wire dst_rd        =  inst_ad[`IDX]       | inst_so[`PUSH]        | inst_so[`CALL]     | inst_so[`RETI];$/;"	n
dst_rd_pre	.\omsp_frontend.v	/^wire dst_rd_pre    =  inst_ad_nxt[`IDX]   | inst_so_nxt[`PUSH]    | inst_so_nxt[`CALL] | inst_so_nxt[`RETI];$/;"	n
dst_reg_dest_sel	.\omsp_execution_unit.v	/^wire dst_reg_dest_sel   = ((e_state==`E_DST_RD) & ~(inst_so[`PUSH] | inst_so[`CALL] | inst_ad[`ABS] | inst_so[`RETI])) |$/;"	n
dual_port_addreg_b_clk0	.\altera_mf.v	/^    parameter dual_port_addreg_b_clk0 = (((operation_mode == "DUAL_PORT") && (address_reg_b == "CLOCK0"))? 1: 0);$/;"	c
dual_port_addreg_b_clk1	.\altera_mf.v	/^    parameter dual_port_addreg_b_clk1 = (((operation_mode == "DUAL_PORT") && (address_reg_b == "CLOCK1"))? 1: 0);$/;"	c
dummy_hub	.\altera_mf.v	/^module dummy_hub (jtag_tck,jtag_tdi,jtag_tms,jtag_usr1,jtag_state_tlr,jtag_state_rti,$/;"	m
dummy_hub	.\work\dummy_hub\_primary.vhd	/^entity dummy_hub is$/;"	e
dummy_state_cdr	.\altera_mf.v	/^    output   dummy_state_cdr;     \/\/ cdr state signal to world$/;"	p
dummy_state_cir	.\altera_mf.v	/^    output   dummy_state_cir;    \/\/ cir state signal to world$/;"	p
dummy_state_drs	.\altera_mf.v	/^    output   dummy_state_drs;     \/\/ drs state signal to world$/;"	p
dummy_state_e1dr	.\altera_mf.v	/^    output   dummy_state_e1dr;    \/\/ e1dr state signal to the world$/;"	p
dummy_state_e1ir	.\altera_mf.v	/^    output   dummy_state_e1ir;   \/\/ e1ir state signal to world$/;"	p
dummy_state_e2dr	.\altera_mf.v	/^    output   dummy_state_e2dr;    \/\/ e2dr state signal to world$/;"	p
dummy_state_e2ir	.\altera_mf.v	/^    output   dummy_state_e2ir;   \/\/ e2ir state signal to world$/;"	p
dummy_state_irs	.\altera_mf.v	/^    output   dummy_state_irs;     \/\/ irs state signal to world$/;"	p
dummy_state_pdr	.\altera_mf.v	/^    output   dummy_state_pdr;     \/\/ pdr state signal to world$/;"	p
dummy_state_pir	.\altera_mf.v	/^    output   dummy_state_pir;    \/\/ pir state signal to world$/;"	p
dummy_state_rti	.\altera_mf.v	/^    output   dummy_state_rti;     \/\/ rti state signal to world$/;"	p
dummy_state_sdr	.\altera_mf.v	/^    output   dummy_state_sdr;     \/\/ sdr state signal to world$/;"	p
dummy_state_sir	.\altera_mf.v	/^    output   dummy_state_sir;    \/\/ sir state signal to world$/;"	p
dummy_state_tlr	.\altera_mf.v	/^    output   dummy_state_tlr;     \/\/ tlr state signal to world$/;"	p
dummy_state_udr	.\altera_mf.v	/^    output   dummy_state_udr;     \/\/ udr state signal to world$/;"	p
dummy_state_uir	.\altera_mf.v	/^    output   dummy_state_uir;    \/\/ uir state signal to world$/;"	p
dummy_tck	.\altera_mf.v	/^    output   dummy_tck;           \/\/ tck signal to world$/;"	p
dummy_tck_reg	.\altera_mf.v	/^    reg   dummy_tck_reg; \/\/ register for dummy_tck.$/;"	r
dummy_tdi	.\altera_mf.v	/^    output   dummy_tdi;           \/\/ tdi signal to world$/;"	p
dummy_tdi_reg	.\altera_mf.v	/^    reg   dummy_tdi_reg; \/\/ register for dummy_tdi$/;"	r
dummy_tdo	.\altera_mf.v	/^    input   dummy_tdo;      \/\/ tdo signal from world$/;"	p
dummy_tms	.\altera_mf.v	/^    output   dummy_tms;           \/\/ tms signal to world$/;"	p
duty_cycle	.\altera_mf.v	/^    input duty_cycle;$/;"	p
duty_cycle	.\altera_mf.v	/^    input output_counter_value, duty_cycle;$/;"	p
duty_cycle	.\altera_mf.v	/^    integer duty_cycle;$/;"	r
duty_cycle	.\altera_mf.v	/^    integer output_counter_value, duty_cycle, counter_h;$/;"	r
duty_cycle	.\altera_mf.v	/^    integer output_counter_value, duty_cycle;$/;"	r
e0_clk	.\altera_mf.v	/^    wire e0_clk;$/;"	n
e0_high	.\altera_mf.v	/^    parameter e0_high = 1;$/;"	c
e0_high	.\altera_mf.v	/^parameter   e0_high             = 1;$/;"	c
e0_high_val	.\altera_mf.v	/^    reg [31:0] e0_high_val;$/;"	r
e0_initial	.\altera_mf.v	/^    parameter e0_initial = 1;$/;"	c
e0_initial	.\altera_mf.v	/^parameter   e0_initial          = 1;$/;"	c
e0_initial_val	.\altera_mf.v	/^    reg [31:0] e0_initial_val;$/;"	r
e0_low	.\altera_mf.v	/^    parameter e0_low = 1;$/;"	c
e0_low	.\altera_mf.v	/^parameter   e0_low              = 1;$/;"	c
e0_low_val	.\altera_mf.v	/^    reg [31:0] e0_low_val;$/;"	r
e0_mode	.\altera_mf.v	/^    parameter e0_mode = "bypass";$/;"	c
e0_mode	.\altera_mf.v	/^parameter   e0_mode             = "bypass";$/;"	c
e0_mode_val	.\altera_mf.v	/^    reg [8*6:1] e0_mode_val;$/;"	r
e0_ph	.\altera_mf.v	/^    parameter e0_ph = 0;$/;"	c
e0_ph	.\altera_mf.v	/^parameter   e0_ph               = 0;$/;"	c
e0_time_delay	.\altera_mf.v	/^    parameter e0_time_delay = 0;$/;"	c
e0_time_delay	.\altera_mf.v	/^parameter   e0_time_delay       = 0;$/;"	c
e0_time_delay_val	.\altera_mf.v	/^    reg [31:0] e0_time_delay_val;$/;"	r
e1_clk	.\altera_mf.v	/^    wire e1_clk;$/;"	n
e1_high	.\altera_mf.v	/^    parameter e1_high = 1;$/;"	c
e1_high	.\altera_mf.v	/^parameter   e1_high             = 1;$/;"	c
e1_high_val	.\altera_mf.v	/^    reg [31:0] e1_high_val;$/;"	r
e1_initial	.\altera_mf.v	/^    parameter e1_initial = 1;$/;"	c
e1_initial	.\altera_mf.v	/^parameter   e1_initial          = 1;$/;"	c
e1_initial_val	.\altera_mf.v	/^    reg [31:0] e1_initial_val;$/;"	r
e1_low	.\altera_mf.v	/^    parameter e1_low = 1;$/;"	c
e1_low	.\altera_mf.v	/^parameter   e1_low              = 1;$/;"	c
e1_low_val	.\altera_mf.v	/^    reg [31:0] e1_low_val;$/;"	r
e1_mode	.\altera_mf.v	/^    parameter e1_mode = "bypass";$/;"	c
e1_mode	.\altera_mf.v	/^parameter   e1_mode             = "bypass";$/;"	c
e1_mode_val	.\altera_mf.v	/^    reg [8*6:1] e1_mode_val;$/;"	r
e1_ph	.\altera_mf.v	/^    parameter e1_ph = 0;$/;"	c
e1_ph	.\altera_mf.v	/^parameter   e1_ph               = 0;$/;"	c
e1_time_delay	.\altera_mf.v	/^    parameter e1_time_delay = 0;$/;"	c
e1_time_delay	.\altera_mf.v	/^parameter   e1_time_delay       = 0;$/;"	c
e1_time_delay_val	.\altera_mf.v	/^    reg [31:0] e1_time_delay_val;$/;"	r
e2_clk	.\altera_mf.v	/^    wire e2_clk;$/;"	n
e2_high	.\altera_mf.v	/^    parameter e2_high = 1;$/;"	c
e2_high	.\altera_mf.v	/^parameter   e2_high             = 1;$/;"	c
e2_high_val	.\altera_mf.v	/^    reg [31:0] e2_high_val;$/;"	r
e2_initial	.\altera_mf.v	/^    parameter e2_initial = 1;$/;"	c
e2_initial	.\altera_mf.v	/^parameter   e2_initial          = 1;$/;"	c
e2_initial_val	.\altera_mf.v	/^    reg [31:0] e2_initial_val;$/;"	r
e2_low	.\altera_mf.v	/^    parameter e2_low = 1;$/;"	c
e2_low	.\altera_mf.v	/^parameter   e2_low              = 1;$/;"	c
e2_low_val	.\altera_mf.v	/^    reg [31:0] e2_low_val;$/;"	r
e2_mode	.\altera_mf.v	/^    parameter e2_mode = "bypass";$/;"	c
e2_mode	.\altera_mf.v	/^parameter   e2_mode             = "bypass";$/;"	c
e2_mode_val	.\altera_mf.v	/^    reg [8*6:1] e2_mode_val;$/;"	r
e2_ph	.\altera_mf.v	/^    parameter e2_ph = 0;$/;"	c
e2_ph	.\altera_mf.v	/^parameter   e2_ph               = 0;$/;"	c
e2_time_delay	.\altera_mf.v	/^    parameter e2_time_delay = 0;$/;"	c
e2_time_delay	.\altera_mf.v	/^parameter   e2_time_delay       = 0;$/;"	c
e2_time_delay_val	.\altera_mf.v	/^    reg [31:0] e2_time_delay_val;$/;"	r
e3_clk	.\altera_mf.v	/^    wire e3_clk;$/;"	n
e3_high	.\altera_mf.v	/^    parameter e3_high = 1;$/;"	c
e3_high	.\altera_mf.v	/^parameter   e3_high             = 1;$/;"	c
e3_high_val	.\altera_mf.v	/^    reg [31:0] e3_high_val;$/;"	r
e3_initial	.\altera_mf.v	/^    parameter e3_initial = 1;$/;"	c
e3_initial	.\altera_mf.v	/^parameter   e3_initial          = 1;$/;"	c
e3_initial_val	.\altera_mf.v	/^    reg [31:0] e3_initial_val;$/;"	r
e3_low	.\altera_mf.v	/^    parameter e3_low = 1;$/;"	c
e3_low	.\altera_mf.v	/^parameter   e3_low              = 1;$/;"	c
e3_low_val	.\altera_mf.v	/^    reg [31:0] e3_low_val;$/;"	r
e3_mode	.\altera_mf.v	/^    parameter e3_mode = "bypass";$/;"	c
e3_mode	.\altera_mf.v	/^parameter   e3_mode             = "bypass";$/;"	c
e3_mode_val	.\altera_mf.v	/^    reg [8*6:1] e3_mode_val;$/;"	r
e3_ph	.\altera_mf.v	/^    parameter e3_ph = 0;$/;"	c
e3_ph	.\altera_mf.v	/^parameter   e3_ph               = 0;$/;"	c
e3_time_delay	.\altera_mf.v	/^    parameter e3_time_delay = 0;$/;"	c
e3_time_delay	.\altera_mf.v	/^parameter   e3_time_delay       = 0;$/;"	c
e3_time_delay_val	.\altera_mf.v	/^    reg [31:0] e3_time_delay_val;$/;"	r
e_first_state	.\omsp_frontend.v	/^wire [3:0] e_first_state = ~cpu_halt_st  & inst_so_nxt[`IRQ] ? E_IRQ_0  :$/;"	n
e_state	.\omsp_execution_unit.v	/^input         [3:0] e_state;       \/\/ Execution state$/;"	p
e_state	.\omsp_frontend.v	/^output         [3:0] e_state;          \/\/ Execution state$/;"	p
e_state	.\omsp_frontend.v	/^reg  [3:0] e_state;$/;"	r
e_state	.\openMSP430.v	/^wire           [3:0] e_state;$/;"	n
e_state_nxt	.\omsp_frontend.v	/^reg  [3:0] e_state_nxt;$/;"	r
early_read	.\omsp_multiplier.v	/^wire  early_read;$/;"	n
ecc_pipeline_stage_enabled	.\altera_mf.v	/^	parameter ecc_pipeline_stage_enabled = "FALSE";$/;"	c
eccstatus	.\altera_mf.v	/^    output [width_eccstatus-1:0] eccstatus;	$/;"	p
eccstatus	.\altera_mf.v	/^    output [width_eccstatus-1:0] eccstatus;   \/\/ ECC status flags$/;"	p
egpp_offset	.\altera_mf.v	/^    integer egpp_offset;$/;"	r
empty	.\altera_mf.v	/^    output empty, full;$/;"	p
empty	.\altera_mf.v	/^    output empty;$/;"	p
empty_flag	.\altera_mf.v	/^    reg empty_flag;$/;"	r
empty_latency1	.\altera_mf.v	/^    reg empty_latency1; $/;"	r
empty_latency2	.\altera_mf.v	/^    reg empty_latency2; $/;"	r
ena	.\altera_mf.v	/^    input    ena;$/;"	p
ena	.\altera_mf.v	/^    input ena;$/;"	p
ena	.\altera_mf.v	/^    tri1 ena;$/;"	n
ena	.\altera_mf.v	/^    tri1 prn, clrn, ena;$/;"	n
ena0	.\altera_mf.v	/^    input ena0;$/;"	p
ena0	.\altera_mf.v	/^    tri1 ena0;$/;"	n
ena0	.\altera_mf.v	/^    wire ena0;$/;"	n
ena0_cntr	.\altera_mf.v	/^    integer ena0_cntr;$/;"	r
ena1	.\altera_mf.v	/^    input ena1;$/;"	p
ena1	.\altera_mf.v	/^    tri1 ena1;$/;"	n
ena1	.\altera_mf.v	/^    wire ena1;$/;"	n
ena1_cntr	.\altera_mf.v	/^    integer ena1_cntr;$/;"	r
ena2	.\altera_mf.v	/^    input ena2;$/;"	p
ena2	.\altera_mf.v	/^    tri1 ena2;$/;"	n
ena2	.\altera_mf.v	/^    wire ena2;$/;"	n
ena3	.\altera_mf.v	/^    input ena3;$/;"	p
ena3	.\altera_mf.v	/^    tri1 ena3;$/;"	n
ena3	.\altera_mf.v	/^    wire ena3;$/;"	n
ena4	.\altera_mf.v	/^    wire ena4;$/;"	n
ena5	.\altera_mf.v	/^    wire ena5;$/;"	n
ena_aclr_signa_wire	.\altera_mf.v	/^    wire ena_aclr_signa_wire;$/;"	n
ena_aclr_signb_wire	.\altera_mf.v	/^    wire ena_aclr_signb_wire;$/;"	n
ena_ipd	.\altera_mf.v	/^    wire ena_ipd;$/;"	n
ena_ipd_last_value	.\altera_mf.v	/^    reg ena_ipd_last_value;$/;"	r
ena_pll	.\altera_mf.v	/^    wire ena_pll;$/;"	n
ena_pullup	.\altera_mf.v	/^tri1 ena_pullup;$/;"	n
enable	.\omsp_clock_gate.v	/^input          enable;         \/\/ Clock enable$/;"	p
enable0	.\altera_mf.v	/^    output enable0;$/;"	p
enable0	.\altera_mf.v	/^output        enable0;$/;"	p
enable0_counter	.\altera_mf.v	/^    parameter enable0_counter = "c0";$/;"	c
enable0_counter	.\altera_mf.v	/^    parameter enable0_counter = "l0";$/;"	c
enable0_counter	.\altera_mf.v	/^parameter   enable0_counter     = "l0";$/;"	c
enable0_neg	.\altera_mf.v	/^    reg enable0_neg;$/;"	r
enable0_reg	.\altera_mf.v	/^    reg enable0_reg;$/;"	r
enable0_reg1	.\altera_mf.v	/^    reg enable0_reg1;$/;"	r
enable0_reg2	.\altera_mf.v	/^    reg enable0_reg2;$/;"	r
enable0_tmp	.\altera_mf.v	/^    wire enable0_tmp;$/;"	n
enable1	.\altera_mf.v	/^    output enable1;$/;"	p
enable1	.\altera_mf.v	/^output        enable1;$/;"	p
enable1_counter	.\altera_mf.v	/^    parameter enable1_counter = "c1";$/;"	c
enable1_counter	.\altera_mf.v	/^    parameter enable1_counter = "l0";$/;"	c
enable1_counter	.\altera_mf.v	/^parameter   enable1_counter     = "l0";$/;"	c
enable1_reg	.\altera_mf.v	/^    reg enable1_reg;$/;"	r
enable1_reg0	.\altera_mf.v	/^    reg enable1_reg0;$/;"	r
enable1_reg1	.\altera_mf.v	/^    reg enable1_reg1;$/;"	r
enable1_reg2	.\altera_mf.v	/^    reg enable1_reg2;$/;"	r
enable1_tmp	.\altera_mf.v	/^    wire enable1_tmp;$/;"	n
enable_0	.\altera_mf.v	/^    wire enable_0;$/;"	n
enable_1	.\altera_mf.v	/^    wire enable_1;$/;"	n
enable_clock_pin_mode	.\altera_mf.v	/^    parameter enable_clock_pin_mode = "UNUSED";$/;"	c
enable_clock_pin_mode	.\altera_mf.v	/^parameter enable_clock_pin_mode = "UNUSED";$/;"	c
enable_dpa_align_to_rising_edge_only	.\altera_mf.v	/^    parameter enable_dpa_align_to_rising_edge_only = "OFF";$/;"	c
enable_dpa_calibration	.\altera_mf.v	/^    parameter enable_dpa_calibration = "ON";$/;"	c
enable_dpa_fifo	.\altera_mf.v	/^    parameter enable_dpa_fifo = "ON";$/;"	c
enable_dpa_initial_phase_selection	.\altera_mf.v	/^    parameter enable_dpa_initial_phase_selection = "OFF";$/;"	c
enable_dpa_mode	.\altera_mf.v	/^    parameter enable_dpa_mode = "OFF";$/;"	c
enable_dpa_pll_calibration	.\altera_mf.v	/^    parameter enable_dpa_pll_calibration = "OFF";$/;"	c
enable_ecc	.\altera_mf.v	/^    parameter enable_ecc = "FALSE";$/;"	c
enable_in	.\omsp_clock_gate.v	/^wire    enable_in =   (enable | scan_enable);$/;"	n
enable_latch	.\omsp_clock_gate.v	/^reg     enable_latch;$/;"	r
enable_mem_data_b_reading	.\altera_mf.v	/^   parameter enable_mem_data_b_reading =  (sim_show_memory_data_in_port_b_layout == "ON") && ((operation_mode == "BIDIR_DUAL_PORT") || (operation_mode == "DUAL_PORT")) ? 1 : 0;$/;"	c
enable_metastability	.\altera_mf.v	/^    parameter    enable_metastability    =    "NO";$/;"	c
enable_quad_spi_support	.\altera_mf.v	/^    parameter    enable_quad_spi_support    =    0;$/;"	c
enable_shared_access	.\altera_mf.v	/^    parameter    enable_shared_access    =    "OFF";$/;"	c
enable_soft_cdr_mode	.\altera_mf.v	/^    parameter enable_soft_cdr_mode = "OFF";$/;"	c
enable_switch_over_counter	.\altera_mf.v	/^    parameter enable_switch_over_counter           = "off";$/;"	c
enable_switch_over_counter	.\altera_mf.v	/^    parameter enable_switch_over_counter           = "on";$/;"	c
enable_switch_over_counter	.\altera_mf.v	/^    parameter enable_switch_over_counter = "off";$/;"	c
enable_switch_over_counter	.\altera_mf.v	/^parameter   enable_switch_over_counter = "OFF";$/;"	c
encoder_buffer_din	.\dma_tfbuffer.v	/^ input          [15:0]      encoder_buffer_din;$/;"	p
encoder_buffer_din	.\openMSP430_fpga.v	/^wire    [15:0]     encoder_buffer_din;$/;"	n
encoder_buffer_din_en	.\dma_tfbuffer.v	/^ input                      encoder_buffer_din_en;$/;"	p
encoder_buffer_din_en	.\openMSP430_fpga.v	/^wire               encoder_buffer_din_en;$/;"	n
encoder_buffer_din_reg	.\dma_tfbuffer.v	/^wire [15:0] encoder_buffer_din_reg;$/;"	n
encoder_buffer_din_reg_rd	.\dma_tfbuffer.v	/^wire [15:0] encoder_buffer_din_reg_rd  = encoder_buffer_din_reg & {16{reg_rd[ENCODER_BUFFERIN ]}};$/;"	n
end_address	.\altera_mf.v	/^    integer start_address, end_address;$/;"	r
enhanced_flash_programming	.\altera_mf.v	/^    parameter    enhanced_flash_programming    =    0;$/;"	c
enhanced_mode	.\altera_mf.v	/^    parameter    enhanced_mode    =    0;$/;"	c
eqout	.\altera_mf.v	/^  output [3:0]                      eqout,$/;"	p
equ0	.\omsp_timerA.v	/^wire equ0 = (tar_nxt==taccr0) & (tar!=taccr0);$/;"	n
equ1	.\omsp_timerA.v	/^wire equ1 = (tar_nxt==taccr1) & (tar!=taccr1);$/;"	n
equ2	.\omsp_timerA.v	/^wire equ2 = (tar_nxt==taccr2) & (tar!=taccr2);$/;"	n
equ_d_addr0	.\omsp_dbg_hwbrk.v	/^wire        equ_d_addr0 = eu_mb_en & (eu_mab==brk_addr0) & ~brk_ctl[`BRK_RANGE];$/;"	n
equ_d_addr1	.\omsp_dbg_hwbrk.v	/^wire        equ_d_addr1 = eu_mb_en & (eu_mab==brk_addr1) & ~brk_ctl[`BRK_RANGE];$/;"	n
equ_d_range	.\omsp_dbg_hwbrk.v	/^wire        equ_d_range = eu_mb_en & ((eu_mab>=brk_addr0) & (eu_mab<=brk_addr1)) &$/;"	n
equ_i_addr0	.\omsp_dbg_hwbrk.v	/^wire        equ_i_addr0 = decode_noirq & (pc==brk_addr0) & ~brk_ctl[`BRK_RANGE];$/;"	n
equ_i_addr1	.\omsp_dbg_hwbrk.v	/^wire        equ_i_addr1 = decode_noirq & (pc==brk_addr1) & ~brk_ctl[`BRK_RANGE];$/;"	n
equ_i_range	.\omsp_dbg_hwbrk.v	/^wire        equ_i_range = decode_noirq & ((pc>=brk_addr0) & (pc<=brk_addr1)) &$/;"	n
error	.\altera_mf.v	/^    reg error;$/;"	r
error	.\print_task.v	/^task error;$/;"	t
error_status	.\altera_mf.v	/^    reg error_status;$/;"	r
eu_dmem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] eu_dmem_addr  = {1'b0, eu_mab}-(`DMEM_BASE>>1);$/;"	n
eu_dmem_en	.\omsp_mem_backbone.v	/^wire               eu_dmem_en    = eu_mb_en & eu_dmem_sel;$/;"	n
eu_dmem_sel	.\omsp_mem_backbone.v	/^wire               eu_dmem_sel   = (eu_mab>=(`DMEM_BASE>>1)) &$/;"	n
eu_mab	.\omsp_dbg.v	/^input        [15:0] eu_mab;            \/\/ Execution-Unit Memory address bus$/;"	p
eu_mab	.\omsp_dbg_hwbrk.v	/^input   [15:0] eu_mab;       \/\/ Execution-Unit Memory address bus$/;"	p
eu_mab	.\omsp_mem_backbone.v	/^input         [14:0] eu_mab;            \/\/ Execution Unit Memory address bus$/;"	p
eu_mab	.\omsp_mem_backbone.v	/^wire        [15:0] eu_dmem_addr  = {1'b0, eu_mab}-(`DMEM_BASE>>1);$/;"	n
eu_mab	.\openMSP430.v	/^wire          [15:0] eu_mab;$/;"	n
eu_mb_en	.\omsp_dbg.v	/^input               eu_mb_en;          \/\/ Execution-Unit Memory bus enable$/;"	p
eu_mb_en	.\omsp_dbg_hwbrk.v	/^input          eu_mb_en;     \/\/ Execution-Unit Memory bus enable$/;"	p
eu_mb_en	.\omsp_mem_backbone.v	/^input                eu_mb_en;          \/\/ Execution Unit Memory bus enable$/;"	p
eu_mb_en	.\openMSP430.v	/^wire                 eu_mb_en;$/;"	n
eu_mb_wr	.\omsp_dbg.v	/^input         [1:0] eu_mb_wr;          \/\/ Execution-Unit Memory bus write transfer$/;"	p
eu_mb_wr	.\omsp_dbg_hwbrk.v	/^input    [1:0] eu_mb_wr;     \/\/ Execution-Unit Memory bus write transfer$/;"	p
eu_mb_wr	.\omsp_mem_backbone.v	/^input          [1:0] eu_mb_wr;          \/\/ Execution Unit Memory bus write transfer$/;"	p
eu_mb_wr	.\openMSP430.v	/^wire           [1:0] eu_mb_wr;$/;"	n
eu_mdb_in	.\omsp_mem_backbone.v	/^output        [15:0] eu_mdb_in;         \/\/ Execution Unit Memory data bus input$/;"	p
eu_mdb_in	.\openMSP430.v	/^wire          [15:0] eu_mdb_in;$/;"	n
eu_mdb_in_sel	.\omsp_mem_backbone.v	/^reg [1:0] eu_mdb_in_sel;$/;"	r
eu_mdb_out	.\omsp_mem_backbone.v	/^input         [15:0] eu_mdb_out;        \/\/ Execution Unit Memory data bus output$/;"	p
eu_mdb_out	.\openMSP430.v	/^wire          [15:0] eu_mdb_out;$/;"	n
eu_per_en	.\omsp_mem_backbone.v	/^wire               eu_per_en     =  eu_mb_en & eu_per_sel;$/;"	n
eu_per_sel	.\omsp_mem_backbone.v	/^wire               eu_per_sel    =  (eu_mab<(`PER_SIZE>>1));$/;"	n
eu_pmem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] eu_pmem_addr  = eu_mab-(PMEM_OFFSET>>1);$/;"	n
eu_pmem_en	.\omsp_mem_backbone.v	/^wire               eu_pmem_en    = eu_mb_en & ~|eu_mb_wr & eu_pmem_sel;$/;"	n
eu_pmem_sel	.\omsp_mem_backbone.v	/^wire               eu_pmem_sel   = (eu_mab>=(PMEM_OFFSET>>1));$/;"	n
exception_handling	.\altera_mf.v	/^    parameter exception_handling = "YES";$/;"	c
exec_cycle	.\omsp_alu.v	/^input               exec_cycle;    \/\/ Instruction execution cycle$/;"	p
exec_cycle	.\omsp_execution_unit.v	/^wire exec_cycle = (e_state==`E_EXEC);$/;"	n
exec_dext_rdy	.\omsp_frontend.v	/^reg exec_dext_rdy;$/;"	r
exec_done	.\omsp_execution_unit.v	/^input               exec_done;     \/\/ Execution completed$/;"	p
exec_done	.\omsp_frontend.v	/^output               exec_done;        \/\/ Execution completed$/;"	p
exec_done	.\omsp_frontend.v	/^wire exec_done = exec_jmp        ? (e_state==E_JUMP)   :$/;"	n
exec_done	.\openMSP430.v	/^wire                 exec_done;$/;"	n
exec_dst_wr	.\omsp_frontend.v	/^reg exec_dst_wr;$/;"	r
exec_jmp	.\omsp_frontend.v	/^reg exec_jmp;$/;"	r
exec_no_wr	.\omsp_frontend.v	/^wire        exec_no_wr    = inst_to_nxt[`CMP] | inst_to_nxt[`BIT];$/;"	n
exec_src_wr	.\omsp_frontend.v	/^reg exec_src_wr;$/;"	r
exp_dataa	.\altera_mf.v	/^    integer exp_dataa;$/;"	r
exp_datab	.\altera_mf.v	/^    integer exp_datab;$/;"	r
exp_result	.\altera_mf.v	/^    integer exp_result;$/;"	r
expected_clk_cycle	.\altera_mf.v	/^real expected_clk_cycle;$/;"	r
expected_next_clk_edge	.\altera_mf.v	/^real expected_next_clk_edge;$/;"	r
exponent_number	.\altera_mf.v	/^        input exponent_number;$/;"	p
exponent_number	.\altera_mf.v	/^        integer exponent_number;$/;"	r
ext_dmem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] ext_dmem_addr = {1'b0, ext_mem_addr[15:1]}-(`DMEM_BASE>>1);$/;"	n
ext_dmem_en	.\omsp_mem_backbone.v	/^wire                 ext_dmem_en;$/;"	n
ext_dmem_sel	.\omsp_mem_backbone.v	/^wire                 ext_dmem_sel;$/;"	n
ext_fbk_cntr	.\altera_mf.v	/^    reg [8*2:1] ext_fbk_cntr;$/;"	r
ext_fbk_cntr_delay	.\altera_mf.v	/^    reg [31:0] ext_fbk_cntr_delay;$/;"	r
ext_fbk_cntr_high	.\altera_mf.v	/^    reg [31:0] ext_fbk_cntr_high;$/;"	r
ext_fbk_cntr_index	.\altera_mf.v	/^    integer ext_fbk_cntr_index;$/;"	r
ext_fbk_cntr_initial	.\altera_mf.v	/^    integer ext_fbk_cntr_initial;$/;"	r
ext_fbk_cntr_low	.\altera_mf.v	/^    reg [31:0] ext_fbk_cntr_low;$/;"	r
ext_fbk_cntr_mode	.\altera_mf.v	/^    reg [8*6:1] ext_fbk_cntr_mode;$/;"	r
ext_fbk_cntr_modulus	.\altera_mf.v	/^    reg [31:0] ext_fbk_cntr_modulus;$/;"	r
ext_fbk_cntr_ph	.\altera_mf.v	/^    integer ext_fbk_cntr_ph;$/;"	r
ext_fbk_delay	.\altera_mf.v	/^    reg  [31:0] ext_fbk_delay;$/;"	r
ext_incr	.\omsp_frontend.v	/^wire [15:0] ext_incr = ((i_state==I_EXT1)     &  inst_as[`SYMB]) |$/;"	n
ext_mem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] ext_dmem_addr = {1'b0, ext_mem_addr[15:1]}-(`DMEM_BASE>>1);$/;"	n
ext_mem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] ext_pmem_addr = {1'b0, ext_mem_addr[15:1]}-(PMEM_OFFSET>>1);$/;"	n
ext_mem_addr	.\omsp_mem_backbone.v	/^wire [15:1] ext_mem_addr  =  dbg_mem_addr;$/;"	n
ext_mem_addr	.\omsp_mem_backbone.v	/^wire [15:1] ext_mem_addr  =  dbg_mem_en ? dbg_mem_addr  :  dma_addr;$/;"	n
ext_mem_din	.\omsp_mem_backbone.v	/^wire          [15:0] ext_mem_din;$/;"	n
ext_mem_din_sel	.\omsp_mem_backbone.v	/^reg   [1:0] ext_mem_din_sel;$/;"	r
ext_mem_dout	.\omsp_mem_backbone.v	/^wire [15:0] ext_mem_dout  =  dbg_mem_dout;$/;"	n
ext_mem_dout	.\omsp_mem_backbone.v	/^wire [15:0] ext_mem_dout  =  dbg_mem_en ? dbg_mem_dout  :  dma_din;$/;"	n
ext_mem_en	.\omsp_mem_backbone.v	/^wire                 ext_mem_en;$/;"	n
ext_mem_wr	.\omsp_mem_backbone.v	/^wire  [1:0] ext_mem_wr    =  dbg_mem_en ? dbg_mem_wr    :  dma_we;$/;"	n
ext_mem_wr	.\omsp_mem_backbone.v	/^wire  [1:0] ext_mem_wr    =  dbg_mem_wr;$/;"	n
ext_nxt	.\omsp_frontend.v	/^wire [15:0] ext_nxt  = ir + ext_incr;$/;"	n
ext_per_en	.\omsp_mem_backbone.v	/^wire                 ext_per_en;$/;"	n
ext_per_sel	.\omsp_mem_backbone.v	/^wire                 ext_per_sel;$/;"	n
ext_pmem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] ext_pmem_addr = {1'b0, ext_mem_addr[15:1]}-(PMEM_OFFSET>>1);$/;"	n
ext_pmem_en	.\omsp_mem_backbone.v	/^wire                 ext_pmem_en;$/;"	n
ext_pmem_sel	.\omsp_mem_backbone.v	/^wire                 ext_pmem_sel;$/;"	n
extclk	.\altera_mf.v	/^    output [3:0] extclk;$/;"	p
extclk	.\altera_mf.v	/^output        [3:0] extclk;$/;"	p
extclk0	.\altera_mf.v	/^    wire extclk0;$/;"	n
extclk0_counter	.\altera_mf.v	/^    parameter extclk0_counter = "e0";$/;"	c
extclk0_counter	.\altera_mf.v	/^parameter   extclk0_counter     = "e0" ;$/;"	c
extclk0_divide_by	.\altera_mf.v	/^    parameter extclk0_divide_by = 1;$/;"	c
extclk0_divide_by	.\altera_mf.v	/^parameter   extclk0_divide_by       = 1;$/;"	c
extclk0_duty_cycle	.\altera_mf.v	/^    parameter extclk0_duty_cycle = 50;$/;"	c
extclk0_duty_cycle	.\altera_mf.v	/^parameter   extclk0_duty_cycle      = 50;$/;"	c
extclk0_multiply_by	.\altera_mf.v	/^    parameter extclk0_multiply_by = 1;$/;"	c
extclk0_multiply_by	.\altera_mf.v	/^parameter   extclk0_multiply_by     = 1;$/;"	c
extclk0_phase_shift	.\altera_mf.v	/^    parameter extclk0_phase_shift = 0;$/;"	c
extclk0_phase_shift	.\altera_mf.v	/^parameter   extclk0_phase_shift     = "0";$/;"	c
extclk0_time_delay	.\altera_mf.v	/^    parameter extclk0_time_delay = 0;$/;"	c
extclk0_time_delay	.\altera_mf.v	/^parameter   extclk0_time_delay      = "0";$/;"	c
extclk0_tmp	.\altera_mf.v	/^    wire extclk0_tmp;$/;"	n
extclk0_use_even_counter_mode	.\altera_mf.v	/^    parameter extclk0_use_even_counter_mode = "off";$/;"	c
extclk0_use_even_counter_value	.\altera_mf.v	/^    parameter extclk0_use_even_counter_value = "off";$/;"	c
extclk1	.\altera_mf.v	/^    wire extclk1;$/;"	n
extclk1_counter	.\altera_mf.v	/^    parameter extclk1_counter = "e1";$/;"	c
extclk1_counter	.\altera_mf.v	/^parameter   extclk1_counter     = "e1" ;$/;"	c
extclk1_divide_by	.\altera_mf.v	/^    parameter extclk1_divide_by = 1;$/;"	c
extclk1_divide_by	.\altera_mf.v	/^parameter   extclk1_divide_by       = 1;$/;"	c
extclk1_duty_cycle	.\altera_mf.v	/^    parameter extclk1_duty_cycle = 50;$/;"	c
extclk1_duty_cycle	.\altera_mf.v	/^parameter   extclk1_duty_cycle      = 50;$/;"	c
extclk1_multiply_by	.\altera_mf.v	/^    parameter extclk1_multiply_by = 1;$/;"	c
extclk1_multiply_by	.\altera_mf.v	/^parameter   extclk1_multiply_by     = 1;$/;"	c
extclk1_phase_shift	.\altera_mf.v	/^    parameter extclk1_phase_shift = 0;$/;"	c
extclk1_phase_shift	.\altera_mf.v	/^parameter   extclk1_phase_shift     = "0";$/;"	c
extclk1_time_delay	.\altera_mf.v	/^    parameter extclk1_time_delay = 0;$/;"	c
extclk1_time_delay	.\altera_mf.v	/^parameter   extclk1_time_delay      = "0";$/;"	c
extclk1_tmp	.\altera_mf.v	/^    wire extclk1_tmp;$/;"	n
extclk1_use_even_counter_mode	.\altera_mf.v	/^    parameter extclk1_use_even_counter_mode = "off";$/;"	c
extclk1_use_even_counter_value	.\altera_mf.v	/^    parameter extclk1_use_even_counter_value = "off";$/;"	c
extclk2	.\altera_mf.v	/^    wire extclk2;$/;"	n
extclk2_counter	.\altera_mf.v	/^    parameter extclk2_counter = "e2";$/;"	c
extclk2_counter	.\altera_mf.v	/^parameter   extclk2_counter     = "e2" ;$/;"	c
extclk2_divide_by	.\altera_mf.v	/^    parameter extclk2_divide_by = 1;$/;"	c
extclk2_divide_by	.\altera_mf.v	/^parameter   extclk2_divide_by       = 1;$/;"	c
extclk2_duty_cycle	.\altera_mf.v	/^    parameter extclk2_duty_cycle = 50;$/;"	c
extclk2_duty_cycle	.\altera_mf.v	/^parameter   extclk2_duty_cycle      = 50;$/;"	c
extclk2_multiply_by	.\altera_mf.v	/^    parameter extclk2_multiply_by = 1;$/;"	c
extclk2_multiply_by	.\altera_mf.v	/^parameter   extclk2_multiply_by     = 1;$/;"	c
extclk2_phase_shift	.\altera_mf.v	/^    parameter extclk2_phase_shift = 0;$/;"	c
extclk2_phase_shift	.\altera_mf.v	/^parameter   extclk2_phase_shift     = "0";$/;"	c
extclk2_time_delay	.\altera_mf.v	/^    parameter extclk2_time_delay = 0;$/;"	c
extclk2_time_delay	.\altera_mf.v	/^parameter   extclk2_time_delay      = "0";$/;"	c
extclk2_tmp	.\altera_mf.v	/^    wire extclk2_tmp;$/;"	n
extclk2_use_even_counter_mode	.\altera_mf.v	/^    parameter extclk2_use_even_counter_mode = "off";$/;"	c
extclk2_use_even_counter_value	.\altera_mf.v	/^    parameter extclk2_use_even_counter_value = "off";$/;"	c
extclk3	.\altera_mf.v	/^    wire extclk3;$/;"	n
extclk3_counter	.\altera_mf.v	/^    parameter extclk3_counter = "e3";$/;"	c
extclk3_counter	.\altera_mf.v	/^parameter   extclk3_counter     = "e3" ;$/;"	c
extclk3_divide_by	.\altera_mf.v	/^    parameter extclk3_divide_by = 1;$/;"	c
extclk3_divide_by	.\altera_mf.v	/^parameter   extclk3_divide_by       = 1;$/;"	c
extclk3_duty_cycle	.\altera_mf.v	/^    parameter extclk3_duty_cycle = 50;$/;"	c
extclk3_duty_cycle	.\altera_mf.v	/^parameter   extclk3_duty_cycle      = 50;$/;"	c
extclk3_multiply_by	.\altera_mf.v	/^    parameter extclk3_multiply_by = 1;$/;"	c
extclk3_multiply_by	.\altera_mf.v	/^parameter   extclk3_multiply_by     = 1;$/;"	c
extclk3_phase_shift	.\altera_mf.v	/^    parameter extclk3_phase_shift = 0;$/;"	c
extclk3_phase_shift	.\altera_mf.v	/^parameter   extclk3_phase_shift     = "0";$/;"	c
extclk3_time_delay	.\altera_mf.v	/^    parameter extclk3_time_delay = 0;$/;"	c
extclk3_time_delay	.\altera_mf.v	/^parameter   extclk3_time_delay      = "0";$/;"	c
extclk3_tmp	.\altera_mf.v	/^    wire extclk3_tmp;$/;"	n
extclk3_use_even_counter_mode	.\altera_mf.v	/^    parameter extclk3_use_even_counter_mode = "off";$/;"	c
extclk3_use_even_counter_value	.\altera_mf.v	/^    parameter extclk3_use_even_counter_value = "off";$/;"	c
extclk_cycles_per_sync_period	.\altera_mf.v	/^integer extclk_cycles_per_sync_period;$/;"	r
extclk_phase_delay	.\altera_mf.v	/^time extclk_phase_delay;$/;"	r
extclk_synchronizing_period	.\altera_mf.v	/^time extclk_synchronizing_period;$/;"	r
extclk_tmp	.\altera_mf.v	/^reg extclk_tmp;$/;"	r
extclkena	.\altera_mf.v	/^    input [3:0] extclkena;$/;"	p
extclkena	.\altera_mf.v	/^input       [3:0] extclkena;$/;"	p
extclkena0_ipd	.\altera_mf.v	/^    wire extclkena0_ipd;$/;"	n
extclkena1_ipd	.\altera_mf.v	/^    wire extclkena1_ipd;$/;"	n
extclkena2_ipd	.\altera_mf.v	/^    wire extclkena2_ipd;$/;"	n
extclkena3_ipd	.\altera_mf.v	/^    wire extclkena3_ipd;$/;"	n
extclkena_pullup	.\altera_mf.v	/^tri1 [3:0] extclkena_pullup;$/;"	n
extena0	.\altera_mf.v	/^    wire extena0;$/;"	n
extena1	.\altera_mf.v	/^    wire extena1;$/;"	n
extena2	.\altera_mf.v	/^    wire extena2;$/;"	n
extena3	.\altera_mf.v	/^    wire extena3;$/;"	n
extend_oe_disable	.\altera_mf.v	/^parameter extend_oe_disable = "UNUSED";$/;"	c
external_switch	.\altera_mf.v	/^    reg external_switch;$/;"	r
extra_accumulator_latency	.\altera_mf.v	/^    parameter extra_accumulator_latency      = 0;$/;"	c
extra_addr_byte	.\altera_mf.v	/^    parameter    extra_addr_byte    =    0;$/;"	c
extra_latency	.\altera_mf.v	/^    parameter extra_latency                  = 0;$/;"	c
extra_latency	.\altera_mf.v	/^    parameter extra_latency = 0;$/;"	c
extra_multiplier_latency	.\altera_mf.v	/^    parameter extra_multiplier_latency       = 0;$/;"	c
extra_regr	.\altera_mf.v	/^    reg extra_regr;$/;"	r
extra_sign_bit_width	.\altera_mf.v	/^    parameter extra_sign_bit_width = (port_signa == "PORT_USED" || port_signb == "PORT_USED")? accum_width - width_result - lsb_position :$/;"	c
extra_sign_bits	.\altera_mf.v	/^    reg [extra_sign_bit_width - 1 : 0] extra_sign_bits;$/;"	r
extract_param_name	.\altera_mf.v	/^    reg extract_param_name;  \/\/ if 1 mean extracting parameters name from given string$/;"	r
extract_param_value	.\altera_mf.v	/^    reg extract_param_value; \/\/ if 1 mean extracting parameters value from given string$/;"	r
fac_ten	.\altera_mf.v	/^    integer fac_ten, lc;$/;"	r
family_arria10	.\altera_mf.v	/^	parameter family_arria10 = ((intended_device_family == "Arria 10") || (intended_device_family == "ARRIA 10") || (intended_device_family == "arria 10") || (intended_device_family == "Arria10") || (intended_device_family == "ARRIA10") || (intended_device_family == "arria10")) ? 1 : 0;$/;"	c
family_arria10	.\altera_mf.v	/^   parameter family_arria10 = ((intended_device_family == "Arria 10") || (intended_device_family == "ARRIA 10") || (intended_device_family == "arria 10") || (intended_device_family == "Arria10") || (intended_device_family == "ARRIA10") || (intended_device_family == "arria10")) ? 1 : 0;$/;"	c
family_arriaii	.\altera_mf.v	/^reg family_arriaii;$/;"	r
family_arriaiigx	.\altera_mf.v	/^   parameter family_arriaiigx = ((intended_device_family == "Arria II GX") || (intended_device_family == "ARRIA II GX") || (intended_device_family == "arria ii gx") || (intended_device_family == "ArriaIIGX") || (intended_device_family == "ARRIAIIGX") || (intended_device_family == "arriaiigx") || (intended_device_family == "Arria IIGX") || (intended_device_family == "ARRIA IIGX") || (intended_device_family == "arria iigx") || (intended_device_family == "ArriaII GX") || (intended_device_family == "ARRIAII GX") || (intended_device_family == "arriaii gx") || (intended_device_family == "Arria II") || (intended_device_family == "ARRIA II") || (intended_device_family == "arria ii") || (intended_device_family == "ArriaII") || (intended_device_family == "ARRIAII") || (intended_device_family == "arriaii") || (intended_device_family == "Arria II (GX\/E)") || (intended_device_family == "ARRIA II (GX\/E)") || (intended_device_family == "arria ii (gx\/e)") || (intended_device_family == "ArriaII(GX\/E)") || (intended_device_family == "ARRIAII(GX\/E)") || (intended_device_family == "arriaii(gx\/e)") || (intended_device_family == "PIRANHA") || (intended_device_family == "piranha")) ? 1 : 0 ;$/;"	c
family_arriaiigz	.\altera_mf.v	/^   parameter family_arriaiigz = ((intended_device_family == "Arria II GZ") || (intended_device_family == "ARRIA II GZ") || (intended_device_family == "arria ii gz") || (intended_device_family == "ArriaII GZ") || (intended_device_family == "ARRIAII GZ") || (intended_device_family == "arriaii gz") || (intended_device_family == "Arria IIGZ") || (intended_device_family == "ARRIA IIGZ") || (intended_device_family == "arria iigz") || (intended_device_family == "ArriaIIGZ") || (intended_device_family == "ARRIAIIGZ") || (intended_device_family == "arriaii gz")) ? 1 : 0 ;$/;"	c
family_arriav	.\altera_mf.v	/^   parameter family_arriav = ((intended_device_family == "Arria V") || (intended_device_family == "ARRIA V") || (intended_device_family == "arria v") || (intended_device_family == "ArriaV") || (intended_device_family == "ARRIAV") || (intended_device_family == "arriav") || (intended_device_family == "Arria V (GS)") || (intended_device_family == "ARRIA V (GS)") || (intended_device_family == "arria v (gs)") || (intended_device_family == "ArriaV(GS)") || (intended_device_family == "ARRIAV(GS)") || (intended_device_family == "arriav(gs)") || (intended_device_family == "Arria V (GX)") || (intended_device_family == "ARRIA V (GX)") || (intended_device_family == "arria v (gx)") || (intended_device_family == "ArriaV(GX)") || (intended_device_family == "ARRIAV(GX)") || (intended_device_family == "arriav(gx)") || (intended_device_family == "Arria V (GS\/GX)") || (intended_device_family == "ARRIA V (GS\/GX)") || (intended_device_family == "arria v (gs\/gx)") || (intended_device_family == "ArriaV(GS\/GX)") || (intended_device_family == "ARRIAV(GS\/GX)") || (intended_device_family == "arriav(gs\/gx)") || (intended_device_family == "Arria V (GX\/GS)") || (intended_device_family == "ARRIA V (GX\/GS)") || (intended_device_family == "arria v (gx\/gs)") || (intended_device_family == "ArriaV(GX\/GS)") || (intended_device_family == "ARRIAV(GX\/GS)") || (intended_device_family == "arriav(gx\/gs)")) ? 1 : 0;$/;"	c
family_arriavgz	.\altera_mf.v	/^   parameter family_arriavgz = ((intended_device_family == "Arria V GZ") || (intended_device_family == "ARRIA V GZ") || (intended_device_family == "arria v gz") || (intended_device_family == "ArriaVGZ")  || (intended_device_family == "ARRIAVGZ")  || (intended_device_family == "arriavgz")) ? 1 : 0;$/;"	c
family_arriavi	.\altera_mf.v	/^   parameter family_arriavi = ((intended_device_family == "Arria VI") || (intended_device_family == "ARRIA VI") || (intended_device_family == "arria vi") || (intended_device_family == "ArriaVI") || (intended_device_family == "ARRIAVI") || (intended_device_family == "arriavi") || (intended_device_family == "arria vi")) ? 1 : 0;$/;"	c
family_base_arriav	.\altera_mf.v	/^   parameter family_base_arriav = ((family_arriav == 1) || (family_cyclonev == 1)) ? 1 : 0 ;$/;"	c
family_base_cycloneii	.\altera_mf.v	/^   parameter family_base_cycloneii = ((intended_device_family == "Cyclone II") || (intended_device_family == "CYCLONE II") || (intended_device_family == "cyclone ii") || (intended_device_family == "Cycloneii") || (intended_device_family == "CYCLONEII") || (intended_device_family == "cycloneii") || (intended_device_family == "Magellan") || (intended_device_family == "MAGELLAN") || (intended_device_family == "magellan")) ? 1 : 0 ;$/;"	c
family_base_cycloneii	.\altera_mf.v	/^reg family_base_cycloneii;$/;"	r
family_base_stratix	.\altera_mf.v	/^   parameter family_base_stratix = ((intended_device_family == "Stratix") || (intended_device_family == "STRATIX") || (intended_device_family == "stratix") || (intended_device_family == "Yeager") || (intended_device_family == "YEAGER") || (intended_device_family == "yeager") || (intended_device_family == "Stratix GX") || (intended_device_family == "STRATIX GX") || (intended_device_family == "stratix gx") || (intended_device_family == "Stratix-GX") || (intended_device_family == "STRATIX-GX") || (intended_device_family == "stratix-gx") || (intended_device_family == "StratixGX") || (intended_device_family == "STRATIXGX") || (intended_device_family == "stratixgx") || (intended_device_family == "Aurora") || (intended_device_family == "AURORA") || (intended_device_family == "aurora")) ? 1 : 0 ;$/;"	c
family_base_stratixii	.\altera_mf.v	/^   parameter family_base_stratixii = ((intended_device_family == "Stratix II") || (intended_device_family == "STRATIX II") || (intended_device_family == "stratix ii") || (intended_device_family == "StratixII") || (intended_device_family == "STRATIXII") || (intended_device_family == "stratixii") || (intended_device_family == "Armstrong") || (intended_device_family == "ARMSTRONG") || (intended_device_family == "armstrong") || (intended_device_family == "Stratix II GX") || (intended_device_family == "STRATIX II GX") || (intended_device_family == "stratix ii gx") || (intended_device_family == "StratixIIGX") || (intended_device_family == "STRATIXIIGX") || (intended_device_family == "stratixiigx") || (intended_device_family == "Arria GX") || (intended_device_family == "ARRIA GX") || (intended_device_family == "arria gx") || (intended_device_family == "ArriaGX") || (intended_device_family == "ARRIAGX") || (intended_device_family == "arriagx") || (intended_device_family == "Stratix II GX Lite") || (intended_device_family == "STRATIX II GX LITE") || (intended_device_family == "stratix ii gx lite") || (intended_device_family == "StratixIIGXLite") || (intended_device_family == "STRATIXIIGXLITE") || (intended_device_family == "stratixiigxlite") || (family_hardcopyii == 1)) ? 1 : 0 ;$/;"	c
family_cyclone	.\altera_mf.v	/^   parameter family_cyclone = ((intended_device_family == "Cyclone") || (intended_device_family == "CYCLONE") || (intended_device_family == "cyclone") || (intended_device_family == "ACEX2K") || (intended_device_family == "acex2k") || (intended_device_family == "ACEX 2K") || (intended_device_family == "acex 2k") || (intended_device_family == "Tornado") || (intended_device_family == "TORNADO") || (intended_device_family == "tornado")) ? 1 : 0 ;$/;"	c
family_cycloneii	.\altera_mf.v	/^   parameter family_cycloneii = ((family_base_cycloneii == 1) || (family_cycloneiii == 1)) ? 1 : 0 ;$/;"	c
family_cycloneiii	.\altera_mf.v	/^   parameter family_cycloneiii = ((intended_device_family == "Cyclone III") || (intended_device_family == "CYCLONE III") || (intended_device_family == "cyclone iii") || (intended_device_family == "CycloneIII") || (intended_device_family == "CYCLONEIII") || (intended_device_family == "cycloneiii") || (intended_device_family == "Barracuda") || (intended_device_family == "BARRACUDA") || (intended_device_family == "barracuda") || (intended_device_family == "Cuda") || (intended_device_family == "CUDA") || (intended_device_family == "cuda") || (intended_device_family == "CIII") || (intended_device_family == "ciii") || (intended_device_family == "Cyclone III LS") || (intended_device_family == "CYCLONE III LS") || (intended_device_family == "cyclone iii ls") || (intended_device_family == "CycloneIIILS") || (intended_device_family == "CYCLONEIIILS") || (intended_device_family == "cycloneiiils") || (intended_device_family == "Cyclone III LPS") || (intended_device_family == "CYCLONE III LPS") || (intended_device_family == "cyclone iii lps") || (intended_device_family == "Cyclone LPS") || (intended_device_family == "CYCLONE LPS") || (intended_device_family == "cyclone lps") || (intended_device_family == "CycloneLPS") || (intended_device_family == "CYCLONELPS") || (intended_device_family == "cyclonelps") || (intended_device_family == "Tarpon") || (intended_device_family == "TARPON") || (intended_device_family == "tarpon") || (intended_device_family == "Cyclone IIIE") || (intended_device_family == "CYCLONE IIIE") || (intended_device_family == "cyclone iiie") || (intended_device_family == "Cyclone IV GX") || (intended_device_family == "CYCLONE IV GX") || (intended_device_family == "cyclone iv gx") || (intended_device_family == "Cyclone IVGX") || (intended_device_family == "CYCLONE IVGX") || (intended_device_family == "cyclone ivgx") || (intended_device_family == "CycloneIV GX") || (intended_device_family == "CYCLONEIV GX") || (intended_device_family == "cycloneiv gx") || (intended_device_family == "CycloneIVGX") || (intended_device_family == "CYCLONEIVGX") || (intended_device_family == "cycloneivgx") || (intended_device_family == "Cyclone IV") || (intended_device_family == "CYCLONE IV") || (intended_device_family == "cyclone iv") || (intended_device_family == "CycloneIV") || (intended_device_family == "CYCLONEIV") || (intended_device_family == "cycloneiv") || (intended_device_family == "Cyclone IV (GX)") || (intended_device_family == "CYCLONE IV (GX)") || (intended_device_family == "cyclone iv (gx)") || (intended_device_family == "CycloneIV(GX)") || (intended_device_family == "CYCLONEIV(GX)") || (intended_device_family == "cycloneiv(gx)") || (intended_device_family == "Cyclone III GX") || (intended_device_family == "CYCLONE III GX") || (intended_device_family == "cyclone iii gx") || (intended_device_family == "CycloneIII GX") || (intended_device_family == "CYCLONEIII GX") || (intended_device_family == "cycloneiii gx") || (intended_device_family == "Cyclone IIIGX") || (intended_device_family == "CYCLONE IIIGX") || (intended_device_family == "cyclone iiigx") || (intended_device_family == "CycloneIIIGX") || (intended_device_family == "CYCLONEIIIGX") || (intended_device_family == "cycloneiiigx") || (intended_device_family == "Cyclone III GL") || (intended_device_family == "CYCLONE III GL") || (intended_device_family == "cyclone iii gl") || (intended_device_family == "CycloneIII GL") || (intended_device_family == "CYCLONEIII GL") || (intended_device_family == "cycloneiii gl") || (intended_device_family == "Cyclone IIIGL") || (intended_device_family == "CYCLONE IIIGL") || (intended_device_family == "cyclone iiigl") || (intended_device_family == "CycloneIIIGL") || (intended_device_family == "CYCLONEIIIGL") || (intended_device_family == "cycloneiiigl") || (intended_device_family == "Stingray") || (intended_device_family == "STINGRAY") || (intended_device_family == "stingray") || (intended_device_family == "Cyclone IV E") || (intended_device_family == "CYCLONE IV E") || (intended_device_family == "cyclone iv e") || (intended_device_family == "CycloneIV E") || (intended_device_family == "CYCLONEIV E") || (intended_device_family == "cycloneiv e") || (intended_device_family == "Cyclone IVE") || (intended_device_family == "CYCLONE IVE") || (intended_device_family == "cyclone ive") || (intended_device_family == "CycloneIVE") || (intended_device_family == "CYCLONEIVE") || (intended_device_family == "cycloneive") || family_zippleback) ? 1 : 0 ;$/;"	c
family_cycloneiii	.\altera_mf.v	/^reg family_cycloneiii;$/;"	r
family_cycloneiiigl	.\altera_mf.v	/^reg family_cycloneiiigl;$/;"	r
family_cyclonev	.\altera_mf.v	/^   parameter family_cyclonev = ((intended_device_family == "Cyclone V") || (intended_device_family == "CYCLONE V") || (intended_device_family == "cyclone v") || (intended_device_family == "CycloneV") || (intended_device_family == "CYCLONEV") || (intended_device_family == "cyclonev") || (intended_device_family == "Cyclone V (GS)") || (intended_device_family == "CYCLONE V (GS)") || (intended_device_family == "cyclone v (gs)") || (intended_device_family == "CycloneV(GS)") || (intended_device_family == "CYCLONEV(GS)") || (intended_device_family == "cyclonev(gs)") || (intended_device_family == "Cyclone V (GX)") || (intended_device_family == "CYCLONE V (GX)") || (intended_device_family == "cyclone v (gx)") || (intended_device_family == "CycloneV(GX)") || (intended_device_family == "CYCLONEV(GX)") || (intended_device_family == "cyclonev(gx)") || (intended_device_family == "Cyclone V (GS\/GX)") || (intended_device_family == "CYCLONE V (GS\/GX)") || (intended_device_family == "cyclone v (gs\/gx)") || (intended_device_family == "CycloneV(GS\/GX)") || (intended_device_family == "CYCLONEV(GS\/GX)") || (intended_device_family == "cyclonev(gs\/gx)") || (intended_device_family == "Cyclone V (GX\/GS)") || (intended_device_family == "CYCLONE V (GX\/GS)") || (intended_device_family == "cyclone v (gx\/gs)") || (intended_device_family == "CycloneV(GX\/GS)") || (intended_device_family == "CYCLONEV(GX\/GS)") || (intended_device_family == "cyclonev(gx\/gs)")) ? 1 : 0;$/;"	c
family_hardcopyii	.\altera_mf.v	/^   parameter family_hardcopyii = ((intended_device_family == "HardCopy II") || (intended_device_family == "HARDCOPY II") || (intended_device_family == "hardcopy ii") || (intended_device_family == "HardCopyII") || (intended_device_family == "HARDCOPYII") || (intended_device_family == "hardcopyii") || (intended_device_family == "Fusion") || (intended_device_family == "FUSION") || (intended_device_family == "fusion")) ? 1 : 0 ;$/;"	c
family_hardcopyiii	.\altera_mf.v	/^   parameter family_hardcopyiii = ((intended_device_family == "HardCopy III") || (intended_device_family == "HARDCOPY III") || (intended_device_family == "hardcopy iii") || (intended_device_family == "HardCopyIII") || (intended_device_family == "HARDCOPYIII") || (intended_device_family == "hardcopyiii") || (intended_device_family == "HCX") || (intended_device_family == "hcx")) ? 1 : 0;$/;"	c
family_hardcopyiv	.\altera_mf.v	/^   parameter family_hardcopyiv = ((intended_device_family == "HardCopy IV") || (intended_device_family == "HARDCOPY IV") || (intended_device_family == "hardcopy iv") || (intended_device_family == "HardCopyIV") || (intended_device_family == "HARDCOPYIV") || (intended_device_family == "hardcopyiv") || (intended_device_family == "HardCopy IV (GX)") || (intended_device_family == "HARDCOPY IV (GX)") || (intended_device_family == "hardcopy iv (gx)") || (intended_device_family == "HardCopy IV (E)") || (intended_device_family == "HARDCOPY IV (E)") || (intended_device_family == "hardcopy iv (e)") || (intended_device_family == "HardCopyIV(GX)") || (intended_device_family == "HARDCOPYIV(GX)") || (intended_device_family == "hardcopyiv(gx)") || (intended_device_family == "HardCopyIV(E)") || (intended_device_family == "HARDCOPYIV(E)") || (intended_device_family == "hardcopyiv(e)") || (intended_device_family == "HCXIV") || (intended_device_family == "hcxiv") || (intended_device_family == "HardCopy IV (GX\/E)") || (intended_device_family == "HARDCOPY IV (GX\/E)") || (intended_device_family == "hardcopy iv (gx\/e)") || (intended_device_family == "HardCopy IV (E\/GX)") || (intended_device_family == "HARDCOPY IV (E\/GX)") || (intended_device_family == "hardcopy iv (e\/gx)") || (intended_device_family == "HardCopyIV(GX\/E)") || (intended_device_family == "HARDCOPYIV(GX\/E)") || (intended_device_family == "hardcopyiv(gx\/e)") || (intended_device_family == "HardCopyIV(E\/GX)") || (intended_device_family == "HARDCOPYIV(E\/GX)") || (intended_device_family == "hardcopyiv(e\/gx)")) ? 1 : 0 ;$/;"	c
family_has_lutram	.\altera_mf.v	/^   parameter family_has_lutram = ((family_stratixiii == 1) || (family_stratixv == 1) || (family_base_arriav == 1) || (family_nightfury == 1)) ? 1 : 0 ;$/;"	c
family_has_m512	.\altera_mf.v	/^   parameter family_has_m512 = (((intended_device_family == "StratixHC") || (family_base_stratix == 1) || (family_base_stratixii == 1)) && (family_hardcopyii == 0)) ? 1 : 0;$/;"	c
family_has_megaram	.\altera_mf.v	/^   parameter family_has_megaram = (((intended_device_family == "StratixHC") || (family_base_stratix == 1) || (family_base_stratixii == 1) || (family_stratixiii == 1)) && (family_arriaiigx == 0) && (family_stratixv == 0) && (family_base_arriav == 0)) ? 1 : 0 ;$/;"	c
family_has_stratix_style_pll	.\altera_mf.v	/^reg family_has_stratix_style_pll;$/;"	r
family_has_stratixi_style_ram	.\altera_mf.v	/^   parameter family_has_stratixi_style_ram = ((intended_device_family == "StratixHC") || (family_base_stratix == 1) || (family_cyclone == 1)) ? 1 : 0;$/;"	c
family_has_stratixii_style_pll	.\altera_mf.v	/^reg family_has_stratixii_style_pll;$/;"	r
family_has_stratixiii_style_ram	.\altera_mf.v	/^   parameter family_has_stratixiii_style_ram = ((family_stratixiii == 1) || (family_cycloneiii == 1)) ? 1 : 0;$/;"	c
family_has_stratixv_style_ram	.\altera_mf.v	/^   parameter family_has_stratixv_style_ram = ((family_base_arriav == 1) || (family_stratixv == 1) || (family_nightfury == 1)) ? 1 : 0 ;$/;"	c
family_name	.\altera_mf.v	/^    parameter family_name = "Stratix";$/;"	c
family_name	.\altera_mf.v	/^    parameter family_name = "StratixII";$/;"	c
family_name	.\altera_mf.v	/^    parameter family_name = "StratixIII";$/;"	c
family_name	.\altera_mf.v	/^    parameter family_name = "cycloneiiigl";$/;"	c
family_nightfury	.\altera_mf.v	/^   parameter family_nightfury = ((intended_device_family == "Nightfury") || (intended_device_family == "NIGHTFURY") || (intended_device_family == "nightfury") || (intended_device_family == "Night Fury")  || (intended_device_family == "NIGHT FURY") || (intended_device_family == "night fury") || (family_arriavi == 1) || (family_arria10 == 1)) ? 1 : 0;$/;"	c
family_stratixiii	.\altera_mf.v	/^   parameter family_stratixiii = ((intended_device_family == "Stratix III") || (intended_device_family == "STRATIX III") || (intended_device_family == "stratix iii") || (intended_device_family == "StratixIII") || (intended_device_family == "STRATIXIII") || (intended_device_family == "stratixiii") || (intended_device_family == "Titan") || (intended_device_family == "TITAN") || (intended_device_family == "titan") || (intended_device_family == "SIII") || (intended_device_family == "siii") || (intended_device_family == "Stratix IV") || (intended_device_family == "STRATIX IV") || (intended_device_family == "stratix iv") || (intended_device_family == "TGX") || (intended_device_family == "tgx") || (intended_device_family == "StratixIV") || (intended_device_family == "STRATIXIV") || (intended_device_family == "stratixiv") || (intended_device_family == "Stratix IV (GT)") || (intended_device_family == "STRATIX IV (GT)") || (intended_device_family == "stratix iv (gt)") || (intended_device_family == "Stratix IV (GX)") || (intended_device_family == "STRATIX IV (GX)") || (intended_device_family == "stratix iv (gx)") || (intended_device_family == "Stratix IV (E)") || (intended_device_family == "STRATIX IV (E)") || (intended_device_family == "stratix iv (e)") || (intended_device_family == "StratixIV(GT)") || (intended_device_family == "STRATIXIV(GT)") || (intended_device_family == "stratixiv(gt)") || (intended_device_family == "StratixIV(GX)") || (intended_device_family == "STRATIXIV(GX)") || (intended_device_family == "stratixiv(gx)") || (intended_device_family == "StratixIV(E)") || (intended_device_family == "STRATIXIV(E)") || (intended_device_family == "stratixiv(e)") || (intended_device_family == "StratixIIIGX") || (intended_device_family == "STRATIXIIIGX") || (intended_device_family == "stratixiiigx") || (intended_device_family == "Stratix IV (GT\/GX\/E)") || (intended_device_family == "STRATIX IV (GT\/GX\/E)") || (intended_device_family == "stratix iv (gt\/gx\/e)") || (intended_device_family == "Stratix IV (GT\/E\/GX)") || (intended_device_family == "STRATIX IV (GT\/E\/GX)") || (intended_device_family == "stratix iv (gt\/e\/gx)") || (intended_device_family == "Stratix IV (E\/GT\/GX)") || (intended_device_family == "STRATIX IV (E\/GT\/GX)") || (intended_device_family == "stratix iv (e\/gt\/gx)") || (intended_device_family == "Stratix IV (E\/GX\/GT)") || (intended_device_family == "STRATIX IV (E\/GX\/GT)") || (intended_device_family == "stratix iv (e\/gx\/gt)") || (intended_device_family == "StratixIV(GT\/GX\/E)") || (intended_device_family == "STRATIXIV(GT\/GX\/E)") || (intended_device_family == "stratixiv(gt\/gx\/e)") || (intended_device_family == "StratixIV(GT\/E\/GX)") || (intended_device_family == "STRATIXIV(GT\/E\/GX)") || (intended_device_family == "stratixiv(gt\/e\/gx)") || (intended_device_family == "StratixIV(E\/GX\/GT)") || (intended_device_family == "STRATIXIV(E\/GX\/GT)") || (intended_device_family == "stratixiv(e\/gx\/gt)") || (intended_device_family == "StratixIV(E\/GT\/GX)") || (intended_device_family == "STRATIXIV(E\/GT\/GX)") || (intended_device_family == "stratixiv(e\/gt\/gx)") || (intended_device_family == "Stratix IV (GX\/E)") || (intended_device_family == "STRATIX IV (GX\/E)") || (intended_device_family == "stratix iv (gx\/e)") || (intended_device_family == "StratixIV(GX\/E)") || (intended_device_family == "STRATIXIV(GX\/E)") || (intended_device_family == "stratixiv(gx\/e)") || (family_arriaiigx == 1) || (family_hardcopyiv == 1) || (family_hardcopyiii == 1) || (family_stratixv == 1) || (family_arriaiigz == 1) || (family_base_arriav == 1)) ? 1 : 0 ;$/;"	c
family_stratixiii	.\altera_mf.v	/^reg family_stratixiii;$/;"	r
family_stratixv	.\altera_mf.v	/^   parameter family_stratixv = ((intended_device_family == "Stratix V") || (intended_device_family == "STRATIX V") || (intended_device_family == "stratix v") || (intended_device_family == "StratixV") || (intended_device_family == "STRATIXV") || (intended_device_family == "stratixv") || (intended_device_family == "Stratix V (GS)") || (intended_device_family == "STRATIX V (GS)") || (intended_device_family == "stratix v (gs)") || (intended_device_family == "StratixV(GS)") || (intended_device_family == "STRATIXV(GS)") || (intended_device_family == "stratixv(gs)") || (intended_device_family == "Stratix V (GX)") || (intended_device_family == "STRATIX V (GX)") || (intended_device_family == "stratix v (gx)") || (intended_device_family == "StratixV(GX)") || (intended_device_family == "STRATIXV(GX)") || (intended_device_family == "stratixv(gx)") || (intended_device_family == "Stratix V (GS\/GX)") || (intended_device_family == "STRATIX V (GS\/GX)") || (intended_device_family == "stratix v (gs\/gx)") || (intended_device_family == "StratixV(GS\/GX)") || (intended_device_family == "STRATIXV(GS\/GX)") || (intended_device_family == "stratixv(gs\/gx)") || (intended_device_family == "Stratix V (GX\/GS)") || (intended_device_family == "STRATIX V (GX\/GS)") || (intended_device_family == "stratix v (gx\/gs)") || (intended_device_family == "StratixV(GX\/GS)") || (intended_device_family == "STRATIXV(GX\/GS)") || (intended_device_family == "stratixv(gx\/gs)") || (family_base_arriav == 1)  || (family_nightfury == 1) || (family_arriavgz == 1)) ? 1 : 0;$/;"	c
family_zippleback	.\altera_mf.v	/^   parameter family_zippleback = ((intended_device_family == "MAX 10") || (intended_device_family == "MAX10") || (intended_device_family == "max 10") || (intended_device_family == "max10") || (intended_device_family == "MAX 10 FPGA") || (intended_device_family == "max 10 fpga") || (intended_device_family == "Zippleback") || (intended_device_family == "ZIPPLEBACK")|| (intended_device_family == "zippleback")|| (intended_device_family == "MAX10FPGA")|| (intended_device_family == "max10fpga")|| (intended_device_family == "MAX 10 FPGA (DA\/DF\/DC\/SF\/SC)")|| (intended_device_family == "max 10 fpga (da\/df\/dc\/sf\/sc)")|| (intended_device_family == "MAX10FPGA(DA\/DF\/DC\/SF\/SC)")|| (intended_device_family == "max10fpga(da\/df\/dc\/sf\/sc)")|| (intended_device_family == "MAX 10 FPGA (DA)")|| (intended_device_family == "max 10 fpga (da)")|| (intended_device_family == "MAX10FPGA(DA)")|| (intended_device_family == "max10fpga(da)")|| (intended_device_family == "MAX 10 FPGA (DF)")|| (intended_device_family == "max 10 fpga (df)")|| (intended_device_family == "MAX10FPGA(DF)")|| (intended_device_family == "max10fpga(df)")|| (intended_device_family == "MAX 10 FPGA (DC)")|| (intended_device_family == "max 10 fpga (dc)")|| (intended_device_family == "MAX10FPGA(DC)")|| (intended_device_family == "max10fpga(dc)")|| (intended_device_family == "MAX 10 FPGA (SF)")|| (intended_device_family == "max 10 fpga (sf)")|| (intended_device_family == "MAX10FPGA(SF)")|| (intended_device_family == "max10fpga(sf)")|| (intended_device_family == "MAX 10 FPGA (SC)")|| (intended_device_family == "max 10 fpga (sc)")|| (intended_device_family == "MAX10FPGA(SC)")|| (intended_device_family == "max10fpga(sc)")) ? 1 : 0 ;$/;"	c
fast_clk	.\altera_mf.v	/^    wire fast_clk;$/;"	n
fastclk_negedge_count	.\altera_mf.v	/^    integer fastclk_negedge_count [number_of_channels - 1 : 0];$/;"	r
fastclk_posedge_count	.\altera_mf.v	/^    integer fastclk_posedge_count [number_of_channels -1: 0];$/;"	r
fatal	.\print_task.v	/^task fatal;$/;"	t
fb	.\altera_mf.v	/^    reg fb;$/;"	r
fb_int	.\altera_mf.v	/^    reg [width_out-1:0] fb_int;$/;"	r
fbclk	.\altera_mf.v	/^    wire fbclk;$/;"	n
fbclk_last_value	.\altera_mf.v	/^    reg fbclk_last_value;$/;"	r
fbclk_period	.\altera_mf.v	/^    integer fbclk_period;$/;"	r
fbclk_period	.\altera_mf.v	/^    time fbclk_period;$/;"	r
fbclk_time	.\altera_mf.v	/^    time    fbclk_time;$/;"	r
fbin	.\altera_mf.v	/^    input fbin;$/;"	p
fbin	.\altera_mf.v	/^input       fbin;$/;"	p
fbin	.\altera_mf.v	/^input fbin;$/;"	p
fbin_int	.\altera_mf.v	/^tri1 fbin_int;$/;"	n
fbin_ipd	.\altera_mf.v	/^    wire fbin_ipd;$/;"	n
fbin_pulldown	.\altera_mf.v	/^tri0 fbin_pulldown;$/;"	n
fbk_delay	.\altera_mf.v	/^    integer fbk_delay;$/;"	r
fbk_phase	.\altera_mf.v	/^    integer fbk_phase;$/;"	r
fbmimicbidir	.\altera_mf.v	/^inout fbmimicbidir;$/;"	p
fbout	.\altera_mf.v	/^    output fbout;$/;"	p
fbout	.\altera_mf.v	/^output        fbout;$/;"	p
fbout_wire	.\altera_mf.v	/^wire fbout_wire;$/;"	n
fe_mab	.\omsp_mem_backbone.v	/^input         [14:0] fe_mab;            \/\/ Frontend Memory address bus$/;"	p
fe_mab	.\openMSP430.v	/^wire          [15:0] fe_mab;$/;"	n
fe_mb_en	.\omsp_mem_backbone.v	/^input                fe_mb_en;          \/\/ Frontend Memory bus enable$/;"	p
fe_mb_en	.\openMSP430.v	/^wire                 fe_mb_en;$/;"	n
fe_mdb_in	.\omsp_dbg.v	/^input        [15:0] fe_mdb_in;         \/\/ Frontend Memory data bus input$/;"	p
fe_mdb_in	.\omsp_mem_backbone.v	/^output        [15:0] fe_mdb_in;         \/\/ Frontend Memory data bus input$/;"	p
fe_mdb_in	.\openMSP430.v	/^wire          [15:0] fe_mdb_in;$/;"	n
fe_pmem_addr	.\omsp_mem_backbone.v	/^wire        [15:0] fe_pmem_addr  = fe_mab-(PMEM_OFFSET>>1);$/;"	n
fe_pmem_en	.\omsp_mem_backbone.v	/^wire               fe_pmem_en    = fe_mb_en & fe_pmem_sel;$/;"	n
fe_pmem_en_dly	.\omsp_mem_backbone.v	/^reg         fe_pmem_en_dly;$/;"	r
fe_pmem_restore	.\omsp_mem_backbone.v	/^wire fe_pmem_restore = ( fe_pmem_en & ~fe_pmem_en_dly) |  cpu_halt_st;$/;"	n
fe_pmem_save	.\omsp_mem_backbone.v	/^wire fe_pmem_save    = (~fe_pmem_en &  fe_pmem_en_dly) & ~cpu_halt_st;$/;"	n
fe_pmem_sel	.\omsp_mem_backbone.v	/^wire               fe_pmem_sel   = (fe_mab>=(PMEM_OFFSET>>1));$/;"	n
fe_pmem_wait	.\omsp_frontend.v	/^input                fe_pmem_wait;     \/\/ Frontend wait for Instruction fetch$/;"	p
fe_pmem_wait	.\omsp_mem_backbone.v	/^output               fe_pmem_wait;      \/\/ Frontend wait for Instruction fetch$/;"	p
fe_pmem_wait	.\omsp_mem_backbone.v	/^wire               fe_pmem_wait  = (fe_pmem_en & eu_pmem_en);$/;"	n
fe_pmem_wait	.\openMSP430.v	/^wire                 fe_pmem_wait;$/;"	n
feature_family_base_cyclone	.\altera_mf.v	/^    reg feature_family_base_cyclone;$/;"	r
feature_family_base_stratix	.\altera_mf.v	/^    reg feature_family_base_stratix;$/;"	r
feature_family_cycloneii	.\altera_mf.v	/^    reg feature_family_cycloneii;$/;"	r
feature_family_cycloneiii	.\altera_mf.v	/^    reg feature_family_cycloneiii;$/;"	r
feature_family_has_stratixii_style_ram	.\altera_mf.v	/^    reg feature_family_has_stratixii_style_ram;$/;"	r
feature_family_has_stratixiii_style_ram	.\altera_mf.v	/^    reg feature_family_has_stratixiii_style_ram;$/;"	r
feature_family_stratix	.\altera_mf.v	/^    reg                    feature_family_stratix;$/;"	r
feature_family_stratix	.\altera_mf.v	/^    reg feature_family_stratix;$/;"	r
feature_family_stratixii	.\altera_mf.v	/^    reg feature_family_stratixii;$/;"	r
feature_family_stratixiii	.\altera_mf.v	/^    reg feature_family_stratixiii;$/;"	r
features_cfg	.\altera_mf.v	/^    parameter    features_cfg    =    1;$/;"	c
features_pgm	.\altera_mf.v	/^    parameter    features_pgm    =    1;$/;"	c
feedback_source	.\altera_mf.v	/^    parameter feedback_source                      = "clk0";$/;"	c
feedback_source	.\altera_mf.v	/^    parameter feedback_source = "extclk0";$/;"	c
feedback_source	.\altera_mf.v	/^parameter   feedback_source           = "EXTCLK0" ;$/;"	c
feedback_width	.\altera_mf.v	/^    parameter feedback_width = ((accum_width + int_mult_diff_bit) < 2*int_width_result)? accum_width + int_mult_diff_bit : 2*int_width_result;$/;"	c
fetch	.\omsp_frontend.v	/^wire   fetch        = ~((i_state==I_DEC) & ~(exec_done | (e_state==E_IDLE))) & ~(e_state_nxt==E_IDLE);$/;"	n
fetch	.\omsp_frontend.v	/^wire [15:0] pc_incr = pc + {14'h0000, fetch, 1'b0};$/;"	n
fifo	.\fifo.vhd	/^ENTITY fifo IS$/;"	e
fifo_ctl_in	.\fifo_ctl_in.vhd	/^ENTITY fifo_ctl_in IS$/;"	e
fifo_ctl_out	.\fifo_ctl_out.vhd	/^ENTITY fifo_ctl_out IS$/;"	e
fifo_data_in	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] fifo_data_in;$/;"	n
fifo_data_out	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] fifo_data_out;$/;"	r
fifo_in_sync_reg	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] fifo_in_sync_reg;$/;"	r
fifo_in_sync_reg	.\altera_mf.v	/^    reg fifo_in_sync_reg;$/;"	r
fifo_out_sync_reg	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] fifo_out_sync_reg;$/;"	r
fifo_out_sync_reg	.\altera_mf.v	/^    reg fifo_out_sync_reg;$/;"	r
fifo_reset_regr	.\altera_mf.v	/^    wire fifo_reset_regr;$/;"	n
fifo_reset_regr_dly	.\altera_mf.v	/^    reg fifo_reset_regr_dly;$/;"	r
fifo_reset_regr_dly2	.\altera_mf.v	/^    reg fifo_reset_regr_dly2;$/;"	r
fifo_reset_regr_dly3	.\altera_mf.v	/^    reg fifo_reset_regr_dly3;$/;"	r
fifo_size	.\altera_mf.v	/^    parameter    fifo_size    =    16;$/;"	c
fifo_type	.\fifo.vhd	/^TYPE fifo_type IS ARRAY (long DOWNTO 0) OF STD_LOGIC_VECTOR(wide DOWNTO 0);$/;"	t
fifo_write_clk	.\altera_mf.v	/^    wire[number_of_channels -1:0] fifo_write_clk;$/;"	n
fifo_write_clk_pre	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] fifo_write_clk_pre;$/;"	r
file_desc	.\altera_mf.v	/^    reg [31:0] file_desc;$/;"	r
find_m_and_n_4_manual_phase	.\altera_mf.v	/^    task find_m_and_n_4_manual_phase;$/;"	t
find_simple_integer_fraction	.\altera_mf.v	/^    task find_simple_integer_fraction;$/;"	t
first_clk_rising_edge	.\altera_mf.v	/^    reg first_clk_rising_edge;$/;"	r
first_clkin_edge_detect	.\altera_mf.v	/^    reg  first_clkin_edge_detect;$/;"	r
first_fbclk_time	.\altera_mf.v	/^    time    first_fbclk_time;$/;"	r
first_inclk0_edge_detect	.\altera_mf.v	/^    reg first_inclk0_edge_detect,first_inclk1_edge_detect;$/;"	r
first_inclk1_edge_detect	.\altera_mf.v	/^    reg first_inclk0_edge_detect,first_inclk1_edge_detect;$/;"	r
first_normal_record	.\altera_mf.v	/^    reg first_normal_record;$/;"	r
first_rec	.\altera_mf.v	/^    reg first_rec;$/;"	r
first_rising_edge	.\altera_mf.v	/^    reg first_rising_edge;$/;"	r
first_run	.\altera_mf.v	/^	reg     [0:0]   first_run;$/;"	r
first_run	.\altera_mf.v	/^        reg     [0:0]   first_run;$/;"	r
first_schedule	.\altera_mf.v	/^    reg first_schedule;$/;"	r
flag	.\altera_mf.v	/^    integer flag;$/;"	r
flash_addr	.\altera_mf.v	/^    output    [addr_width-1:0]    flash_addr;$/;"	p
flash_ale	.\altera_mf.v	/^    output    flash_ale;$/;"	p
flash_burst_extra_cycle	.\altera_mf.v	/^    parameter    flash_burst_extra_cycle    =    0;$/;"	c
flash_cle	.\altera_mf.v	/^    output    flash_cle;$/;"	p
flash_clk	.\altera_mf.v	/^    output    flash_clk;$/;"	p
flash_data	.\altera_mf.v	/^    inout    [flash_data_width-1:0]    flash_data;$/;"	p
flash_data_width	.\altera_mf.v	/^    parameter    flash_data_width    =    16;$/;"	c
flash_ecc_checkbox	.\altera_mf.v	/^    parameter    flash_ecc_checkbox    =    0;$/;"	c
flash_io	.\altera_mf.v	/^    inout    [7:0]    flash_io;$/;"	p
flash_io0	.\altera_mf.v	/^    inout    [n_flash-1:0]    flash_io0;$/;"	p
flash_io1	.\altera_mf.v	/^    inout    [n_flash-1:0]    flash_io1;$/;"	p
flash_io2	.\altera_mf.v	/^    inout    [n_flash-1:0]    flash_io2;$/;"	p
flash_io3	.\altera_mf.v	/^    inout    [n_flash-1:0]    flash_io3;$/;"	p
flash_nadv	.\altera_mf.v	/^    output    flash_nadv;$/;"	p
flash_nce	.\altera_mf.v	/^    output    [n_flash-1:0]    flash_nce;$/;"	p
flash_ncs	.\altera_mf.v	/^    output    [n_flash-1:0]    flash_ncs;$/;"	p
flash_noe	.\altera_mf.v	/^    output    flash_noe;$/;"	p
flash_nreset	.\altera_mf.v	/^    output    flash_nreset;$/;"	p
flash_nreset_checkbox	.\altera_mf.v	/^    parameter    flash_nreset_checkbox    =    0;$/;"	c
flash_nreset_counter	.\altera_mf.v	/^    parameter    flash_nreset_counter    =    1;$/;"	c
flash_nwe	.\altera_mf.v	/^    output    flash_nwe;$/;"	p
flash_rdy	.\altera_mf.v	/^    input    flash_rdy;$/;"	p
flash_sck	.\altera_mf.v	/^    output    [n_flash-1:0]    flash_sck;$/;"	p
flash_static_wait_width	.\altera_mf.v	/^    parameter    flash_static_wait_width    =    15;$/;"	c
flash_type	.\altera_mf.v	/^    parameter    flash_type    =    "CFI_FLASH";$/;"	c
flexible_lvds_rx	.\altera_mf.v	/^module flexible_lvds_rx ($/;"	m
flexible_lvds_rx	.\work\flexible_lvds_rx\_primary.vhd	/^entity flexible_lvds_rx is$/;"	e
flexible_lvds_tx	.\altera_mf.v	/^module flexible_lvds_tx ($/;"	m
flexible_lvds_tx	.\work\flexible_lvds_tx\_primary.vhd	/^entity flexible_lvds_tx is$/;"	e
flvds_dataout	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] flvds_dataout;$/;"	n
flvds_dataout	.\altera_mf.v	/^    wire[number_of_channels-1 :0] flvds_dataout;$/;"	n
flvds_fastclk	.\altera_mf.v	/^    wire flvds_fastclk;$/;"	n
flvds_outclock	.\altera_mf.v	/^    wire flvds_outclock;$/;"	n
flvds_pll_outclock	.\altera_mf.v	/^    wire flvds_pll_outclock;$/;"	n
flvds_regclk	.\altera_mf.v	/^    wire flvds_regclk;$/;"	n
flvds_rx_cda_reset	.\altera_mf.v	/^    wire[number_of_channels -1 :0] flvds_rx_cda_reset;$/;"	n
flvds_rx_data_align	.\altera_mf.v	/^    wire[number_of_channels -1 :0] flvds_rx_data_align;$/;"	n
flvds_slowclk	.\altera_mf.v	/^    wire flvds_slowclk;$/;"	n
flvds_syncclk	.\altera_mf.v	/^    wire flvds_syncclk;$/;"	n
fpga_conf_done	.\altera_mf.v	/^    input    fpga_conf_done;$/;"	p
fpga_data	.\altera_mf.v	/^    output    [conf_data_width-1:0]    fpga_data;$/;"	p
fpga_dclk	.\altera_mf.v	/^    output    fpga_dclk;$/;"	p
fpga_nconfig	.\altera_mf.v	/^    output    fpga_nconfig;$/;"	p
fpga_nstatus	.\altera_mf.v	/^    input    fpga_nstatus;$/;"	p
fpga_pgm	.\altera_mf.v	/^    input    [2:0]    fpga_pgm;$/;"	p
fpll_loop_filter_c_arr	.\altera_mf.v	/^    integer fpll_loop_filter_c_arr[0:3];$/;"	r
fraction_div	.\altera_mf.v	/^        integer fraction_div; $/;"	r
fraction_div	.\altera_mf.v	/^        output fraction_div; $/;"	p
fraction_num	.\altera_mf.v	/^        integer fraction_num; $/;"	r
fraction_num	.\altera_mf.v	/^        output fraction_num; $/;"	p
fref	.\altera_mf.v	/^    output fref;$/;"	p
fref	.\altera_mf.v	/^output        fref;$/;"	p
full	.\altera_mf.v	/^    output empty, full;$/;"	p
full	.\altera_mf.v	/^    output full;$/;"	p
full_flag	.\altera_mf.v	/^    reg full_flag;$/;"	r
g0_clk	.\altera_mf.v	/^    wire g0_clk;$/;"	n
g0_high	.\altera_mf.v	/^    parameter g0_high = 1;$/;"	c
g0_high	.\altera_mf.v	/^parameter   g0_high             = 1;$/;"	c
g0_high_val	.\altera_mf.v	/^    reg [31:0] g0_high_val;$/;"	r
g0_initial	.\altera_mf.v	/^    parameter g0_initial = 1;$/;"	c
g0_initial	.\altera_mf.v	/^parameter   g0_initial          = 1;$/;"	c
g0_initial_val	.\altera_mf.v	/^    reg [31:0] g0_initial_val;$/;"	r
g0_low	.\altera_mf.v	/^    parameter g0_low = 1;$/;"	c
g0_low	.\altera_mf.v	/^parameter   g0_low              = 1;$/;"	c
g0_low_val	.\altera_mf.v	/^    reg [31:0] g0_low_val;$/;"	r
g0_mode	.\altera_mf.v	/^    parameter g0_mode = "bypass";$/;"	c
g0_mode	.\altera_mf.v	/^parameter   g0_mode             = "bypass";$/;"	c
g0_mode_val	.\altera_mf.v	/^    reg [8*6:1] g0_mode_val;$/;"	r
g0_ph	.\altera_mf.v	/^    parameter g0_ph = 0;$/;"	c
g0_ph	.\altera_mf.v	/^parameter   g0_ph               = 0;$/;"	c
g0_time_delay	.\altera_mf.v	/^    parameter g0_time_delay = 0;$/;"	c
g0_time_delay	.\altera_mf.v	/^parameter   g0_time_delay       = 0;$/;"	c
g0_time_delay_val	.\altera_mf.v	/^    reg [31:0] g0_time_delay_val;$/;"	r
g1_clk	.\altera_mf.v	/^    wire g1_clk;$/;"	n
g1_high	.\altera_mf.v	/^    parameter g1_high = 1;$/;"	c
g1_high	.\altera_mf.v	/^parameter   g1_high             = 1;$/;"	c
g1_high_val	.\altera_mf.v	/^    reg [31:0] g1_high_val;$/;"	r
g1_initial	.\altera_mf.v	/^    parameter g1_initial = 1;$/;"	c
g1_initial	.\altera_mf.v	/^parameter   g1_initial          = 1;$/;"	c
g1_initial_val	.\altera_mf.v	/^    reg [31:0] g1_initial_val;$/;"	r
g1_low	.\altera_mf.v	/^    parameter g1_low = 1;$/;"	c
g1_low	.\altera_mf.v	/^parameter   g1_low              = 1;$/;"	c
g1_low_val	.\altera_mf.v	/^    reg [31:0] g1_low_val;$/;"	r
g1_mode	.\altera_mf.v	/^    parameter g1_mode = "bypass";$/;"	c
g1_mode	.\altera_mf.v	/^parameter   g1_mode             = "bypass";$/;"	c
g1_mode_val	.\altera_mf.v	/^    reg [8*6:1] g1_mode_val;$/;"	r
g1_ph	.\altera_mf.v	/^    parameter g1_ph = 0;$/;"	c
g1_ph	.\altera_mf.v	/^parameter   g1_ph               = 0;$/;"	c
g1_time_delay	.\altera_mf.v	/^    parameter g1_time_delay = 0;$/;"	c
g1_time_delay	.\altera_mf.v	/^parameter   g1_time_delay       = 0;$/;"	c
g1_time_delay_val	.\altera_mf.v	/^    reg [31:0] g1_time_delay_val;$/;"	r
g2_clk	.\altera_mf.v	/^    wire g2_clk;$/;"	n
g2_high	.\altera_mf.v	/^    parameter g2_high = 1;$/;"	c
g2_high	.\altera_mf.v	/^parameter   g2_high             = 1;$/;"	c
g2_high_val	.\altera_mf.v	/^    reg [31:0] g2_high_val;$/;"	r
g2_initial	.\altera_mf.v	/^    parameter g2_initial = 1;$/;"	c
g2_initial	.\altera_mf.v	/^parameter   g2_initial          = 1;$/;"	c
g2_initial_val	.\altera_mf.v	/^    reg [31:0] g2_initial_val;$/;"	r
g2_low	.\altera_mf.v	/^    parameter g2_low = 1;$/;"	c
g2_low	.\altera_mf.v	/^parameter   g2_low              = 1;$/;"	c
g2_low_val	.\altera_mf.v	/^    reg [31:0] g2_low_val;$/;"	r
g2_mode	.\altera_mf.v	/^    parameter g2_mode = "bypass";$/;"	c
g2_mode	.\altera_mf.v	/^parameter   g2_mode             = "bypass";$/;"	c
g2_mode_val	.\altera_mf.v	/^    reg [8*6:1] g2_mode_val;$/;"	r
g2_ph	.\altera_mf.v	/^    parameter g2_ph = 0;$/;"	c
g2_ph	.\altera_mf.v	/^parameter   g2_ph               = 0;$/;"	c
g2_time_delay	.\altera_mf.v	/^    parameter g2_time_delay = 0;$/;"	c
g2_time_delay	.\altera_mf.v	/^parameter   g2_time_delay       = 0;$/;"	c
g2_time_delay_val	.\altera_mf.v	/^    reg [31:0] g2_time_delay_val;$/;"	r
g3_clk	.\altera_mf.v	/^    wire g3_clk;$/;"	n
g3_high	.\altera_mf.v	/^    parameter g3_high = 1;$/;"	c
g3_high	.\altera_mf.v	/^parameter   g3_high             = 1;$/;"	c
g3_high_val	.\altera_mf.v	/^    reg [31:0] g3_high_val;$/;"	r
g3_initial	.\altera_mf.v	/^    parameter g3_initial = 1;$/;"	c
g3_initial	.\altera_mf.v	/^parameter   g3_initial          = 1;$/;"	c
g3_initial_val	.\altera_mf.v	/^    reg [31:0] g3_initial_val;$/;"	r
g3_low	.\altera_mf.v	/^    parameter g3_low = 1;$/;"	c
g3_low	.\altera_mf.v	/^parameter   g3_low              = 1;$/;"	c
g3_low_val	.\altera_mf.v	/^    reg [31:0] g3_low_val;$/;"	r
g3_mode	.\altera_mf.v	/^    parameter g3_mode = "bypass";$/;"	c
g3_mode	.\altera_mf.v	/^parameter   g3_mode             = "bypass";$/;"	c
g3_mode_val	.\altera_mf.v	/^    reg [8*6:1] g3_mode_val;$/;"	r
g3_ph	.\altera_mf.v	/^    parameter g3_ph = 0;$/;"	c
g3_ph	.\altera_mf.v	/^parameter   g3_ph               = 0;$/;"	c
g3_time_delay	.\altera_mf.v	/^    parameter g3_time_delay = 0;$/;"	c
g3_time_delay	.\altera_mf.v	/^parameter   g3_time_delay       = 0;$/;"	c
g3_time_delay_val	.\altera_mf.v	/^    reg [31:0] g3_time_delay_val;$/;"	r
gate_count	.\altera_mf.v	/^    integer gate_count;$/;"	r
gate_lock_counter	.\altera_mf.v	/^    parameter gate_lock_counter                    = 1;$/;"	c
gate_lock_counter	.\altera_mf.v	/^    parameter gate_lock_counter = 1;$/;"	c
gate_lock_counter	.\altera_mf.v	/^parameter   gate_lock_counter         = 0;$/;"	c
gate_lock_signal	.\altera_mf.v	/^    parameter gate_lock_signal                     = "no";$/;"	c
gate_lock_signal	.\altera_mf.v	/^    parameter gate_lock_signal = "no";$/;"	c
gate_lock_signal	.\altera_mf.v	/^parameter   gate_lock_signal          = "NO";$/;"	c
gate_out	.\altera_mf.v	/^    reg gate_out;$/;"	r
gated_clk_in0	.\omsp_clock_mux.v	/^wire gated_clk_in0;$/;"	n
gated_clk_in1	.\omsp_clock_mux.v	/^wire gated_clk_in1;$/;"	n
gated_scanclk	.\altera_mf.v	/^    reg gated_scanclk;$/;"	r
gclk	.\omsp_clock_gate.v	/^output         gclk;           \/\/ Gated clock$/;"	p
get_address	.\altera_mf.v	/^    reg get_address;$/;"	r
get_address_data_pairs	.\altera_mf.v	/^    reg get_address_data_pairs;$/;"	r
get_address_radix	.\altera_mf.v	/^    reg get_address_radix;$/;"	r
get_data	.\altera_mf.v	/^    reg get_data;$/;"	r
get_data_radix	.\altera_mf.v	/^    reg get_data_radix;$/;"	r
get_depth	.\altera_mf.v	/^    reg get_depth;$/;"	r
get_end_address	.\altera_mf.v	/^    reg get_end_address;$/;"	r
get_irq_num	.\omsp_frontend.v	/^function  [5:0] get_irq_num;$/;"	f
get_start_address	.\altera_mf.v	/^    reg get_start_address;$/;"	r
get_width	.\altera_mf.v	/^    reg get_width;$/;"	r
gie	.\omsp_execution_unit.v	/^output              gie;           \/\/ General interrupt enable$/;"	p
gie	.\omsp_frontend.v	/^input                gie;              \/\/ General interrupt enable$/;"	p
gie	.\omsp_register_file.v	/^output              gie;          \/\/ General interrupt enable$/;"	p
gie	.\openMSP430.v	/^wire                 gie;$/;"	n
given_character	.\altera_mf.v	/^    input [8:1] given_character;$/;"	p
given_string	.\altera_mf.v	/^    input [8*200:1] given_string;  \/\/ string to be searched$/;"	p
given_string	.\altera_mf.v	/^    input [8*`CYCIIIGL_PLL_WORD_LENGTH:1] given_string;$/;"	p
given_string	.\altera_mf.v	/^    input [8*`CYCIII_PLL_WORD_LENGTH:1] given_string;$/;"	p
given_string	.\altera_mf.v	/^    input [8*`STXIII_PLL_WORD_LENGTH:1] given_string;$/;"	p
given_string	.\altera_mf.v	/^    input [8*`STXII_PLL_WORD_LENGTH:1] given_string;$/;"	p
given_string	.\altera_mf.v	/^    input [8*`STX_PLL_WORD_LENGTH:1] given_string;$/;"	p
given_string	.\altera_mf.v	/^input [8*`STR_LENGTH:1] given_string;$/;"	p
gnd	.\altera_mf.v	/^    output    gnd;$/;"	p
good_to_go_a	.\altera_mf.v	/^    reg good_to_go_a;$/;"	r
good_to_go_b	.\altera_mf.v	/^    reg good_to_go_b;$/;"	r
got_curr_clk_falling_edge_after_clkswitch	.\altera_mf.v	/^    reg got_curr_clk_falling_edge_after_clkswitch;$/;"	r
got_first_fbclk	.\altera_mf.v	/^    reg got_first_fbclk;$/;"	r
got_first_gated_scanclk	.\altera_mf.v	/^    reg got_first_gated_scanclk;$/;"	r
got_first_refclk	.\altera_mf.v	/^    reg got_first_refclk;$/;"	r
got_first_scanclk	.\altera_mf.v	/^    reg got_first_scanclk;$/;"	r
got_first_scanclk_after_scanclr_inactive_edge	.\altera_mf.v	/^    reg got_first_scanclk_after_scanclr_inactive_edge;$/;"	r
got_second_refclk	.\altera_mf.v	/^    reg got_second_refclk;$/;"	r
goto_dr_shift_state	.\altera_mf.v	/^    task goto_dr_shift_state;$/;"	t
goto_update_state	.\altera_mf.v	/^    task goto_update_state;$/;"	t
guard_bit	.\altera_mf.v	/^    reg guard_bit;$/;"	r
h_ff	.\altera_mf.v	/^    integer h_ff;$/;"	r
h_int_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] h_int_reg;$/;"	r
h_s_ff	.\altera_mf.v	/^    integer h_s_ff;$/;"	r
h_sync_a	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 :0] h_sync_a;$/;"	r
h_us_ff	.\altera_mf.v	/^    integer h_us_ff;$/;"	r
half_cycle_high	.\altera_mf.v	/^    integer half_cycle_high;$/;"	r
halt_cpu	.\omsp_dbg.v	/^wire        halt_cpu = cpu_ctl_wr & dbg_din[`HALT]  & ~dbg_halt_st;$/;"	n
halt_flag	.\omsp_dbg.v	/^reg   halt_flag;$/;"	r
halt_flag_clr	.\omsp_dbg.v	/^wire  halt_flag_clr = run_cpu   | mem_run_cpu;$/;"	n
halt_flag_set	.\omsp_dbg.v	/^wire  halt_flag_set = halt_cpu  | halt_rst  | dbg_swbrk | mem_halt_cpu |$/;"	n
halt_rst	.\omsp_dbg.v	/^wire halt_rst = cpu_ctl[`RST_BRK_EN] & dbg_en_s & puc_pnd_set;$/;"	n
head	.\altera_mf.v	/^    integer head;     \/\/ pointer to memory$/;"	r
head	.\altera_mf.v	/^    integer head;$/;"	r
head_mult	.\altera_mf.v	/^    integer head_mult;$/;"	r
head_result	.\altera_mf.v	/^    reg [31:0] head_result;$/;"	r
head_result_int	.\altera_mf.v	/^    integer head_result_int; $/;"	r
head_result_wire	.\altera_mf.v	/^    wire [31:0] head_result_wire;$/;"	n
hex	.\altera_mf.v	/^    reg [3 : 0] hex, tmp_char;$/;"	r
hex	.\altera_mf.v	/^    reg [3:0] hex, tmp_char;$/;"	r
hexToBits	.\altera_mf.v	/^    function [3 : 0]  hexToBits;$/;"	f
hex_value	.\altera_mf.v	/^    reg [3 : 0]                             hex_value;$/;"	r
high	.\altera_mf.v	/^    input [31:0] high;$/;"	p
high	.\altera_mf.v	/^    integer high;$/;"	r
high_cnt_xfer_done	.\altera_mf.v	/^    reg high_cnt_xfer_done;$/;"	r
high_reg	.\altera_mf.v	/^    reg [31:0] high_reg;$/;"	r
high_time	.\altera_mf.v	/^    integer high_time;$/;"	r
high_time	.\altera_mf.v	/^    time high_time;$/;"	r
high_time0	.\altera_mf.v	/^time high_time0;$/;"	r
high_time1	.\altera_mf.v	/^time high_time1;$/;"	r
high_time2	.\altera_mf.v	/^time high_time2;$/;"	r
high_time_ext	.\altera_mf.v	/^time high_time_ext;$/;"	r
i	.\altera_mf.v	/^        integer                             i;    $/;"	r
i	.\altera_mf.v	/^        integer i;    $/;"	r
i	.\altera_mf.v	/^        integer i;$/;"	r
i	.\altera_mf.v	/^    input i;$/;"	p
i	.\altera_mf.v	/^    integer                i;$/;"	r
i	.\altera_mf.v	/^    integer i, j, k, m, n;$/;"	r
i	.\altera_mf.v	/^    integer i;        \/\/ for loop index$/;"	r
i	.\altera_mf.v	/^    integer i;$/;"	r
i	.\altera_mf.v	/^  integer i;$/;"	r
i	.\tb_openMSP430_fpga.v	/^    integer i;$/;"	r
i0	.\altera_mf.v	/^    integer i0;$/;"	r
i0_tmp	.\altera_mf.v	/^        integer i0_tmp;$/;"	r
i1	.\altera_mf.v	/^    integer i1;$/;"	r
i2	.\altera_mf.v	/^    integer i2;$/;"	r
i2c_active	.\omsp_dbg_i2c.v	/^wire i2c_active =  i2c_active_seq & ~stop_detect;$/;"	n
i2c_active_seq	.\omsp_dbg_i2c.v	/^reg  i2c_active_seq;$/;"	r
i2c_addr_not_valid	.\omsp_dbg_i2c.v	/^wire i2c_addr_not_valid;$/;"	n
i2c_init	.\omsp_dbg_i2c.v	/^wire i2c_init   = ~i2c_active     |  start_detect;$/;"	n
i2c_state	.\omsp_dbg_i2c.v	/^reg   [2:0] i2c_state;$/;"	r
i2c_state_nxt	.\omsp_dbg_i2c.v	/^reg   [2:0] i2c_state_nxt;$/;"	r
i3	.\altera_mf.v	/^    integer i3;$/;"	r
i4	.\altera_mf.v	/^    integer i4;$/;"	r
i5	.\altera_mf.v	/^    integer i5;$/;"	r
i6	.\altera_mf.v	/^    integer i6;$/;"	r
i7	.\altera_mf.v	/^    integer i7;$/;"	r
i8	.\altera_mf.v	/^    integer i8;$/;"	r
i_aclr	.\altera_mf.v	/^    wire i_aclr;$/;"	n
i_aclr_flag_a	.\altera_mf.v	/^    integer i_aclr_flag_a;$/;"	r
i_aclr_flag_b	.\altera_mf.v	/^    integer i_aclr_flag_b;$/;"	r
i_addr0_rd	.\omsp_dbg_hwbrk.v	/^wire i_addr0_rd =  equ_i_addr0 &  brk_ctl[`BRK_I_EN];$/;"	n
i_addr1_rd	.\omsp_dbg_hwbrk.v	/^wire i_addr1_rd =  equ_i_addr1 &  brk_ctl[`BRK_I_EN];$/;"	n
i_address_aclr_a	.\altera_mf.v	/^    wire i_address_aclr_a;$/;"	n
i_address_aclr_a_flag	.\altera_mf.v	/^    reg i_address_aclr_a_flag;$/;"	r
i_address_aclr_a_prev	.\altera_mf.v	/^    reg i_address_aclr_a_prev;$/;"	r
i_address_aclr_b	.\altera_mf.v	/^    wire i_address_aclr_b;$/;"	n
i_address_aclr_b_flag	.\altera_mf.v	/^    reg i_address_aclr_b_flag;$/;"	r
i_address_aclr_b_prev	.\altera_mf.v	/^    reg i_address_aclr_b_prev;$/;"	r
i_address_aclr_family_a	.\altera_mf.v	/^   parameter i_address_aclr_family_a = ((((family_has_stratixv_style_ram == 1) || (family_has_stratixiii_style_ram == 1)) && (operation_mode != "ROM")) || (family_base_stratixii == 1 || family_base_cycloneii == 1)) ? 1 : 0;$/;"	c
i_address_aclr_family_a	.\altera_mf.v	/^   parameter i_address_aclr_family_a = (operation_mode != "ROM") ? 1 : 0;$/;"	c
i_address_aclr_family_b	.\altera_mf.v	/^   parameter i_address_aclr_family_b = ((((family_has_stratixv_style_ram == 1) || (family_has_stratixiii_style_ram == 1)) && (operation_mode != "DUAL_PORT")) || ((is_lutram == 1) && (operation_mode == "DUAL_PORT") && (read_during_write_mode_mixed_ports == "OLD_DATA")) || (family_base_stratixii == 1 || family_base_cycloneii == 1)) ? 1 : 0;$/;"	c
i_address_aclr_family_b	.\altera_mf.v	/^   parameter i_address_aclr_family_b = ((operation_mode != "DUAL_PORT") || ((is_lutram == 1) && (operation_mode == "DUAL_PORT") && (read_during_write_mode_mixed_ports == "OLD_DATA"))) ? 1 : 0;$/;"	c
i_address_reg_a	.\altera_mf.v	/^    reg [widthad_a-1:0] i_address_reg_a;$/;"	r
i_address_reg_b	.\altera_mf.v	/^    reg [widthad_b-1:0] i_address_reg_b;$/;"	r
i_avmm_saddress	.\altera_mf.v	/^  input  [avmm_slave_addr_width-1:0]  i_avmm_saddress,$/;"	p
i_avmm_swrite	.\altera_mf.v	/^  input                               i_avmm_swrite,$/;"	p
i_byte_size	.\altera_mf.v	/^    integer i_byte_size;$/;"	r
i_byte_size	.\altera_mf.v	/^    parameter i_byte_size = ((byte_size == 0) && (width_byteena != 0)) ? $/;"	c
i_byte_size_tmp	.\altera_mf.v	/^    parameter i_byte_size_tmp = (width_byteena_a > 1)? width_a \/ width_byteena_a : 8;$/;"	c
i_byteena	.\altera_mf.v	/^    tri1 [i_width_byteena-1:0] i_byteena;$/;"	n
i_byteena_a	.\altera_mf.v	/^    tri1 [width_byteena_a-1:0] i_byteena_a;$/;"	n
i_byteena_aclr_a	.\altera_mf.v	/^    wire i_byteena_aclr_a;$/;"	n
i_byteena_aclr_b	.\altera_mf.v	/^    wire i_byteena_aclr_b;$/;"	n
i_byteena_b	.\altera_mf.v	/^    tri1 [width_byteena_b-1:0] i_byteena_b;$/;"	n
i_byteena_count	.\altera_mf.v	/^    integer i_byteena_count;$/;"	r
i_byteena_mask	.\altera_mf.v	/^    reg [width-1:0] i_byteena_mask;$/;"	r
i_byteena_mask_at_low	.\altera_mf.v	/^    reg [width-1:0] i_byteena_mask_at_low;$/;"	r
i_byteena_mask_out	.\altera_mf.v	/^    reg [width-1:0] i_byteena_mask_out;$/;"	r
i_byteena_mask_reg_a	.\altera_mf.v	/^    reg [width_a-1:0] i_byteena_mask_reg_a;$/;"	r
i_byteena_mask_reg_a_out	.\altera_mf.v	/^    reg [width_a-1:0] i_byteena_mask_reg_a_out;$/;"	r
i_byteena_mask_reg_a_out_b	.\altera_mf.v	/^    reg [width_a-1:0] i_byteena_mask_reg_a_out_b;$/;"	r
i_byteena_mask_reg_a_tmp	.\altera_mf.v	/^    reg [width_a-1:0] i_byteena_mask_reg_a_tmp;$/;"	r
i_byteena_mask_reg_a_x	.\altera_mf.v	/^    reg [width_a-1:0] i_byteena_mask_reg_a_x;$/;"	r
i_byteena_mask_reg_b	.\altera_mf.v	/^    reg [width_b-1:0] i_byteena_mask_reg_b;$/;"	r
i_byteena_mask_reg_b_out	.\altera_mf.v	/^    reg [width_b-1:0] i_byteena_mask_reg_b_out;$/;"	r
i_byteena_mask_reg_b_out_a	.\altera_mf.v	/^    reg [width_b-1:0] i_byteena_mask_reg_b_out_a;$/;"	r
i_byteena_mask_reg_b_tmp	.\altera_mf.v	/^    reg [width_b-1:0] i_byteena_mask_reg_b_tmp;$/;"	r
i_byteena_mask_reg_b_x	.\altera_mf.v	/^    reg [width_b-1:0] i_byteena_mask_reg_b_x;$/;"	r
i_byteena_mask_x	.\altera_mf.v	/^    reg [width-1:0] i_byteena_mask_x;$/;"	r
i_c_high	.\altera_mf.v	/^    integer   i_c_high[0:5];$/;"	r
i_c_high	.\altera_mf.v	/^    integer   i_c_high[0:9];$/;"	r
i_c_initial	.\altera_mf.v	/^    integer   i_c_initial[0:5];$/;"	r
i_c_initial	.\altera_mf.v	/^    integer   i_c_initial[0:9];$/;"	r
i_c_low	.\altera_mf.v	/^    integer   i_c_low[0:5];$/;"	r
i_c_low	.\altera_mf.v	/^    integer   i_c_low[0:9];$/;"	r
i_c_mode	.\altera_mf.v	/^    reg       [8*6:1] i_c_mode[0:5];$/;"	r
i_c_mode	.\altera_mf.v	/^    reg       [8*6:1] i_c_mode[0:9];$/;"	r
i_c_ph	.\altera_mf.v	/^    integer   i_c_ph[0:5];$/;"	r
i_c_ph	.\altera_mf.v	/^    integer   i_c_ph[0:9];$/;"	r
i_charge_pump_current	.\altera_mf.v	/^    integer   i_charge_pump_current;$/;"	r
i_clk0_counter	.\altera_mf.v	/^    integer   i_clk0_counter;$/;"	r
i_clk0_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk0_counter;$/;"	r
i_clk0_div_by	.\altera_mf.v	/^    integer i_clk0_div_by;$/;"	r
i_clk0_mult_by	.\altera_mf.v	/^    integer i_clk0_mult_by;$/;"	r
i_clk0_phase_shift	.\altera_mf.v	/^    integer i_clk0_phase_shift;$/;"	r
i_clk1_counter	.\altera_mf.v	/^    integer   i_clk1_counter;$/;"	r
i_clk1_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk1_counter;$/;"	r
i_clk1_div_by	.\altera_mf.v	/^    integer i_clk1_div_by;$/;"	r
i_clk1_mult_by	.\altera_mf.v	/^    integer i_clk1_mult_by;$/;"	r
i_clk1_phase_shift	.\altera_mf.v	/^    integer i_clk1_phase_shift;$/;"	r
i_clk2_counter	.\altera_mf.v	/^    integer   i_clk2_counter;$/;"	r
i_clk2_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk2_counter;$/;"	r
i_clk2_div_by	.\altera_mf.v	/^    integer i_clk2_div_by;$/;"	r
i_clk2_mult_by	.\altera_mf.v	/^    integer i_clk2_mult_by;$/;"	r
i_clk2_phase_shift	.\altera_mf.v	/^    integer i_clk2_phase_shift;$/;"	r
i_clk3_counter	.\altera_mf.v	/^    integer   i_clk3_counter;$/;"	r
i_clk3_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk3_counter;$/;"	r
i_clk3_div_by	.\altera_mf.v	/^    integer i_clk3_div_by;$/;"	r
i_clk3_mult_by	.\altera_mf.v	/^    integer i_clk3_mult_by;$/;"	r
i_clk3_phase_shift	.\altera_mf.v	/^    integer i_clk3_phase_shift;$/;"	r
i_clk4_counter	.\altera_mf.v	/^    integer   i_clk4_counter;$/;"	r
i_clk4_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk4_counter;$/;"	r
i_clk4_div_by	.\altera_mf.v	/^    integer i_clk4_div_by;$/;"	r
i_clk4_mult_by	.\altera_mf.v	/^    integer i_clk4_mult_by;$/;"	r
i_clk4_phase_shift	.\altera_mf.v	/^    integer i_clk4_phase_shift;$/;"	r
i_clk5_counter	.\altera_mf.v	/^    integer   i_clk5_counter;$/;"	r
i_clk5_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk5_counter;$/;"	r
i_clk5_div_by	.\altera_mf.v	/^    integer i_clk5_div_by;$/;"	r
i_clk5_mult_by	.\altera_mf.v	/^    integer i_clk5_mult_by;$/;"	r
i_clk6_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk6_counter;$/;"	r
i_clk6_div_by	.\altera_mf.v	/^    integer i_clk6_div_by;$/;"	r
i_clk6_mult_by	.\altera_mf.v	/^    integer i_clk6_mult_by;$/;"	r
i_clk7_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk7_counter;$/;"	r
i_clk7_div_by	.\altera_mf.v	/^    integer i_clk7_div_by;$/;"	r
i_clk7_mult_by	.\altera_mf.v	/^    integer i_clk7_mult_by;$/;"	r
i_clk8_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk8_counter;$/;"	r
i_clk8_div_by	.\altera_mf.v	/^    integer i_clk8_div_by;$/;"	r
i_clk8_mult_by	.\altera_mf.v	/^    integer i_clk8_mult_by;$/;"	r
i_clk9_counter	.\altera_mf.v	/^    reg [8*2:1] i_clk9_counter;$/;"	r
i_clk9_div_by	.\altera_mf.v	/^    integer i_clk9_div_by;$/;"	r
i_clk9_mult_by	.\altera_mf.v	/^    integer i_clk9_mult_by;$/;"	r
i_clken	.\altera_mf.v	/^    wire i_clken;$/;"	n
i_clock	.\altera_mf.v	/^    wire i_clock;$/;"	n
i_clocken0	.\altera_mf.v	/^    wire i_clocken0;$/;"	n
i_clocken0_b	.\altera_mf.v	/^    wire i_clocken0_b;$/;"	n
i_clocken1_b	.\altera_mf.v	/^    wire i_clocken1_b;$/;"	n
i_core_clocken0_b	.\altera_mf.v	/^    wire i_core_clocken0_b;$/;"	n
i_core_clocken0_b_reg	.\altera_mf.v	/^    reg i_core_clocken0_b_reg;$/;"	r
i_core_clocken1_b	.\altera_mf.v	/^    wire i_core_clocken1_b;$/;"	n
i_core_clocken1_b_reg	.\altera_mf.v	/^    reg i_core_clocken1_b_reg;$/;"	r
i_core_clocken_a	.\altera_mf.v	/^    wire i_core_clocken_a;$/;"	n
i_core_clocken_a_reg	.\altera_mf.v	/^    reg i_core_clocken_a_reg;$/;"	r
i_core_clocken_b	.\altera_mf.v	/^    wire i_core_clocken_b;$/;"	n
i_data_hi	.\altera_mf.v	/^    reg  [width-1:0]       i_data_hi;$/;"	r
i_data_lo	.\altera_mf.v	/^    reg  [width-1:0]       i_data_lo;$/;"	r
i_data_reg	.\altera_mf.v	/^    wire [width-1:0]       i_data_reg;$/;"	n
i_data_reg_a	.\altera_mf.v	/^    reg [width_a-1:0] i_data_reg_a;$/;"	r
i_data_reg_b	.\altera_mf.v	/^    reg [width_b-1:0] i_data_reg_b;$/;"	r
i_data_tmp	.\altera_mf.v	/^    reg [lpm_width-1:0] i_data_tmp;$/;"	r
i_data_tmp	.\altera_mf.v	/^    wire [width-1:0]       i_data_tmp;$/;"	n
i_data_write_time_a	.\altera_mf.v	/^    time i_data_write_time_a;$/;"	r
i_delayed_wrptr_g	.\altera_mf.v	/^    reg [lpm_widthu:0] i_delayed_wrptr_g;$/;"	r
i_div_wa	.\altera_mf.v	/^    integer i_div_wa;$/;"	r
i_div_wb	.\altera_mf.v	/^    integer i_div_wb;$/;"	r
i_dprio_busy	.\altera_mf.v	/^  input                         i_dprio_busy,$/;"	p
i_dprio_in	.\altera_mf.v	/^  input  [dprio_data_width-1:0] i_dprio_in,$/;"	p
i_e0_high	.\altera_mf.v	/^    integer   i_e0_high;$/;"	r
i_e0_initial	.\altera_mf.v	/^    integer   i_e0_initial;$/;"	r
i_e0_low	.\altera_mf.v	/^    integer   i_e0_low;$/;"	r
i_e0_mode	.\altera_mf.v	/^    reg [8*6:1]   i_e0_mode;$/;"	r
i_e0_ph	.\altera_mf.v	/^    integer   i_e0_ph;$/;"	r
i_e0_time_delay	.\altera_mf.v	/^    integer   i_e0_time_delay;$/;"	r
i_e1_high	.\altera_mf.v	/^    integer   i_e1_high;$/;"	r
i_e1_initial	.\altera_mf.v	/^    integer   i_e1_initial;$/;"	r
i_e1_low	.\altera_mf.v	/^    integer   i_e1_low;$/;"	r
i_e1_mode	.\altera_mf.v	/^    reg [8*6:1]   i_e1_mode;$/;"	r
i_e1_ph	.\altera_mf.v	/^    integer   i_e1_ph;$/;"	r
i_e1_time_delay	.\altera_mf.v	/^    integer   i_e1_time_delay;$/;"	r
i_e2_high	.\altera_mf.v	/^    integer   i_e2_high;$/;"	r
i_e2_initial	.\altera_mf.v	/^    integer   i_e2_initial;$/;"	r
i_e2_low	.\altera_mf.v	/^    integer   i_e2_low;$/;"	r
i_e2_mode	.\altera_mf.v	/^    reg [8*6:1]   i_e2_mode;$/;"	r
i_e2_ph	.\altera_mf.v	/^    integer   i_e2_ph;$/;"	r
i_e2_time_delay	.\altera_mf.v	/^    integer   i_e2_time_delay;$/;"	r
i_e3_high	.\altera_mf.v	/^    integer   i_e3_high;$/;"	r
i_e3_initial	.\altera_mf.v	/^    integer   i_e3_initial;$/;"	r
i_e3_low	.\altera_mf.v	/^    integer   i_e3_low;$/;"	r
i_e3_mode	.\altera_mf.v	/^    reg [8*6:1]   i_e3_mode;$/;"	r
i_e3_ph	.\altera_mf.v	/^    integer   i_e3_ph;$/;"	r
i_e3_time_delay	.\altera_mf.v	/^    integer   i_e3_time_delay;$/;"	r
i_empty	.\altera_mf.v	/^    reg i_empty, i_full;$/;"	r
i_extclk0_counter	.\altera_mf.v	/^    integer   i_extclk0_counter;$/;"	r
i_extclk0_div_by	.\altera_mf.v	/^    integer i_extclk0_div_by;$/;"	r
i_extclk0_mult_by	.\altera_mf.v	/^    integer i_extclk0_mult_by;$/;"	r
i_extclk1_counter	.\altera_mf.v	/^    integer   i_extclk1_counter;$/;"	r
i_extclk1_div_by	.\altera_mf.v	/^    integer i_extclk1_div_by;$/;"	r
i_extclk1_mult_by	.\altera_mf.v	/^    integer i_extclk1_mult_by;$/;"	r
i_extclk2_counter	.\altera_mf.v	/^    integer   i_extclk2_counter;$/;"	r
i_extclk2_div_by	.\altera_mf.v	/^    integer i_extclk2_div_by;$/;"	r
i_extclk2_mult_by	.\altera_mf.v	/^    integer i_extclk2_mult_by;$/;"	r
i_extclk3_counter	.\altera_mf.v	/^    integer   i_extclk3_counter;$/;"	r
i_extclk3_div_by	.\altera_mf.v	/^    integer i_extclk3_div_by;$/;"	r
i_extclk3_mult_by	.\altera_mf.v	/^    integer i_extclk3_mult_by;$/;"	r
i_first_bit_position	.\altera_mf.v	/^    integer i_first_bit_position;$/;"	r
i_force_reread_a	.\altera_mf.v	/^    reg i_force_reread_a;$/;"	r
i_force_reread_a1	.\altera_mf.v	/^    reg i_force_reread_a1;$/;"	r
i_force_reread_a_signal	.\altera_mf.v	/^    reg i_force_reread_a_signal;$/;"	r
i_force_reread_b	.\altera_mf.v	/^    reg i_force_reread_b;$/;"	r
i_force_reread_b1	.\altera_mf.v	/^    reg i_force_reread_b1;$/;"	r
i_force_reread_b_signal	.\altera_mf.v	/^    reg i_force_reread_b_signal;$/;"	r
i_full	.\altera_mf.v	/^    reg i_empty, i_full;$/;"	r
i_g0_high	.\altera_mf.v	/^    integer   i_g0_high;$/;"	r
i_g0_initial	.\altera_mf.v	/^    integer   i_g0_initial;$/;"	r
i_g0_low	.\altera_mf.v	/^    integer   i_g0_low;$/;"	r
i_g0_mode	.\altera_mf.v	/^    reg [8*6:1]   i_g0_mode;$/;"	r
i_g0_ph	.\altera_mf.v	/^    integer   i_g0_ph;$/;"	r
i_g0_time_delay	.\altera_mf.v	/^    integer   i_g0_time_delay;$/;"	r
i_g1_high	.\altera_mf.v	/^    integer   i_g1_high;$/;"	r
i_g1_initial	.\altera_mf.v	/^    integer   i_g1_initial;$/;"	r
i_g1_low	.\altera_mf.v	/^    integer   i_g1_low;$/;"	r
i_g1_mode	.\altera_mf.v	/^    reg [8*6:1]   i_g1_mode;$/;"	r
i_g1_ph	.\altera_mf.v	/^    integer   i_g1_ph;$/;"	r
i_g1_time_delay	.\altera_mf.v	/^    integer   i_g1_time_delay;$/;"	r
i_g2_high	.\altera_mf.v	/^    integer   i_g2_high;$/;"	r
i_g2_initial	.\altera_mf.v	/^    integer   i_g2_initial;$/;"	r
i_g2_low	.\altera_mf.v	/^    integer   i_g2_low;$/;"	r
i_g2_mode	.\altera_mf.v	/^    reg [8*6:1]   i_g2_mode;$/;"	r
i_g2_ph	.\altera_mf.v	/^    integer   i_g2_ph;$/;"	r
i_g2_time_delay	.\altera_mf.v	/^    integer   i_g2_time_delay;$/;"	r
i_g3_high	.\altera_mf.v	/^    integer   i_g3_high;$/;"	r
i_g3_initial	.\altera_mf.v	/^    integer   i_g3_initial;$/;"	r
i_g3_low	.\altera_mf.v	/^    integer   i_g3_low;$/;"	r
i_g3_mode	.\altera_mf.v	/^    reg [8*6:1]   i_g3_mode;$/;"	r
i_g3_ph	.\altera_mf.v	/^    integer   i_g3_ph;$/;"	r
i_g3_time_delay	.\altera_mf.v	/^    integer   i_g3_time_delay;$/;"	r
i_good_to_write_a	.\altera_mf.v	/^    wire i_good_to_write_a;$/;"	n
i_good_to_write_a2	.\altera_mf.v	/^    reg i_good_to_write_a2;$/;"	r
i_good_to_write_b	.\altera_mf.v	/^    wire i_good_to_write_b;$/;"	n
i_good_to_write_b2	.\altera_mf.v	/^    reg i_good_to_write_b2;$/;"	r
i_indata_aclr_a	.\altera_mf.v	/^    wire i_indata_aclr_a;$/;"	n
i_indata_aclr_b	.\altera_mf.v	/^    wire i_indata_aclr_b;$/;"	n
i_l0_high	.\altera_mf.v	/^    integer   i_l0_high;$/;"	r
i_l0_initial	.\altera_mf.v	/^    integer   i_l0_initial;$/;"	r
i_l0_low	.\altera_mf.v	/^    integer   i_l0_low;$/;"	r
i_l0_mode	.\altera_mf.v	/^    reg [8*6:1]   i_l0_mode;$/;"	r
i_l0_ph	.\altera_mf.v	/^    integer   i_l0_ph;$/;"	r
i_l0_time_delay	.\altera_mf.v	/^    integer   i_l0_time_delay;$/;"	r
i_l1_high	.\altera_mf.v	/^    integer   i_l1_high;$/;"	r
i_l1_initial	.\altera_mf.v	/^    integer   i_l1_initial;$/;"	r
i_l1_low	.\altera_mf.v	/^    integer   i_l1_low;$/;"	r
i_l1_mode	.\altera_mf.v	/^    reg [8*6:1]   i_l1_mode;$/;"	r
i_l1_ph	.\altera_mf.v	/^    integer   i_l1_ph;$/;"	r
i_l1_time_delay	.\altera_mf.v	/^    integer   i_l1_time_delay;$/;"	r
i_loop_filter_r	.\altera_mf.v	/^    integer   i_loop_filter_r;$/;"	r
i_lutram_output	.\altera_mf.v	/^    wire [width-1:0] i_lutram_output;$/;"	n
i_lutram_output_reg_inclk	.\altera_mf.v	/^    reg [width-1:0] i_lutram_output_reg_inclk;$/;"	r
i_lutram_output_reg_outclk	.\altera_mf.v	/^    reg [width-1:0] i_lutram_output_reg_outclk;$/;"	r
i_lutram_output_unreg	.\altera_mf.v	/^    wire [width-1:0] i_lutram_output_unreg;$/;"	n
i_lutram_read	.\altera_mf.v	/^    parameter i_lutram_read = (((is_lutram == 1) && (read_during_write_mode_port_a == "DONT_CARE")) ||$/;"	c
i_m	.\altera_mf.v	/^    integer   i_m;$/;"	r
i_m2	.\altera_mf.v	/^    integer   i_m2;$/;"	r
i_m_initial	.\altera_mf.v	/^    integer   i_m_initial;$/;"	r
i_m_ph	.\altera_mf.v	/^    integer   i_m_ph;$/;"	r
i_m_time_delay	.\altera_mf.v	/^    integer   i_m_time_delay;$/;"	r
i_max_iter	.\altera_mf.v	/^        integer i_max_iter;$/;"	r
i_maximize_speed	.\altera_mf.v	/^    integer i_maximize_speed;$/;"	r
i_mem_address	.\altera_mf.v	/^    integer i_mem_address;$/;"	r
i_n	.\altera_mf.v	/^    integer   i_n;$/;"	r
i_n2	.\altera_mf.v	/^    integer   i_n2;$/;"	r
i_n_time_delay	.\altera_mf.v	/^    integer   i_n_time_delay;$/;"	r
i_nmram_write_a	.\altera_mf.v	/^    reg i_nmram_write_a;$/;"	r
i_nmram_write_b	.\altera_mf.v	/^    reg i_nmram_write_b;$/;"	r
i_non_stratix_inclock	.\altera_mf.v	/^    wire                   i_non_stratix_inclock;  \/\/ inclock signal for non-Stratix families$/;"	n
i_non_stratix_outclock	.\altera_mf.v	/^    wire                   i_non_stratix_outclock; \/\/ inclock signal for non-Stratix families$/;"	n
i_numwords	.\altera_mf.v	/^    integer                i_numwords;$/;"	r
i_numwords	.\altera_mf.v	/^    integer i_numwords;$/;"	r
i_numwords_a	.\altera_mf.v	/^    integer i_numwords_a;$/;"	r
i_numwords_b	.\altera_mf.v	/^    integer i_numwords_b;$/;"	r
i_old_data	.\altera_mf.v	/^    reg [width-1:0] i_old_data;$/;"	r
i_original_address_a	.\altera_mf.v	/^    reg [widthad_a-1:0] i_original_address_a;$/;"	r
i_original_data_a	.\altera_mf.v	/^    reg [width_a - 1 : 0] i_original_data_a;$/;"	r
i_original_data_b	.\altera_mf.v	/^    reg [width_b - 1 : 0] i_original_data_b;$/;"	r
i_outdata_aclr_a	.\altera_mf.v	/^    wire i_outdata_aclr_a;$/;"	n
i_outdata_aclr_a_prev	.\altera_mf.v	/^    reg i_outdata_aclr_a_prev;$/;"	r
i_outdata_aclr_b	.\altera_mf.v	/^    wire i_outdata_aclr_b;$/;"	n
i_outdata_aclr_b_prev	.\altera_mf.v	/^    reg i_outdata_aclr_b_prev;$/;"	r
i_outdata_clken_a	.\altera_mf.v	/^    wire i_outdata_clken_a;$/;"	n
i_outdata_clken_b	.\altera_mf.v	/^    wire i_outdata_clken_b;$/;"	n
i_outlatch_clken_a	.\altera_mf.v	/^    wire i_outlatch_clken_a;$/;"	n
i_outlatch_clken_b	.\altera_mf.v	/^    wire i_outlatch_clken_b;	$/;"	n
i_pfd_max	.\altera_mf.v	/^    integer   i_pfd_max;$/;"	r
i_pfd_min	.\altera_mf.v	/^    integer   i_pfd_min;$/;"	r
i_phase_shift	.\altera_mf.v	/^    input i_phase_shift;$/;"	p
i_phase_shift	.\altera_mf.v	/^    integer i_phase_shift;$/;"	r
i_q	.\altera_mf.v	/^    reg [lpm_width_r-1:0] i_q;$/;"	r
i_q_ecc_reg_b	.\altera_mf.v	/^	reg [width_b-1:0] i_q_ecc_reg_b;$/;"	r
i_q_ecc_tmp_b	.\altera_mf.v	/^    reg [width_b-1:0] i_q_ecc_tmp_b;$/;"	r
i_q_is_registered	.\altera_mf.v	/^    reg i_q_is_registered;$/;"	r
i_q_output_latch	.\altera_mf.v	/^    reg [width_b-1:0] i_q_output_latch;$/;"	r
i_q_reg_a	.\altera_mf.v	/^    reg [width_a-1:0] i_q_reg_a;$/;"	r
i_q_reg_b	.\altera_mf.v	/^    reg [width_b-1:0] i_q_reg_b;$/;"	r
i_q_tmp	.\altera_mf.v	/^    reg [lpm_width-1:0] i_q_tmp;$/;"	r
i_q_tmp2_a	.\altera_mf.v	/^    reg [width_a-1:0] i_q_tmp2_a;$/;"	r
i_q_tmp2_a_idx	.\altera_mf.v	/^    integer i_q_tmp2_a_idx;$/;"	r
i_q_tmp2_b	.\altera_mf.v	/^    reg [width_b-1:0] i_q_tmp2_b;$/;"	r
i_q_tmp_a	.\altera_mf.v	/^    reg [width_a-1:0] i_q_tmp_a;$/;"	r
i_q_tmp_b	.\altera_mf.v	/^    reg [width_b-1:0] i_q_tmp_b;$/;"	r
i_qa_reg	.\altera_mf.v	/^    reg  [width-1:0]       i_qa_reg;$/;"	r
i_qa_stratix	.\altera_mf.v	/^    wire [width-1:0]       i_qa_stratix;  \/\/ qa signal for Stratix families$/;"	n
i_qa_tmp	.\altera_mf.v	/^    reg  [width-1:0]       i_qa_tmp;$/;"	r
i_qb_reg	.\altera_mf.v	/^    reg  [width-1:0]       i_qb_reg;$/;"	r
i_qb_stratix	.\altera_mf.v	/^    wire [width-1:0]       i_qb_stratix;  \/\/ qa signal for Stratix families$/;"	n
i_qb_tmp	.\altera_mf.v	/^    reg  [width-1:0]       i_qb_tmp;$/;"	r
i_ram_block_type	.\altera_mf.v	/^    reg [7*8:0] i_ram_block_type;$/;"	r
i_range_rd	.\omsp_dbg_hwbrk.v	/^wire i_range_rd =  equ_i_range &  brk_ctl[`BRK_I_EN];$/;"	n
i_rd_udwn	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_rd_udwn;$/;"	r
i_rdaddress_reg_a	.\altera_mf.v	/^    reg  [widthad-1:0]     i_rdaddress_reg_a;$/;"	r
i_rdaddress_reg_a_dly	.\altera_mf.v	/^    reg  [widthad-1:0]     i_rdaddress_reg_a_dly;$/;"	r
i_rdaddress_reg_b	.\altera_mf.v	/^    reg  [widthad-1:0]     i_rdaddress_reg_b;$/;"	r
i_rdaddress_reg_b_dly	.\altera_mf.v	/^    reg  [widthad-1:0]     i_rdaddress_reg_b_dly;$/;"	r
i_rdaddress_tmp_a	.\altera_mf.v	/^    wire [widthad-1:0]     i_rdaddress_tmp_a;$/;"	n
i_rdaddress_tmp_b	.\altera_mf.v	/^    wire [widthad-1:0]     i_rdaddress_tmp_b;$/;"	n
i_rdcontrol_aclr_b	.\altera_mf.v	/^    wire i_rdcontrol_aclr_b;$/;"	n
i_rdempty	.\altera_mf.v	/^    reg i_rdempty;$/;"	r
i_rdempty	.\altera_mf.v	/^    wire i_rdempty;$/;"	n
i_rdempty_rreg	.\altera_mf.v	/^    reg i_rdempty_rreg;$/;"	r
i_rden	.\altera_mf.v	/^    wire i_rden;$/;"	n
i_rden_reg_a	.\altera_mf.v	/^    reg                    i_rden_reg_a;$/;"	r
i_rden_reg_a	.\altera_mf.v	/^    reg i_rden_reg_a;$/;"	r
i_rden_reg_b	.\altera_mf.v	/^    reg                    i_rden_reg_b;$/;"	r
i_rden_reg_b	.\altera_mf.v	/^    reg i_rden_reg_b;$/;"	r
i_rden_reg_b_bypass	.\altera_mf.v	/^	reg i_rden_reg_b_bypass;$/;"	r
i_rden_tmp_a	.\altera_mf.v	/^    wire                   i_rden_tmp_a;$/;"	n
i_rden_tmp_b	.\altera_mf.v	/^    wire                   i_rden_tmp_b;$/;"	n
i_rdenclock	.\altera_mf.v	/^    reg i_rdenclock;$/;"	r
i_rdfull	.\altera_mf.v	/^    wire i_rdfull;$/;"	n
i_rdfull_area	.\altera_mf.v	/^    reg i_rdfull_area;$/;"	r
i_rdfull_speed	.\altera_mf.v	/^    reg i_rdfull_speed;$/;"	r
i_rdptr	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_rdptr;$/;"	r
i_rdptr	.\altera_mf.v	/^    reg [lpm_widthu:0] i_rdptr;$/;"	r
i_rdptr_g	.\altera_mf.v	/^    reg [lpm_widthu_r:0] i_rdptr_g;$/;"	r
i_rdptr_g1p	.\altera_mf.v	/^    reg [lpm_widthu_r:0] i_rdptr_g1p;$/;"	r
i_rdusedw	.\altera_mf.v	/^    reg [lpm_widthu:0] i_rdusedw;$/;"	r
i_rdusedw	.\altera_mf.v	/^    wire [lpm_widthu_r:0] i_rdusedw;$/;"	n
i_rdusedw_tmp	.\altera_mf.v	/^    reg [lpm_widthu_r:0] i_rdusedw_tmp;$/;"	r
i_read_during_write	.\altera_mf.v	/^    parameter i_read_during_write = ((rdaddress_reg == "INCLOCK") && (wrcontrol_reg == "INCLOCK") && (outdata_reg == "INCLOCK")) ?$/;"	c
i_read_flag_a	.\altera_mf.v	/^    reg i_read_flag_a;$/;"	r
i_read_flag_b	.\altera_mf.v	/^    reg i_read_flag_b;$/;"	r
i_remap_address	.\altera_mf.v	/^  input [11:0] i_remap_address, \/\/ from address_pres_reg$/;"	p
i_remap_phase	.\altera_mf.v	/^  input        i_remap_phase,$/;"	p
i_rs_dgwp	.\altera_mf.v	/^    wire [lpm_widthu:0] i_rs_dgwp;$/;"	n
i_rx_cda_max	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1: 0] i_rx_cda_max;$/;"	n
i_rx_cda_reset	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_cda_reset;$/;"	n
i_rx_channel_data_align	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_channel_data_align;$/;"	n
i_rx_dataout	.\altera_mf.v	/^    wire [`MAX_CHANNEL*`MAX_DESER -1: 0] i_rx_dataout;$/;"	n
i_rx_divfwdclk	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1: 0] i_rx_divfwdclk;$/;"	n
i_rx_dpa_lock_reset	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1: 0] i_rx_dpa_lock_reset;$/;"	n
i_rx_dpa_locked	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1: 0] i_rx_dpa_locked;$/;"	n
i_rx_dpaclock	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1: 0] i_rx_dpaclock;$/;"	n
i_rx_dpll_enable	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_dpll_enable;$/;"	n
i_rx_dpll_hold	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_dpll_hold;$/;"	n
i_rx_dpll_reset	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_dpll_reset;$/;"	n
i_rx_enable	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_enable;$/;"	n
i_rx_fastclk	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_fastclk;$/;"	n
i_rx_fifo_reset	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_fifo_reset;$/;"	n
i_rx_in	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_in;$/;"	n
i_rx_reset	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_reset;$/;"	n
i_rx_slowclk	.\altera_mf.v	/^    wire [`MAX_CHANNEL -1 :0] i_rx_slowclk;$/;"	n
i_scanina	.\altera_mf.v	/^    wire [int_width_a -1 : 0] i_scanina;$/;"	n
i_scaninb	.\altera_mf.v	/^    wire [int_width_b -1 : 0] i_scaninb;$/;"	n
i_showahead_flag	.\altera_mf.v	/^    reg i_showahead_flag;$/;"	r
i_showahead_flag1	.\altera_mf.v	/^    reg i_showahead_flag1;$/;"	r
i_showahead_flag2	.\altera_mf.v	/^    reg i_showahead_flag2;$/;"	r
i_showahead_flag3	.\altera_mf.v	/^    reg i_showahead_flag3;$/;"	r
i_ss	.\altera_mf.v	/^    integer   i_ss;$/;"	r
i_state	.\omsp_frontend.v	/^reg  [2:0] i_state;$/;"	r
i_state_nxt	.\omsp_frontend.v	/^reg  [2:0] i_state_nxt;$/;"	r
i_stratix_inclock	.\altera_mf.v	/^    wire                   i_stratix_inclock;  \/\/ inclock signal for Stratix families$/;"	n
i_stratix_outclock	.\altera_mf.v	/^    wire                   i_stratix_outclock; \/\/ inclock signal for Stratix families$/;"	n
i_vco_center	.\altera_mf.v	/^    integer   i_vco_center;$/;"	r
i_vco_max	.\altera_mf.v	/^    integer   i_vco_max;$/;"	r
i_vco_max_no_division	.\altera_mf.v	/^    integer   i_vco_max_no_division;$/;"	r
i_vco_min	.\altera_mf.v	/^    integer   i_vco_min;$/;"	r
i_vco_min_no_division	.\altera_mf.v	/^    integer   i_vco_min_no_division;$/;"	r
i_width_byteena	.\altera_mf.v	/^    parameter i_width_byteena = ((width_byteena == 0) && (i_byte_size != 0)) ? width \/ byte_size : width_byteena;$/;"	c
i_wr_udwn	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_wr_udwn;$/;"	r
i_wraddress_hi	.\altera_mf.v	/^    reg  [widthad-1:0]     i_wraddress_hi;$/;"	r
i_wraddress_lo	.\altera_mf.v	/^    reg  [widthad-1:0]     i_wraddress_lo;$/;"	r
i_wraddress_reg	.\altera_mf.v	/^    wire [widthad-1:0]     i_wraddress_reg;$/;"	n
i_wraddress_tmp	.\altera_mf.v	/^    wire [widthad-1:0]     i_wraddress_tmp;$/;"	n
i_wrcontrol_aclr_a	.\altera_mf.v	/^    wire i_wrcontrol_aclr_a;$/;"	n
i_wrcontrol_aclr_b	.\altera_mf.v	/^    wire i_wrcontrol_aclr_b;$/;"	n
i_wrempty	.\altera_mf.v	/^    wire i_wrempty;$/;"	n
i_wrempty_area	.\altera_mf.v	/^    reg i_wrempty_area;$/;"	r
i_wrempty_speed	.\altera_mf.v	/^    reg i_wrempty_speed;$/;"	r
i_wren	.\altera_mf.v	/^    wire i_wren;$/;"	n
i_wren_hi	.\altera_mf.v	/^    reg                    i_wren_hi;$/;"	r
i_wren_lo	.\altera_mf.v	/^    reg                    i_wren_lo;$/;"	r
i_wren_reg	.\altera_mf.v	/^    wire                   i_wren_reg;$/;"	n
i_wren_reg_a	.\altera_mf.v	/^    reg i_wren_reg_a;$/;"	r
i_wren_reg_b	.\altera_mf.v	/^    reg i_wren_reg_b;$/;"	r
i_wren_tmp	.\altera_mf.v	/^    reg i_wren_tmp;$/;"	r
i_wren_tmp	.\altera_mf.v	/^    wire                   i_wren_tmp;$/;"	n
i_wrfull	.\altera_mf.v	/^    reg i_wrfull;$/;"	r
i_wrfull	.\altera_mf.v	/^    wire i_wrfull;$/;"	n
i_wrfull_wreg	.\altera_mf.v	/^    reg i_wrfull_wreg;$/;"	r
i_write_flag_a	.\altera_mf.v	/^    reg i_write_flag_a;$/;"	r
i_write_flag_b	.\altera_mf.v	/^    reg i_write_flag_b;$/;"	r
i_wrptr	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_wrptr;$/;"	r
i_wrptr	.\altera_mf.v	/^    reg [lpm_widthu:0] i_wrptr;$/;"	r
i_wrptr_g	.\altera_mf.v	/^    reg [lpm_widthu:0] i_wrptr_g;$/;"	r
i_wrptr_g1	.\altera_mf.v	/^    reg [lpm_widthu:0] i_wrptr_g1;$/;"	r
i_wrptr_tmp	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_wrptr_tmp;$/;"	r
i_wrusedw	.\altera_mf.v	/^    reg [lpm_widthu-1:0] i_wrusedw;$/;"	r
i_wrusedw	.\altera_mf.v	/^    reg [lpm_widthu:0] i_wrusedw;$/;"	r
i_wrusedw	.\altera_mf.v	/^    wire [lpm_widthu:0] i_wrusedw;$/;"	n
i_wrusedw_tmp	.\altera_mf.v	/^    reg [lpm_widthu:0] i_wrusedw_tmp;$/;"	r
i_ws_dgrp	.\altera_mf.v	/^    wire [lpm_widthu_r:0] i_ws_dgrp;$/;"	n
ic1_use_casc_in	.\altera_mf.v	/^    reg ic1_use_casc_in;$/;"	r
ic2_use_casc_in	.\altera_mf.v	/^    reg ic2_use_casc_in;$/;"	r
ic3_use_casc_in	.\altera_mf.v	/^    reg ic3_use_casc_in;$/;"	r
ic4_use_casc_in	.\altera_mf.v	/^    reg ic4_use_casc_in;$/;"	r
ic5_use_casc_in	.\altera_mf.v	/^    reg ic5_use_casc_in;$/;"	r
ic6_use_casc_in	.\altera_mf.v	/^    reg ic6_use_casc_in;$/;"	r
ic7_use_casc_in	.\altera_mf.v	/^    reg ic7_use_casc_in;$/;"	r
ic8_use_casc_in	.\altera_mf.v	/^    reg ic8_use_casc_in;$/;"	r
ic9_use_casc_in	.\altera_mf.v	/^    reg ic9_use_casc_in;$/;"	r
icdr_clk	.\altera_mf.v	/^    wire icdr_clk;$/;"	n
icdrclk	.\altera_mf.v	/^    output icdrclk;$/;"	p
icdrclk	.\altera_mf.v	/^output        icdrclk;$/;"	p
idata_extended	.\altera_mf.v	/^    reg [`max_precision-1:0] idata_extended;$/;"	r
idata_word	.\altera_mf.v	/^    reg [width-1:0] idata_word;$/;"	r
idle	.\altera_mf.v	/^	parameter idle			= 5'd0;$/;"	c
idx	.\altera_mf.v	/^        integer idx;    $/;"	r
ie1	.\omsp_sfr.v	/^wire [7:0] ie1;$/;"	n
ie1_nxt	.\omsp_sfr.v	/^wire [7:0] ie1_nxt = IE1[0] ? per_din[15:8]  : per_din[7:0];$/;"	n
ie1_rd	.\omsp_sfr.v	/^wire [15:0] ie1_rd        = {8'h00, (ie1  &  {8{reg_rd[IE1]}})}  << (8 & {4{IE1[0]}});$/;"	n
ie1_wr	.\omsp_sfr.v	/^wire       ie1_wr  = IE1[0] ? reg_hi_wr[IE1] : reg_lo_wr[IE1];$/;"	n
ifg1	.\omsp_sfr.v	/^wire [7:0] ifg1;$/;"	n
ifg1_nxt	.\omsp_sfr.v	/^wire [7:0] ifg1_nxt = IFG1[0] ? per_din[15:8]   : per_din[7:0];$/;"	n
ifg1_rd	.\omsp_sfr.v	/^wire [15:0] ifg1_rd       = {8'h00, (ifg1 &  {8{reg_rd[IFG1]}})} << (8 & {4{IFG1[0]}});$/;"	n
ifg1_wr	.\omsp_sfr.v	/^wire       ifg1_wr  = IFG1[0] ? reg_hi_wr[IFG1] : reg_lo_wr[IFG1];$/;"	n
ifp	.\altera_mf.v	/^    integer ifp, ofp, r, r2;$/;"	r
ii	.\omsp_frontend.v	/^   integer      ii;$/;"	r
implement_in_les	.\altera_mf.v	/^    parameter implement_in_les                   = "OFF";$/;"	c
implement_in_les	.\altera_mf.v	/^    parameter implement_in_les                 = "OFF";$/;"	c
implement_in_les	.\altera_mf.v	/^    parameter implement_in_les = "OFF";$/;"	c
implement_input_in_lcell	.\altera_mf.v	/^parameter implement_input_in_lcell = "UNUSED";$/;"	c
imsb_align	.\altera_mf.v	/^    reg imsb_align;$/;"	r
in	.\altera_mf.v	/^    input in;$/;"	p
in0_enable	.\omsp_clock_mux.v	/^wire in0_enable;$/;"	n
in0_select	.\omsp_clock_mux.v	/^wire in0_select;$/;"	n
in0_select_s	.\omsp_clock_mux.v	/^reg  in0_select_s;$/;"	r
in0_select_ss	.\omsp_clock_mux.v	/^reg  in0_select_ss;$/;"	r
in1_enable	.\omsp_clock_mux.v	/^wire in1_enable;$/;"	n
in1_select	.\omsp_clock_mux.v	/^wire in1_select;$/;"	n
in1_select_s	.\omsp_clock_mux.v	/^reg  in1_select_s;$/;"	r
in1_select_ss	.\omsp_clock_mux.v	/^reg  in1_select_ss;$/;"	r
in_bus_add	.\altera_mf.v	/^    reg [deserialization_factor - 1 : 0] in_bus_add;$/;"	r
in_file	.\altera_mf.v	/^    input[`MAX_NAME_SZ*8 : 1] in_file;$/;"	p
in_file	.\altera_mf.v	/^    reg [`MAX_NAME_SZ*8 : 1] in_file;$/;"	r
in_tdi	.\altera_mf.v	/^        input in_tdi;    $/;"	p
in_tms	.\altera_mf.v	/^        input in_tms;$/;"	p
inc0	.\altera_mf.v	/^integer inc0;$/;"	r
inc1	.\altera_mf.v	/^integer inc1;$/;"	r
inc2	.\altera_mf.v	/^integer inc2;$/;"	r
inc_ext	.\altera_mf.v	/^integer inc_ext;$/;"	r
inc_step	.\omsp_dbg.v	/^reg [1:0] inc_step;$/;"	r
inclk	.\altera_mf.v	/^    input [1:0] inclk;$/;"	p
inclk	.\altera_mf.v	/^input       [1:0] inclk;$/;"	p
inclk	.\omsp_timerA.v	/^input               inclk;          \/\/ INCLK external timer clock (SLOW)$/;"	p
inclk0_freq	.\altera_mf.v	/^    parameter inclk0_freq = inclk0_input_frequency * 1000;$/;"	c
inclk0_freq	.\altera_mf.v	/^    parameter inclk0_freq = inclk0_input_frequency;$/;"	c
inclk0_input_frequency	.\altera_mf.v	/^    parameter inclk0_input_frequency               = 0;$/;"	c
inclk0_input_frequency	.\altera_mf.v	/^    parameter inclk0_input_frequency               = 10000;$/;"	c
inclk0_input_frequency	.\altera_mf.v	/^    parameter inclk0_input_frequency = 10000;$/;"	c
inclk0_input_frequency	.\altera_mf.v	/^parameter   inclk0_input_frequency    = 1000;$/;"	c
inclk0_ipd	.\altera_mf.v	/^    wire inclk0_ipd;$/;"	n
inclk0_last_value	.\altera_mf.v	/^    reg inclk0_last_value;$/;"	r
inclk0_period	.\altera_mf.v	/^    real inclk0_period, last_inclk0_period,inclk1_period, last_inclk1_period;$/;"	r
inclk1_freq	.\altera_mf.v	/^    parameter inclk1_freq = inclk1_input_frequency * 1000;$/;"	c
inclk1_freq	.\altera_mf.v	/^    parameter inclk1_freq = inclk1_input_frequency;$/;"	c
inclk1_input_frequency	.\altera_mf.v	/^    parameter inclk1_input_frequency               = 0;$/;"	c
inclk1_input_frequency	.\altera_mf.v	/^    parameter inclk1_input_frequency               = 10000;$/;"	c
inclk1_input_frequency	.\altera_mf.v	/^    parameter inclk1_input_frequency = 10000;$/;"	c
inclk1_input_frequency	.\altera_mf.v	/^parameter   inclk1_input_frequency    = 0;$/;"	c
inclk1_ipd	.\altera_mf.v	/^    wire inclk1_ipd;$/;"	n
inclk1_last_value	.\altera_mf.v	/^    reg inclk1_last_value;$/;"	r
inclk1_period	.\altera_mf.v	/^    real inclk0_period, last_inclk0_period,inclk1_period, last_inclk1_period;$/;"	r
inclk_c0	.\altera_mf.v	/^    wire inclk_c0;$/;"	n
inclk_c0_from_vco	.\altera_mf.v	/^    reg  inclk_c0_from_vco;$/;"	r
inclk_c0_from_vco	.\altera_mf.v	/^    wire  inclk_c0_from_vco;$/;"	n
inclk_c1	.\altera_mf.v	/^    wire inclk_c1;$/;"	n
inclk_c1_from_vco	.\altera_mf.v	/^    reg  inclk_c1_from_vco;$/;"	r
inclk_c1_from_vco	.\altera_mf.v	/^    wire  inclk_c1_from_vco;$/;"	n
inclk_c2	.\altera_mf.v	/^    wire inclk_c2;$/;"	n
inclk_c2_from_vco	.\altera_mf.v	/^    reg  inclk_c2_from_vco;$/;"	r
inclk_c2_from_vco	.\altera_mf.v	/^    wire  inclk_c2_from_vco;$/;"	n
inclk_c3	.\altera_mf.v	/^    wire inclk_c3;$/;"	n
inclk_c3_from_vco	.\altera_mf.v	/^    reg  inclk_c3_from_vco;$/;"	r
inclk_c3_from_vco	.\altera_mf.v	/^    wire  inclk_c3_from_vco;$/;"	n
inclk_c4	.\altera_mf.v	/^    wire inclk_c4;$/;"	n
inclk_c4_from_vco	.\altera_mf.v	/^    reg  inclk_c4_from_vco;$/;"	r
inclk_c4_from_vco	.\altera_mf.v	/^    wire  inclk_c4_from_vco;$/;"	n
inclk_c5	.\altera_mf.v	/^    wire inclk_c5;$/;"	n
inclk_c5_from_vco	.\altera_mf.v	/^    reg  inclk_c5_from_vco;$/;"	r
inclk_c5_from_vco	.\altera_mf.v	/^    wire  inclk_c5_from_vco;$/;"	n
inclk_c6	.\altera_mf.v	/^    wire inclk_c6;$/;"	n
inclk_c6_from_vco	.\altera_mf.v	/^    wire  inclk_c6_from_vco;$/;"	n
inclk_c7	.\altera_mf.v	/^    wire inclk_c7;$/;"	n
inclk_c7_from_vco	.\altera_mf.v	/^    wire  inclk_c7_from_vco;$/;"	n
inclk_c8	.\altera_mf.v	/^    wire inclk_c8;$/;"	n
inclk_c8_from_vco	.\altera_mf.v	/^    wire  inclk_c8_from_vco;$/;"	n
inclk_c9	.\altera_mf.v	/^    wire inclk_c9;$/;"	n
inclk_c9_from_vco	.\altera_mf.v	/^    wire  inclk_c9_from_vco;$/;"	n
inclk_dly	.\omsp_timerA.v	/^reg  inclk_dly;$/;"	r
inclk_e0	.\altera_mf.v	/^    wire inclk_e0;$/;"	n
inclk_e1	.\altera_mf.v	/^    wire inclk_e1;$/;"	n
inclk_e2	.\altera_mf.v	/^    wire inclk_e2;$/;"	n
inclk_e3	.\altera_mf.v	/^    wire inclk_e3;$/;"	n
inclk_en	.\omsp_timerA.v	/^wire inclk_en = inclk_s & ~inclk_dly;$/;"	n
inclk_es	.\altera_mf.v	/^    reg inclk_es;$/;"	r
inclk_l0	.\altera_mf.v	/^    wire inclk_l0;$/;"	n
inclk_l1	.\altera_mf.v	/^    wire inclk_l1;$/;"	n
inclk_last_value	.\altera_mf.v	/^    reg inclk_last_value;$/;"	r
inclk_m	.\altera_mf.v	/^    wire inclk_m;$/;"	n
inclk_m_from_vco	.\altera_mf.v	/^    reg  inclk_m_from_vco;$/;"	r
inclk_m_from_vco	.\altera_mf.v	/^    wire  inclk_m_from_vco;$/;"	n
inclk_man	.\altera_mf.v	/^    reg inclk_man;$/;"	r
inclk_n	.\altera_mf.v	/^    reg inclk_n;$/;"	r
inclk_out_of_range	.\altera_mf.v	/^    reg inclk_out_of_range;$/;"	r
inclk_period	.\altera_mf.v	/^real inclk_period;$/;"	r
inclk_pulldown	.\altera_mf.v	/^tri0 [1:0] inclk_pulldown;$/;"	n
inclk_s	.\omsp_timerA.v	/^wire inclk_s;$/;"	n
inclk_sclkout0_from_vco	.\altera_mf.v	/^    reg inclk_sclkout0_from_vco;$/;"	r
inclk_sclkout1_from_vco	.\altera_mf.v	/^    reg inclk_sclkout1_from_vco;$/;"	r
inclock	.\altera_mf.v	/^    input                  inclock;$/;"	p
inclock	.\altera_mf.v	/^    input  inclock;              \/\/ Input or write clock$/;"	p
inclock	.\altera_mf.v	/^    tri1                   inclock;$/;"	n
inclock	.\altera_mf.v	/^    tri1 inclock;$/;"	n
inclock	.\altera_mf.v	/^input inclock;$/;"	p
inclock	.\altera_mf.v	/^tri0 inclock;$/;"	n
inclock_boost	.\altera_mf.v	/^    parameter inclock_boost = deserialization_factor;$/;"	c
inclock_data_alignment	.\altera_mf.v	/^    parameter inclock_data_alignment = "EDGE_ALIGNED";$/;"	c
inclock_data_alignment	.\altera_mf.v	/^    parameter inclock_data_alignment = "UNUSED";$/;"	c
inclock_period	.\altera_mf.v	/^        input inclock_period;$/;"	p
inclock_period	.\altera_mf.v	/^        integer inclock_period;$/;"	r
inclock_period	.\altera_mf.v	/^    parameter inclock_period = 10000;$/;"	c
inclock_period	.\altera_mf.v	/^parameter inclock_period = 10000;  \/\/ units in ps$/;"	c
inclock_phase_shift	.\altera_mf.v	/^    parameter inclock_phase_shift = 0;$/;"	c
inclock_settings	.\altera_mf.v	/^parameter inclock_settings = "UNUSED";$/;"	c
inclocken	.\altera_mf.v	/^    input                  inclocken;$/;"	p
inclocken	.\altera_mf.v	/^    input  inclocken;            \/\/ Clock enable for inclock$/;"	p
inclocken	.\altera_mf.v	/^    tri1                   inclocken;$/;"	n
inclocken	.\altera_mf.v	/^    tri1 inclocken;$/;"	n
inclocken	.\altera_mf.v	/^input inclocken;$/;"	p
inclocken	.\altera_mf.v	/^tri1 inclocken; \/\/ default inclocken to 1$/;"	n
inclocken	.\altera_mf.v	/^tri1 inclocken;$/;"	n
inclocken_int	.\altera_mf.v	/^tri1 inclocken_int;$/;"	n
include_white_space	.\altera_mf.v	/^    reg include_white_space; \/\/ if 1, include white space in the parameter value$/;"	r
incr_op	.\omsp_register_file.v	/^wire [15:0] incr_op         = (inst_bw & ~inst_src_in[1]) ? 16'h0001 : 16'h0002;$/;"	n
indata_aclr	.\altera_mf.v	/^    parameter indata_aclr      = "ON";         \/\/ aclr affects data[]? $/;"	c
indata_aclr	.\altera_mf.v	/^    parameter indata_aclr = "ON";$/;"	c
indata_aclr_a	.\altera_mf.v	/^    parameter indata_aclr_a    = "NONE";$/;"	c
indata_aclr_b	.\altera_mf.v	/^    parameter indata_aclr_b             = "NONE";$/;"	c
indata_reg	.\altera_mf.v	/^    parameter indata_reg       = "UNREGISTERED";\/\/ clock used by data[] port$/;"	c
indata_reg	.\altera_mf.v	/^    parameter indata_reg = "INCLOCK";$/;"	c
indata_reg_b	.\altera_mf.v	/^    parameter indata_reg_b              = "CLOCK1";$/;"	c
indefinite	.\altera_mf.v	/^    output indefinite;$/;"	p
indefinite_bit	.\altera_mf.v	/^    reg indefinite_bit;$/;"	r
indefinite_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] indefinite_pipe;$/;"	r
index	.\altera_mf.v	/^    integer index;$/;"	r
index1	.\altera_mf.v	/^        input index1;$/;"	p
index1	.\altera_mf.v	/^        integer index1;$/;"	r
index2	.\altera_mf.v	/^        input index2;$/;"	p
index2	.\altera_mf.v	/^        integer index2;$/;"	r
inf_dataa	.\altera_mf.v	/^    reg inf_dataa;$/;"	r
inf_datab	.\altera_mf.v	/^    reg inf_datab;$/;"	r
init	.\altera_mf.v	/^    reg init;$/;"	r
init	.\altera_mf.v	/^reg init;$/;"	r
init_block_reset_a_count	.\altera_mf.v	/^    parameter init_block_reset_a_count = 1;$/;"	c
init_block_reset_b_count	.\altera_mf.v	/^    parameter init_block_reset_b_count = 1;$/;"	c
init_file	.\altera_mf.v	/^    parameter init_file                          = "UNUSED";$/;"	c
init_file_b_port	.\altera_mf.v	/^    reg init_file_b_port;$/;"	r
init_file_layout	.\altera_mf.v	/^    parameter init_file_layout                   = "UNUSED";$/;"	c
init_i	.\altera_mf.v	/^    integer init_i;$/;"	r
init_temp	.\altera_mf.v	/^    reg [width_a-1:0] init_temp;$/;"	r
initial_delay	.\altera_mf.v	/^    integer initial_delay;$/;"	r
initial_value	.\altera_mf.v	/^    input [31:0] initial_value;$/;"	p
initiate_reconfig	.\altera_mf.v	/^    reg initiate_reconfig;$/;"	r
input	.\altera_mf.v	/^  input                               i_avmm_clk,$/;"	c
input	.\altera_mf.v	/^  input                               i_avmm_sread,$/;"	p
input	.\altera_mf.v	/^  input                             aclr,$/;"	p
input	.\altera_mf.v	/^  input                             shutdown, \/\/ shut down (put channel(s) in standby)$/;"	p
input	.\altera_mf.v	/^  input                         i_dprio_busy,$/;"	p
input	.\altera_mf.v	/^  input  [avmm_slave_wdata_width-1:0] i_avmm_swritedata,$/;"	p
input	.\altera_mf.v	/^  input  [dprio_data_width-1:0] i_dprio_in,$/;"	p
input	.\altera_mf.v	/^  input [11:0] i_remap_address, \/\/ from address_pres_reg$/;"	p
input	.\altera_mf.v	/^  input [15:0]                      dprio_in,$/;"	p
input	.\altera_mf.v	/^  input [channel_address_width-1:0] logical_channel_address,$/;"	p
input_a_wire_clk	.\altera_mf.v	/^    wire input_a_wire_clk;$/;"	n
input_a_wire_clr	.\altera_mf.v	/^    tri0 input_a_wire_clr;$/;"	n
input_a_wire_en	.\altera_mf.v	/^    tri1 input_a_wire_en;$/;"	n
input_aclr_a	.\altera_mf.v	/^    parameter input_aclr_a              = "ACLR3";$/;"	c
input_aclr_a0	.\altera_mf.v	/^    parameter input_aclr_a0     = "ACLR3";$/;"	c
input_aclr_a1	.\altera_mf.v	/^    parameter input_aclr_a1     = "ACLR3";$/;"	c
input_aclr_a2	.\altera_mf.v	/^    parameter input_aclr_a2     = "ACLR3";$/;"	c
input_aclr_a3	.\altera_mf.v	/^    parameter input_aclr_a3     = "ACLR3";$/;"	c
input_aclr_b	.\altera_mf.v	/^    parameter input_aclr_b              = "ACLR3";$/;"	c
input_aclr_b0	.\altera_mf.v	/^    parameter input_aclr_b0     = "ACLR3";$/;"	c
input_aclr_b1	.\altera_mf.v	/^    parameter input_aclr_b1     = "ACLR3";$/;"	c
input_aclr_b2	.\altera_mf.v	/^    parameter input_aclr_b2     = "ACLR3";$/;"	c
input_aclr_b3	.\altera_mf.v	/^    parameter input_aclr_b3     = "ACLR3";$/;"	c
input_aclr_c0	.\altera_mf.v	/^	parameter input_aclr_c0		= "ACLR0";$/;"	c
input_aclr_c1	.\altera_mf.v	/^   	parameter input_aclr_c1	 	= "ACLR0";$/;"	c
input_aclr_c2	.\altera_mf.v	/^    parameter input_aclr_c2		= "ACLR0";$/;"	c
input_aclr_c3	.\altera_mf.v	/^	parameter input_aclr_c3		= "ACLR0";$/;"	c
input_b_wire_clk	.\altera_mf.v	/^    wire input_b_wire_clk;$/;"	n
input_b_wire_clr	.\altera_mf.v	/^    tri0 input_b_wire_clr;$/;"	n
input_b_wire_en	.\altera_mf.v	/^    tri1 input_b_wire_en;$/;"	n
input_cycle_count_to_sync0	.\altera_mf.v	/^integer input_cycle_count_to_sync0;$/;"	r
input_cycle_count_to_sync1	.\altera_mf.v	/^integer input_cycle_count_to_sync1;$/;"	r
input_cycle_count_to_sync2	.\altera_mf.v	/^integer input_cycle_count_to_sync2;$/;"	r
input_cycle_count_to_sync_extclk	.\altera_mf.v	/^integer input_cycle_count_to_sync_extclk;$/;"	r
input_cycles_per_clk0	.\altera_mf.v	/^integer input_cycles_per_clk0;$/;"	r
input_cycles_per_clk1	.\altera_mf.v	/^integer input_cycles_per_clk1;$/;"	r
input_cycles_per_clk2	.\altera_mf.v	/^integer input_cycles_per_clk2;$/;"	r
input_cycles_per_extclk	.\altera_mf.v	/^integer input_cycles_per_extclk;$/;"	r
input_data_rate	.\altera_mf.v	/^    parameter input_data_rate =0;$/;"	c
input_num	.\altera_mf.v	/^        input [`max_precision-1:0] input_num;$/;"	p
input_reg_a	.\altera_mf.v	/^    parameter input_reg_a               = "CLOCK0";$/;"	c
input_reg_a0_wire_clk	.\altera_mf.v	/^    wire input_reg_a0_wire_clk;$/;"	n
input_reg_a0_wire_clr	.\altera_mf.v	/^    tri0 input_reg_a0_wire_clr;$/;"	n
input_reg_a0_wire_en	.\altera_mf.v	/^    tri1 input_reg_a0_wire_en;$/;"	n
input_reg_a1_wire_clk	.\altera_mf.v	/^    wire input_reg_a1_wire_clk;$/;"	n
input_reg_a1_wire_clr	.\altera_mf.v	/^    tri0 input_reg_a1_wire_clr;$/;"	n
input_reg_a1_wire_en	.\altera_mf.v	/^    tri1 input_reg_a1_wire_en;$/;"	n
input_reg_a2_wire_clk	.\altera_mf.v	/^    wire input_reg_a2_wire_clk;$/;"	n
input_reg_a2_wire_clr	.\altera_mf.v	/^    tri0 input_reg_a2_wire_clr;$/;"	n
input_reg_a2_wire_en	.\altera_mf.v	/^    tri1 input_reg_a2_wire_en;$/;"	n
input_reg_a3_wire_clk	.\altera_mf.v	/^    wire input_reg_a3_wire_clk;$/;"	n
input_reg_a3_wire_clr	.\altera_mf.v	/^    tri0 input_reg_a3_wire_clr;$/;"	n
input_reg_a3_wire_en	.\altera_mf.v	/^    tri1 input_reg_a3_wire_en;$/;"	n
input_reg_b	.\altera_mf.v	/^    parameter input_reg_b               = "CLOCK0";$/;"	c
input_reg_b0_wire_clk	.\altera_mf.v	/^    wire input_reg_b0_wire_clk;$/;"	n
input_reg_b0_wire_clr	.\altera_mf.v	/^    tri0 input_reg_b0_wire_clr;$/;"	n
input_reg_b0_wire_en	.\altera_mf.v	/^    tri1 input_reg_b0_wire_en;$/;"	n
input_reg_b1_wire_clk	.\altera_mf.v	/^    wire input_reg_b1_wire_clk;$/;"	n
input_reg_b1_wire_clr	.\altera_mf.v	/^    tri0 input_reg_b1_wire_clr;$/;"	n
input_reg_b1_wire_en	.\altera_mf.v	/^    tri1 input_reg_b1_wire_en;$/;"	n
input_reg_b2_wire_clk	.\altera_mf.v	/^    wire input_reg_b2_wire_clk;$/;"	n
input_reg_b2_wire_clr	.\altera_mf.v	/^    tri0 input_reg_b2_wire_clr;$/;"	n
input_reg_b2_wire_en	.\altera_mf.v	/^    tri1 input_reg_b2_wire_en;$/;"	n
input_reg_b3_wire_clk	.\altera_mf.v	/^    wire input_reg_b3_wire_clk;$/;"	n
input_reg_b3_wire_clr	.\altera_mf.v	/^    tri0 input_reg_b3_wire_clr;$/;"	n
input_reg_b3_wire_en	.\altera_mf.v	/^    tri1 input_reg_b3_wire_en;$/;"	n
input_reg_c0_wire_clk	.\altera_mf.v	/^    wire input_reg_c0_wire_clk;$/;"	n
input_reg_c0_wire_clr	.\altera_mf.v	/^    tri0 input_reg_c0_wire_clr;$/;"	n
input_reg_c0_wire_en	.\altera_mf.v	/^    tri1 input_reg_c0_wire_en;$/;"	n
input_reg_c1_wire_clk	.\altera_mf.v	/^    wire input_reg_c1_wire_clk;$/;"	n
input_reg_c1_wire_clr	.\altera_mf.v	/^    tri0 input_reg_c1_wire_clr;$/;"	n
input_reg_c1_wire_en	.\altera_mf.v	/^    tri1 input_reg_c1_wire_en;$/;"	n
input_reg_c2_wire_clk	.\altera_mf.v	/^    wire input_reg_c2_wire_clk;$/;"	n
input_reg_c2_wire_clr	.\altera_mf.v	/^    tri0 input_reg_c2_wire_clr;$/;"	n
input_reg_c2_wire_en	.\altera_mf.v	/^    tri1 input_reg_c2_wire_en;$/;"	n
input_reg_c3_wire_clk	.\altera_mf.v	/^    wire input_reg_c3_wire_clk;$/;"	n
input_reg_c3_wire_clr	.\altera_mf.v	/^    tri0 input_reg_c3_wire_clr;$/;"	n
input_reg_c3_wire_en	.\altera_mf.v	/^    tri1 input_reg_c3_wire_en;$/;"	n
input_register_a0	.\altera_mf.v	/^    parameter input_register_a0 = "CLOCK0";$/;"	c
input_register_a1	.\altera_mf.v	/^    parameter input_register_a1 = "CLOCK0";$/;"	c
input_register_a2	.\altera_mf.v	/^    parameter input_register_a2 = "CLOCK0";$/;"	c
input_register_a3	.\altera_mf.v	/^    parameter input_register_a3 = "CLOCK0";$/;"	c
input_register_b0	.\altera_mf.v	/^    parameter input_register_b0 = "CLOCK0";$/;"	c
input_register_b1	.\altera_mf.v	/^    parameter input_register_b1 = "CLOCK0";$/;"	c
input_register_b2	.\altera_mf.v	/^    parameter input_register_b2 = "CLOCK0";$/;"	c
input_register_b3	.\altera_mf.v	/^    parameter input_register_b3 = "CLOCK0";$/;"	c
input_register_c0	.\altera_mf.v	/^    parameter input_register_c0	= "CLOCK0";$/;"	c
input_register_c1	.\altera_mf.v	/^   	parameter input_register_c1	= "CLOCK0";$/;"	c
input_register_c2	.\altera_mf.v	/^	parameter input_register_c2	= "CLOCK0";$/;"	c
input_register_c3	.\altera_mf.v	/^	parameter input_register_c3	= "CLOCK0";$/;"	c
input_source_a	.\altera_mf.v	/^    parameter input_source_a  = "DATAA";$/;"	c
input_source_a0	.\altera_mf.v	/^    parameter input_source_a0   = "DATAA";$/;"	c
input_source_a1	.\altera_mf.v	/^    parameter input_source_a1   = "DATAA";$/;"	c
input_source_a2	.\altera_mf.v	/^    parameter input_source_a2   = "DATAA";$/;"	c
input_source_a3	.\altera_mf.v	/^    parameter input_source_a3   = "DATAA";$/;"	c
input_source_b	.\altera_mf.v	/^    parameter input_source_b  = "DATAB";$/;"	c
input_source_b0	.\altera_mf.v	/^    parameter input_source_b0   = "DATAB";$/;"	c
input_source_b1	.\altera_mf.v	/^    parameter input_source_b1   = "DATAB";$/;"	c
input_source_b2	.\altera_mf.v	/^    parameter input_source_b2   = "DATAB";$/;"	c
input_source_b3	.\altera_mf.v	/^    parameter input_source_b3   = "DATAB";$/;"	c
inst_ad	.\omsp_execution_unit.v	/^input         [7:0] inst_ad;       \/\/ Decoded Inst: destination addressing mode$/;"	p
inst_ad	.\omsp_frontend.v	/^output         [7:0] inst_ad;          \/\/ Decoded Inst: destination addressing mode$/;"	p
inst_ad	.\omsp_frontend.v	/^reg [7:0] inst_ad;$/;"	r
inst_ad	.\openMSP430.v	/^wire           [7:0] inst_ad;$/;"	n
inst_ad_nxt	.\omsp_frontend.v	/^reg  [7:0] inst_ad_nxt;$/;"	r
inst_alu	.\omsp_alu.v	/^input        [11:0] inst_alu;      \/\/ ALU control signals$/;"	p
inst_alu	.\omsp_execution_unit.v	/^input        [11:0] inst_alu;      \/\/ ALU control signals$/;"	p
inst_alu	.\omsp_frontend.v	/^output        [11:0] inst_alu;         \/\/ ALU control signals$/;"	p
inst_alu	.\omsp_frontend.v	/^reg  [11:0] inst_alu;$/;"	r
inst_alu	.\openMSP430.v	/^wire          [11:0] inst_alu;$/;"	n
inst_alu_nxt	.\omsp_frontend.v	/^wire [11:0] inst_alu_nxt  = {exec_no_wr,$/;"	n
inst_as	.\omsp_execution_unit.v	/^input         [7:0] inst_as;       \/\/ Decoded Inst: source addressing mode$/;"	p
inst_as	.\omsp_frontend.v	/^output         [7:0] inst_as;          \/\/ Decoded Inst: source addressing mode$/;"	p
inst_as	.\omsp_frontend.v	/^reg [7:0] inst_as;$/;"	r
inst_as	.\openMSP430.v	/^wire           [7:0] inst_as;$/;"	n
inst_as_nxt	.\omsp_frontend.v	/^reg [12:0] inst_as_nxt;$/;"	r
inst_branch	.\omsp_frontend.v	/^wire inst_branch   =  (inst_ad_nxt[`DIR] & (ir[3:0]==4'h0)) | inst_type_nxt[`INST_JMP] | inst_so_nxt[`RETI];$/;"	n
inst_bw	.\omsp_alu.v	/^input               inst_bw;       \/\/ Decoded Inst: byte width$/;"	p
inst_bw	.\omsp_execution_unit.v	/^input               inst_bw;       \/\/ Decoded Inst: byte width$/;"	p
inst_bw	.\omsp_frontend.v	/^output               inst_bw;          \/\/ Decoded Inst: byte width$/;"	p
inst_bw	.\omsp_frontend.v	/^reg       inst_bw;$/;"	r
inst_bw	.\omsp_register_file.v	/^input               inst_bw;      \/\/ Decoded Inst: byte width$/;"	p
inst_bw	.\openMSP430.v	/^wire                 inst_bw;$/;"	n
inst_dest	.\omsp_execution_unit.v	/^input        [15:0] inst_dest;     \/\/ Decoded Inst: destination (one hot)$/;"	p
inst_dest	.\omsp_frontend.v	/^output        [15:0] inst_dest;        \/\/ Decoded Inst: destination (one hot)$/;"	p
inst_dest	.\omsp_frontend.v	/^wire  [15:0] inst_dest = cpu_halt_st          ? one_hot16(dbg_reg_sel) :$/;"	n
inst_dest	.\omsp_register_file.v	/^input        [15:0] inst_dest;    \/\/ Register destination selection$/;"	p
inst_dest	.\openMSP430.v	/^wire          [15:0] inst_dest;$/;"	n
inst_dest_bin	.\omsp_frontend.v	/^reg [3:0] inst_dest_bin;$/;"	r
inst_dext	.\omsp_execution_unit.v	/^input        [15:0] inst_dext;     \/\/ Decoded Inst: destination extended instruction word$/;"	p
inst_dext	.\omsp_frontend.v	/^output        [15:0] inst_dext;        \/\/ Decoded Inst: destination extended instruction word$/;"	p
inst_dext	.\omsp_frontend.v	/^reg [15:0] inst_dext;$/;"	r
inst_dext	.\openMSP430.v	/^wire          [15:0] inst_dext;$/;"	n
inst_dext_en	.\omsp_frontend.v	/^wire       inst_dext_en  = ((i_state==I_EXT1) & ~is_sext) |$/;"	n
inst_dext_rdy	.\omsp_frontend.v	/^wire inst_dext_rdy = (((i_state==I_EXT1) & ~is_sext) | (i_state==I_EXT2));$/;"	n
inst_irq_rst	.\omsp_execution_unit.v	/^input               inst_irq_rst;  \/\/ Decoded Inst: reset interrupt$/;"	p
inst_irq_rst	.\omsp_frontend.v	/^output               inst_irq_rst;     \/\/ Decoded Inst: Reset interrupt$/;"	p
inst_irq_rst	.\omsp_frontend.v	/^reg         inst_irq_rst;$/;"	r
inst_irq_rst	.\openMSP430.v	/^wire                 inst_irq_rst;$/;"	n
inst_jmp	.\omsp_alu.v	/^input         [7:0] inst_jmp;      \/\/ Decoded Inst: Conditional jump$/;"	p
inst_jmp	.\omsp_execution_unit.v	/^input         [7:0] inst_jmp;      \/\/ Decoded Inst: Conditional jump$/;"	p
inst_jmp	.\omsp_frontend.v	/^output         [7:0] inst_jmp;         \/\/ Decoded Inst: Conditional jump$/;"	p
inst_jmp	.\omsp_frontend.v	/^wire [7:0] inst_jmp = one_hot8(inst_jmp_bin) & {8{inst_type[`INST_JMP]}};$/;"	n
inst_jmp	.\openMSP430.v	/^wire           [7:0] inst_jmp;$/;"	n
inst_jmp_bin	.\omsp_frontend.v	/^reg   [2:0] inst_jmp_bin;$/;"	r
inst_mov	.\omsp_execution_unit.v	/^input               inst_mov;      \/\/ Decoded Inst: mov instruction$/;"	p
inst_mov	.\omsp_frontend.v	/^output               inst_mov;         \/\/ Decoded Inst: mov instruction$/;"	p
inst_mov	.\omsp_frontend.v	/^reg         inst_mov;$/;"	r
inst_mov	.\openMSP430.v	/^wire                 inst_mov;$/;"	n
inst_sext	.\omsp_execution_unit.v	/^input        [15:0] inst_sext;     \/\/ Decoded Inst: source extended instruction word$/;"	p
inst_sext	.\omsp_frontend.v	/^output        [15:0] inst_sext;        \/\/ Decoded Inst: source extended instruction word$/;"	p
inst_sext	.\omsp_frontend.v	/^reg [15:0] inst_sext;$/;"	r
inst_sext	.\openMSP430.v	/^wire          [15:0] inst_sext;$/;"	n
inst_sext_en	.\omsp_frontend.v	/^wire       inst_sext_en  = (decode & is_const)                 |$/;"	n
inst_sext_rdy	.\omsp_frontend.v	/^wire inst_sext_rdy = (i_state==I_EXT1) & is_sext;$/;"	n
inst_so	.\omsp_alu.v	/^input         [7:0] inst_so;       \/\/ Single-operand arithmetic$/;"	p
inst_so	.\omsp_execution_unit.v	/^input         [7:0] inst_so;       \/\/ Decoded Inst: Single-operand arithmetic$/;"	p
inst_so	.\omsp_frontend.v	/^output         [7:0] inst_so;          \/\/ Decoded Inst: Single-operand arithmetic$/;"	p
inst_so	.\omsp_frontend.v	/^reg   [7:0] inst_so;$/;"	r
inst_so	.\openMSP430.v	/^wire           [7:0] inst_so;$/;"	n
inst_so_nxt	.\omsp_frontend.v	/^wire  [7:0] inst_so_nxt = irq_detect ? 8'h80 : (one_hot8(ir[9:7]) & {8{inst_type_nxt[`INST_SO]}});$/;"	n
inst_src	.\omsp_execution_unit.v	/^input        [15:0] inst_src;      \/\/ Decoded Inst: source (one hot)$/;"	p
inst_src	.\omsp_frontend.v	/^output        [15:0] inst_src;         \/\/ Decoded Inst: source (one hot)$/;"	p
inst_src	.\omsp_frontend.v	/^wire  [15:0] inst_src = inst_type[`INST_TO] ? one_hot16(inst_src_bin)  :$/;"	n
inst_src	.\omsp_register_file.v	/^input        [15:0] inst_src;     \/\/ Register source selection$/;"	p
inst_src	.\openMSP430.v	/^wire          [15:0] inst_src;$/;"	n
inst_src_bin	.\omsp_frontend.v	/^reg [3:0] inst_src_bin;$/;"	r
inst_src_in	.\omsp_register_file.v	/^wire [15:0] inst_src_in;$/;"	n
inst_sz	.\omsp_frontend.v	/^reg  [1:0] inst_sz;$/;"	r
inst_sz_nxt	.\omsp_frontend.v	/^wire [1:0] inst_sz_nxt;$/;"	n
inst_to_1hot	.\omsp_frontend.v	/^wire [15:0] inst_to_1hot = one_hot16(ir[15:12]) & {16{inst_type_nxt[`INST_TO]}};$/;"	n
inst_to_nxt	.\omsp_frontend.v	/^wire [11:0] inst_to_nxt  = inst_to_1hot[15:4];$/;"	n
inst_type	.\omsp_execution_unit.v	/^input         [2:0] inst_type;     \/\/ Decoded Instruction type$/;"	p
inst_type	.\omsp_frontend.v	/^output         [2:0] inst_type;        \/\/ Decoded Instruction type$/;"	p
inst_type	.\omsp_frontend.v	/^reg  [2:0] inst_type;$/;"	r
inst_type	.\openMSP430.v	/^wire           [2:0] inst_type;$/;"	n
inst_type_nxt	.\omsp_frontend.v	/^wire [2:0] inst_type_nxt;$/;"	n
instance_id	.\altera_mf.v	/^    parameter    instance_id    =    "UNUSED";$/;"	c
int_bitslip_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] int_bitslip_reg;$/;"	r
int_extra_width	.\altera_mf.v	/^    parameter int_extra_width = ((multiplier_saturation == "NO") && (multiplier_rounding == "NO") && (accumulator_saturation == "NO") && (accumulator_rounding == "NO")) ? 0 : (int_width_a + int_width_b - width_a - width_b);$/;"	c
int_loop_iter	.\altera_mf.v	/^        integer int_loop_iter;$/;"	r
int_mult_diff_bit	.\altera_mf.v	/^    parameter int_mult_diff_bit = (((multiplier01_saturation == "NO") && (multiplier23_saturation == "NO") &&$/;"	c
int_mult_diff_bit_loopbk	.\altera_mf.v	/^    parameter int_mult_diff_bit_loopbk = (int_width_result > width_result)? (int_width_result - width_result) :$/;"	c
int_pll_kick_reset	.\altera_mf.v	/^    wire int_pll_kick_reset;$/;"	n
int_quot	.\altera_mf.v	/^        integer int_quot;$/;"	r
int_width_a	.\altera_mf.v	/^    parameter int_width_a = ((multiplier_saturation == "NO") && (multiplier_rounding == "NO") && (accumulator_saturation == "NO") && (accumulator_rounding == "NO")) ? width_a : 18;$/;"	c
int_width_a	.\altera_mf.v	/^    parameter int_width_a = ((preadder_mode == "INPUT" || preadder_mode == "SQUARE" || preadder_mode == "COEF" )?((width_a > width_b)? width_a + 1 : width_b + 1):$/;"	c
int_width_b	.\altera_mf.v	/^    parameter int_width_b = ((multiplier_saturation == "NO") && (multiplier_rounding == "NO") && (accumulator_saturation == "NO") && (accumulator_rounding == "NO")) ? width_b : 18;$/;"	c
int_width_b	.\altera_mf.v	/^    parameter int_width_b = ((preadder_mode == "SQUARE" )?((width_a > width_b)? width_a + 1 : width_b + 1):$/;"	c
int_width_c	.\altera_mf.v	/^    parameter int_width_c = ((preadder_mode == "INPUT" )? width_c: 1);$/;"	c
int_width_extra_bit	.\altera_mf.v	/^    parameter int_width_extra_bit = (int_width_result - int_width_a - int_width_b > 0) ? int_width_result - int_width_a - int_width_b : 0;$/;"	c
int_width_multiply_b	.\altera_mf.v	/^    parameter int_width_multiply_b = ((preadder_mode == "SIMPLE" || preadder_mode =="SQUARE")? int_width_b :$/;"	c
int_width_preadder	.\altera_mf.v	/^    parameter int_width_preadder = ((preadder_mode == "INPUT" || preadder_mode == "SQUARE" || preadder_mode == "COEF" )?((width_a > width_b)? width_a + 1 : width_b + 1):width_a);$/;"	c
int_width_result	.\altera_mf.v	/^    parameter int_width_result = (((multiplier01_saturation == "NO") && (multiplier23_saturation == "NO") &&$/;"	c
int_width_result	.\altera_mf.v	/^    parameter int_width_result = ((multiplier_saturation == "NO") && (multiplier_rounding == "NO") && (accumulator_saturation == "NO") && (accumulator_rounding == "NO")) ?$/;"	c
integer	.\altera_mf.v	/^    function integer abs;$/;"	f
integer	.\altera_mf.v	/^    function integer ceil_log2;$/;"	f
integer	.\altera_mf.v	/^    function integer count_digit;$/;"	f
integer	.\altera_mf.v	/^    function integer counter_high;$/;"	f
integer	.\altera_mf.v	/^    function integer counter_initial;$/;"	f
integer	.\altera_mf.v	/^    function integer counter_low;$/;"	f
integer	.\altera_mf.v	/^    function integer counter_ph;$/;"	f
integer	.\altera_mf.v	/^    function integer counter_time_delay;$/;"	f
integer	.\altera_mf.v	/^    function integer display_msg;$/;"	f
integer	.\altera_mf.v	/^    function integer exponential_value;$/;"	f
integer	.\altera_mf.v	/^    function integer gcd;$/;"	f
integer	.\altera_mf.v	/^    function integer get_int_phase_shift; $/;"	f
integer	.\altera_mf.v	/^    function integer get_phase_degree; $/;"	f
integer	.\altera_mf.v	/^    function integer lcm;$/;"	f
integer	.\altera_mf.v	/^    function integer maxnegabs;$/;"	f
integer	.\altera_mf.v	/^    function integer mintimedelay;$/;"	f
integer	.\altera_mf.v	/^    function integer output_counter_value;$/;"	f
integer	.\altera_mf.v	/^    function integer ph_adjust;$/;"	f
integer	.\altera_mf.v	/^    function integer scale_num;$/;"	f
integer	.\altera_mf.v	/^    function integer slowest_clk;$/;"	f
integer	.\altera_mf.v	/^    function integer str2int; $/;"	f
integer	.\altera_mf.v	/^    function integer str_to_int;$/;"	f
intended_device_family	.\altera_mf.v	/^    parameter    intended_device_family    =    "Cyclone";$/;"	c
intended_device_family	.\altera_mf.v	/^    parameter intended_device_family             = "Arria 10";$/;"	c
intended_device_family	.\altera_mf.v	/^    parameter intended_device_family             = "Stratix";$/;"	c
intended_device_family	.\altera_mf.v	/^    parameter intended_device_family         = "Stratix";$/;"	c
intended_device_family	.\altera_mf.v	/^    parameter intended_device_family  = "Stratix";$/;"	c
intended_device_family	.\altera_mf.v	/^    parameter intended_device_family = "Stratix";$/;"	c
intended_device_family	.\altera_mf.v	/^parameter   intended_device_family    = "Stratix" ;$/;"	c
intended_device_family	.\altera_mf.v	/^parameter intended_device_family = "Stratix";$/;"	c
invalid_address	.\altera_mf.v	/^    reg invalid_address;$/;"	r
invalid_channel_address	.\altera_mf.v	/^  wire invalid_channel_address, invalid_word_address;$/;"	n
invalid_lock_cycles	.\altera_mf.v	/^parameter invalid_lock_cycles = 5;$/;"	c
invalid_lock_multiplier	.\altera_mf.v	/^    parameter invalid_lock_multiplier              = 5;$/;"	c
invalid_lock_multiplier	.\altera_mf.v	/^    parameter invalid_lock_multiplier = 5;$/;"	c
invalid_lock_multiplier	.\altera_mf.v	/^parameter   invalid_lock_multiplier   = 5;$/;"	c
invalid_lock_multiplier	.\altera_mf.v	/^parameter invalid_lock_multiplier = 5;$/;"	c
invalid_word_address	.\altera_mf.v	/^  wire invalid_channel_address, invalid_word_address;$/;"	n
invert_clock	.\altera_mf.v	/^    parameter invert_clock = "FALSE";$/;"	c
invert_input_clocks	.\altera_mf.v	/^parameter invert_input_clocks = "OFF";$/;"	c
invert_output	.\altera_mf.v	/^parameter invert_output = "OFF";$/;"	c
io	.\altera_mf.v	/^    inout io;$/;"	p
io_cell	.\io_cell.v	/^module  io_cell ($/;"	m
io_cell	.\work\io_cell\_primary.vhd	/^entity io_cell is$/;"	e
iobuf_io	.\altera_mf.v	/^wire iobuf_io;$/;"	n
iobuf_o	.\altera_mf.v	/^wire iobuf_o;$/;"	n
ir	.\omsp_frontend.v	/^wire [15:0] ir  = mdb_in;$/;"	n
ir_in	.\altera_mf.v	/^    input    [SLD_IR_BITS-1:0]    ir_in;$/;"	p
ir_in	.\altera_mf.v	/^    input    [sld_ir_width-1:0]    ir_in;$/;"	p
ir_in	.\altera_mf.v	/^    output    [sld_ir_width-1:0]    ir_in;$/;"	p
ir_in	.\altera_mf.v	/^    output [sld_ir_width - 1 : 0] ir_in; \/\/ paraller ir data from megafunction    $/;"	p
ir_out	.\altera_mf.v	/^    input    [sld_ir_width-1:0]    ir_out;$/;"	p
ir_out	.\altera_mf.v	/^    input [sld_ir_width - 1 : 0] ir_out;\/\/ parallel ir data into megafunction$/;"	p
ir_out	.\altera_mf.v	/^    output    [SLD_IR_BITS-1:0]    ir_out;$/;"	p
ir_out	.\altera_mf.v	/^    output    [sld_ir_width-1:0]    ir_out;$/;"	p
ir_register_width	.\altera_mf.v	/^    parameter ir_register_width = 16;$/;"	c
ir_srl	.\altera_mf.v	/^    reg  [`SLD_NODE_IR_WIDTH_I - 1 : 0] ir_srl; \/\/ ir shift register$/;"	r
ir_srl	.\altera_mf.v	/^    reg [ ir_register_width - 1 : 0] ir_srl;$/;"	r
ir_srl_hold	.\altera_mf.v	/^    reg  [`SLD_NODE_IR_WIDTH_I - 1 : 0] ir_srl_hold; \/\/hold register for ir shift register  $/;"	r
ir_srl_hold	.\altera_mf.v	/^    reg [ ir_register_width - 1 : 0] ir_srl_hold;$/;"	r
ir_srl_tmp	.\altera_mf.v	/^    wire [ ir_register_width - 1 : 0] ir_srl_tmp;$/;"	n
ir_srl_tmp	.\altera_mf.v	/^    wire [`SLD_NODE_IR_WIDTH_I - 1 : 0] ir_srl_tmp; \/\/ ir shift register$/;"	n
ireg_wdaddr_width	.\altera_mf.v	/^  parameter ireg_wdaddr_width = 2, \/\/ width of 2 - only need to address 4 registers$/;"	c
irq	.\altera_mf.v	/^    output    irq;$/;"	p
irq	.\omsp_frontend.v	/^input  [`IRQ_NR-3:0] irq;              \/\/ Maskable interrupts$/;"	p
irq	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 32'h0000_0000}      |$/;"	n
irq	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 48'h0000_0000_0000} |$/;"	n
irq	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq}                     |$/;"	n
irq	.\openMSP430.v	/^input  [`IRQ_NR-3:0] irq;                    \/\/ Maskable interrupts (14, 30 or 62)$/;"	p
irq	.\openMSP430_fpga.v	/^wire  [`IRQ_NR-3:0] irq;$/;"	n
irq_acc	.\omsp_frontend.v	/^output [`IRQ_NR-3:0] irq_acc;          \/\/ Interrupt request accepted (one-hot signal)$/;"	p
irq_acc	.\omsp_frontend.v	/^wire [`IRQ_NR-3:0] irq_acc     = irq_acc_all[61:64-`IRQ_NR];$/;"	n
irq_acc	.\openMSP430.v	/^output [`IRQ_NR-3:0] irq_acc;                \/\/ Interrupt request accepted (one-hot signal)$/;"	p
irq_acc	.\openMSP430_fpga.v	/^wire  [`IRQ_NR-3:0] irq_acc;$/;"	n
irq_acc_all	.\omsp_frontend.v	/^wire        [63:0] irq_acc_all = one_hot64(irq_num) & {64{(i_state==I_IRQ_FETCH)}};$/;"	n
irq_addr	.\omsp_frontend.v	/^wire [15:0] irq_addr    = {9'h1ff, irq_num, 1'b0};$/;"	n
irq_all	.\omsp_frontend.v	/^   input [62:0] irq_all;$/;"	p
irq_all	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 32'h0000_0000}      |$/;"	n
irq_all	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq, 48'h0000_0000_0000} |$/;"	n
irq_all	.\omsp_frontend.v	/^wire [62:0] irq_all     = {nmi_pnd, irq}                     |$/;"	n
irq_detect	.\omsp_frontend.v	/^wire       irq_detect;$/;"	n
irq_in	.\openMSP430_fpga.v	/^wire  [`IRQ_NR-3:0] irq_in;$/;"	n
irq_num	.\omsp_frontend.v	/^reg  [5:0] irq_num;$/;"	r
irq_num	.\omsp_frontend.v	/^wire [15:0] irq_addr    = {9'h1ff, irq_num, 1'b0};$/;"	n
irq_port1	.\omsp_gpio.v	/^output              irq_port1;      \/\/ Port 1 interrupt$/;"	p
irq_port1	.\openMSP430_fpga.v	/^wire               irq_port1;$/;"	n
irq_port2	.\omsp_gpio.v	/^output              irq_port2;      \/\/ Port 2 interrupt$/;"	p
irq_port2	.\openMSP430_fpga.v	/^wire               irq_port2;$/;"	n
irq_ta0	.\omsp_timerA.v	/^output              irq_ta0;        \/\/ Timer A interrupt: TACCR0$/;"	p
irq_ta0	.\omsp_timerA.v	/^wire     irq_ta0    = (tacctl0[`TACCIFG] & tacctl0[`TACCIE]);$/;"	n
irq_ta0	.\openMSP430_fpga.v	/^wire               irq_ta0;$/;"	n
irq_ta0_acc	.\omsp_timerA.v	/^input               irq_ta0_acc;    \/\/ Interrupt request TACCR0 accepted$/;"	p
irq_ta1	.\omsp_timerA.v	/^output              irq_ta1;        \/\/ Timer A interrupt: TAIV, TACCR1, TACCR2$/;"	p
irq_ta1	.\omsp_timerA.v	/^wire     irq_ta1    = (tactl[`TAIFG]     & tactl[`TAIE])     |$/;"	n
irq_ta1	.\openMSP430_fpga.v	/^wire               irq_ta1;$/;"	n
is_arria10	.\altera_mf.v	/^    reg is_arria10;$/;"	r
is_arriagx	.\altera_mf.v	/^    reg is_arriagx;$/;"	r
is_arriaiigx	.\altera_mf.v	/^    reg is_arriaiigx;$/;"	r
is_arriaiigz	.\altera_mf.v	/^    reg is_arriaiigz;$/;"	r
is_arriav	.\altera_mf.v	/^    reg is_arriav;$/;"	r
is_arriavgz	.\altera_mf.v	/^    reg is_arriavgz;$/;"	r
is_bidir_and_wrcontrol_addb_clk0	.\altera_mf.v	/^    parameter is_bidir_and_wrcontrol_addb_clk0 =    (((operation_mode == "BIDIR_DUAL_PORT") && (address_reg_b == "CLOCK0"))? $/;"	c
is_bidir_and_wrcontrol_addb_clk1	.\altera_mf.v	/^    parameter is_bidir_and_wrcontrol_addb_clk1 =    (((operation_mode == "BIDIR_DUAL_PORT") && (address_reg_b == "CLOCK1"))? $/;"	c
is_const	.\omsp_frontend.v	/^wire       is_const;$/;"	n
is_cyclone	.\altera_mf.v	/^    reg is_cyclone;$/;"	r
is_cycloneii	.\altera_mf.v	/^    reg is_cycloneii;$/;"	r
is_cycloneiii	.\altera_mf.v	/^    reg is_cycloneiii;$/;"	r
is_cycloneiiils	.\altera_mf.v	/^    reg is_cycloneiiils;$/;"	r
is_cycloneive	.\altera_mf.v	/^    reg is_cycloneive;$/;"	r
is_cycloneivgx	.\altera_mf.v	/^    reg is_cycloneivgx;$/;"	r
is_cyclonev	.\altera_mf.v	/^    reg is_cyclonev;$/;"	r
is_fast_pll	.\altera_mf.v	/^    reg is_fast_pll;$/;"	r
is_hardcopyii	.\altera_mf.v	/^    reg is_hardcopyii;$/;"	r
is_hardcopyiii	.\altera_mf.v	/^    reg is_hardcopyiii;$/;"	r
is_hardcopyiv	.\altera_mf.v	/^    reg is_hardcopyiv;$/;"	r
is_inverted_output_ddio	.\altera_mf.v	/^reg is_inverted_output_ddio;$/;"	r
is_lutram	.\altera_mf.v	/^    parameter is_lutram = ((ram_block_type == "LUTRAM") || (ram_block_type == "MLAB"))? 1 : 0;$/;"	c
is_max10	.\altera_mf.v	/^    reg is_max10;$/;"	r
is_maxii	.\altera_mf.v	/^    reg is_maxii;$/;"	r
is_maxii	.\altera_mf.v	/^reg is_maxii;$/;"	r
is_maxv	.\altera_mf.v	/^    reg is_maxv;$/;"	r
is_overflow	.\altera_mf.v	/^    reg is_overflow;$/;"	r
is_rising_edge_write_ena	.\altera_mf.v	/^    reg is_rising_edge_write_ena;$/;"	r
is_sext	.\omsp_frontend.v	/^wire is_sext = (inst_as[`IDX] | inst_as[`SYMB] | inst_as[`ABS] | inst_as[`IMM]);$/;"	n
is_stratix	.\altera_mf.v	/^    reg is_stratix;$/;"	r
is_stratix	.\altera_mf.v	/^reg is_stratix;$/;"	r
is_stratix10	.\altera_mf.v	/^    reg is_stratix10;$/;"	r
is_stratixgx	.\altera_mf.v	/^    reg is_stratixgx;$/;"	r
is_stratixii	.\altera_mf.v	/^    reg is_stratixii;$/;"	r
is_stratixiigx	.\altera_mf.v	/^    reg is_stratixiigx;$/;"	r
is_stratixiii	.\altera_mf.v	/^    reg is_stratixiii;$/;"	r
is_stratixiii	.\altera_mf.v	/^reg is_stratixiii;$/;"	r
is_stratixiv	.\altera_mf.v	/^    reg is_stratixiv;$/;"	r
is_stratixv	.\altera_mf.v	/^    reg is_stratixv;$/;"	r
is_stxiii_style_ram	.\altera_mf.v	/^    reg is_stxiii_style_ram;$/;"	r
is_stxv_style_ram	.\altera_mf.v	/^    reg is_stxv_style_ram;$/;"	r
is_underflow	.\altera_mf.v	/^    reg is_underflow;$/;"	r
is_valid	.\altera_mf.v	/^    reg is_valid;$/;"	r
is_word_address_format	.\altera_mf.v	/^    reg is_word_address_format;$/;"	r
is_write_at_low_clock	.\altera_mf.v	/^    reg is_write_at_low_clock;$/;"	r
is_write_on_positive_edge	.\altera_mf.v	/^   parameter is_write_on_positive_edge = (((ram_block_type == "M-RAM") || (ram_block_type == "MEGARAM")) || (ram_block_type == "M9K") || (ram_block_type == "M20K") || (ram_block_type == "M10K") || (ram_block_type == "M144K") || ((family_has_stratixv_style_ram == 1) && (is_lutram == 1)) || (((family_has_stratixv_style_ram == 1) || (family_has_stratixiii_style_ram == 1)) && (ram_block_type == "AUTO"))) ? 1 : 0; $/;"	c
is_write_on_positive_edge	.\altera_mf.v	/^   parameter is_write_on_positive_edge = 1; \/\/TBR$/;"	c
istep	.\omsp_dbg.v	/^wire        istep    = cpu_ctl_wr & dbg_din[`ISTEP] &  dbg_halt_st;$/;"	n
iter_byteena	.\altera_mf.v	/^    integer iter_byteena;$/;"	r
ivalue	.\altera_mf.v	/^        integer m, ivalue;$/;"	r
j	.\altera_mf.v	/^    integer i, j, k, m, n;$/;"	r
j	.\altera_mf.v	/^    integer j;        \/\/ for loop index$/;"	r
j	.\altera_mf.v	/^    integer j;$/;"	r
j	.\tb_openMSP430_fpga.v	/^integer j;$/;"	r
j1	.\altera_mf.v	/^    integer j1;$/;"	r
j2	.\altera_mf.v	/^    integer j2;$/;"	r
j2_plus_i5	.\altera_mf.v	/^    integer j2_plus_i5;$/;"	r
j2_plus_i5_div_a	.\altera_mf.v	/^    integer j2_plus_i5_div_a;$/;"	r
j3	.\altera_mf.v	/^    integer j3;$/;"	r
j3_plus_i5	.\altera_mf.v	/^    integer j3_plus_i5;$/;"	r
j3_plus_i5_div_a	.\altera_mf.v	/^    integer j3_plus_i5_div_a;$/;"	r
j3_plus_i5_div_b	.\altera_mf.v	/^    integer j3_plus_i5_div_b;$/;"	r
j_plus_i2	.\altera_mf.v	/^    integer j_plus_i2;$/;"	r
j_plus_i2_div_a	.\altera_mf.v	/^    integer j_plus_i2_div_a;$/;"	r
jmp_not_taken	.\omsp_alu.v	/^wire        jmp_not_taken  = (inst_jmp[`JL]  & ~(status[3]^status[2])) |$/;"	n
jtag_ir_usr0	.\altera_mf.v	/^    task jtag_ir_usr0;$/;"	t
jtag_ir_usr1	.\altera_mf.v	/^    task jtag_ir_usr1;$/;"	t
jtag_reset_i	.\altera_mf.v	/^    reg       jtag_reset_i;$/;"	r
jtag_state_cdr	.\altera_mf.v	/^    input    jtag_state_cdr;$/;"	p
jtag_state_cdr	.\altera_mf.v	/^    input   jtag_state_cdr; \/\/ cdr state signal from tap controller$/;"	p
jtag_state_cdr	.\altera_mf.v	/^    output    jtag_state_cdr;   \/\/ capture dr state$/;"	p
jtag_state_cdr	.\altera_mf.v	/^    output    jtag_state_cdr;$/;"	p
jtag_state_cdr	.\altera_mf.v	/^    output   jtag_state_cdr;    \/\/ capture DR state$/;"	p
jtag_state_cdr	.\altera_mf.v	/^    reg   jtag_state_cdr;   \/\/ capture dr state$/;"	r
jtag_state_cdr_i	.\altera_mf.v	/^    wire   jtag_state_cdr_i;$/;"	n
jtag_state_cir	.\altera_mf.v	/^    input    jtag_state_cir;$/;"	p
jtag_state_cir	.\altera_mf.v	/^    input   jtag_state_cir; \/\/ cir state signals from tap controller$/;"	p
jtag_state_cir	.\altera_mf.v	/^    output    jtag_state_cir;   \/\/ capture ir state$/;"	p
jtag_state_cir	.\altera_mf.v	/^    output    jtag_state_cir;$/;"	p
jtag_state_cir	.\altera_mf.v	/^    output   jtag_state_cir;    \/\/ capture IR state$/;"	p
jtag_state_cir	.\altera_mf.v	/^    reg   jtag_state_cir;   \/\/ capture ir state$/;"	r
jtag_state_cir_i	.\altera_mf.v	/^    wire   jtag_state_cir_i;$/;"	n
jtag_state_drs	.\altera_mf.v	/^    input   jtag_state_drs; \/\/ drs state signal from tap controller$/;"	p
jtag_state_drs	.\altera_mf.v	/^    output    jtag_state_drs;   \/\/ select dr scan state    $/;"	p
jtag_state_drs	.\altera_mf.v	/^    reg   jtag_state_drs;   \/\/ select dr scan state    $/;"	r
jtag_state_drs_i	.\altera_mf.v	/^    wire   jtag_state_drs_i;$/;"	n
jtag_state_e1dr	.\altera_mf.v	/^    input    jtag_state_e1dr;$/;"	p
jtag_state_e1dr	.\altera_mf.v	/^    input   jtag_state_e1dr;\/\/ e1dr state signal from tap controller$/;"	p
jtag_state_e1dr	.\altera_mf.v	/^    output    jtag_state_e1dr;  \/\/ exit1 dr state$/;"	p
jtag_state_e1dr	.\altera_mf.v	/^    output    jtag_state_e1dr;$/;"	p
jtag_state_e1dr	.\altera_mf.v	/^    output   jtag_state_e1dr;   \/\/ exit 1 dr state$/;"	p
jtag_state_e1dr	.\altera_mf.v	/^    reg   jtag_state_e1dr;  \/\/ exit1 dr state$/;"	r
jtag_state_e1dr_i	.\altera_mf.v	/^    wire   jtag_state_e1dr_i;$/;"	n
jtag_state_e1ir	.\altera_mf.v	/^    input    jtag_state_e1ir;$/;"	p
jtag_state_e1ir	.\altera_mf.v	/^    input   jtag_state_e1ir;\/\/ e1ir state signal from tap controller$/;"	p
jtag_state_e1ir	.\altera_mf.v	/^    output    jtag_state_e1ir;  \/\/ exit1 ir state$/;"	p
jtag_state_e1ir	.\altera_mf.v	/^    output    jtag_state_e1ir;$/;"	p
jtag_state_e1ir	.\altera_mf.v	/^    output   jtag_state_e1ir;   \/\/ exit 1 IR state$/;"	p
jtag_state_e1ir	.\altera_mf.v	/^    reg   jtag_state_e1ir;  \/\/ exit1 ir state$/;"	r
jtag_state_e1ir_i	.\altera_mf.v	/^    wire   jtag_state_e1ir_i;$/;"	n
jtag_state_e2dr	.\altera_mf.v	/^    input    jtag_state_e2dr;$/;"	p
jtag_state_e2dr	.\altera_mf.v	/^    input   jtag_state_e2dr;\/\/ esdr state signal from tap controller$/;"	p
jtag_state_e2dr	.\altera_mf.v	/^    output    jtag_state_e2dr;  \/\/ exit2 dr state $/;"	p
jtag_state_e2dr	.\altera_mf.v	/^    output    jtag_state_e2dr;$/;"	p
jtag_state_e2dr	.\altera_mf.v	/^    output   jtag_state_e2dr;   \/\/ exit 2 dr state$/;"	p
jtag_state_e2dr	.\altera_mf.v	/^    reg   jtag_state_e2dr;  \/\/ exit2 dr state $/;"	r
jtag_state_e2dr_i	.\altera_mf.v	/^    wire   jtag_state_e2dr_i;$/;"	n
jtag_state_e2ir	.\altera_mf.v	/^    input    jtag_state_e2ir;$/;"	p
jtag_state_e2ir	.\altera_mf.v	/^    input   jtag_state_e2ir;\/\/ e2ir state signal from tap controller$/;"	p
jtag_state_e2ir	.\altera_mf.v	/^    output    jtag_state_e2ir;  \/\/ exit2 ir state    $/;"	p
jtag_state_e2ir	.\altera_mf.v	/^    output    jtag_state_e2ir;$/;"	p
jtag_state_e2ir	.\altera_mf.v	/^    output   jtag_state_e2ir;   \/\/ exit 2 IR state $/;"	p
jtag_state_e2ir	.\altera_mf.v	/^    reg   jtag_state_e2ir;  \/\/ exit2 ir state    $/;"	r
jtag_state_e2ir_i	.\altera_mf.v	/^    wire   jtag_state_e2ir_i;$/;"	n
jtag_state_irs	.\altera_mf.v	/^    input   jtag_state_irs; \/\/ irs state signal from tap controller$/;"	p
jtag_state_irs	.\altera_mf.v	/^    output    jtag_state_irs;   \/\/ select ir scan state$/;"	p
jtag_state_irs	.\altera_mf.v	/^    reg   jtag_state_irs;   \/\/ select ir scan state$/;"	r
jtag_state_irs_i	.\altera_mf.v	/^    wire   jtag_state_irs_i;$/;"	n
jtag_state_pdr	.\altera_mf.v	/^    input    jtag_state_pdr;$/;"	p
jtag_state_pdr	.\altera_mf.v	/^    input   jtag_state_pdr; \/\/ pdr state signal from tap controller$/;"	p
jtag_state_pdr	.\altera_mf.v	/^    output    jtag_state_pdr;   \/\/ pause dr state$/;"	p
jtag_state_pdr	.\altera_mf.v	/^    output    jtag_state_pdr;$/;"	p
jtag_state_pdr	.\altera_mf.v	/^    output   jtag_state_pdr;    \/\/ pause dr state $/;"	p
jtag_state_pdr	.\altera_mf.v	/^    reg   jtag_state_pdr;   \/\/ pause dr state$/;"	r
jtag_state_pdr_i	.\altera_mf.v	/^    wire   jtag_state_pdr_i;$/;"	n
jtag_state_pir	.\altera_mf.v	/^    input    jtag_state_pir;$/;"	p
jtag_state_pir	.\altera_mf.v	/^    input   jtag_state_pir; \/\/ pir state signals from tap controller$/;"	p
jtag_state_pir	.\altera_mf.v	/^    output    jtag_state_pir;   \/\/ pause ir state$/;"	p
jtag_state_pir	.\altera_mf.v	/^    output    jtag_state_pir;$/;"	p
jtag_state_pir	.\altera_mf.v	/^    output   jtag_state_pir;    \/\/ pause IR state$/;"	p
jtag_state_pir	.\altera_mf.v	/^    reg   jtag_state_pir;   \/\/ pause ir state$/;"	r
jtag_state_pir_i	.\altera_mf.v	/^    wire   jtag_state_pir_i;$/;"	n
jtag_state_rti	.\altera_mf.v	/^    input    jtag_state_rti;$/;"	p
jtag_state_rti	.\altera_mf.v	/^    input   jtag_state_rti; \/\/ rti state signal from tap controller$/;"	p
jtag_state_rti	.\altera_mf.v	/^    output    jtag_state_rti;   \/\/ rti state$/;"	p
jtag_state_rti	.\altera_mf.v	/^    output    jtag_state_rti;$/;"	p
jtag_state_rti	.\altera_mf.v	/^    output   jtag_state_rti;    \/\/ Run, Test, Idle state $/;"	p
jtag_state_rti	.\altera_mf.v	/^    reg   jtag_state_rti;   \/\/ rti state$/;"	r
jtag_state_rti_i	.\altera_mf.v	/^    wire   jtag_state_rti_i;$/;"	n
jtag_state_sdr	.\altera_mf.v	/^    input    jtag_state_sdr;$/;"	p
jtag_state_sdr	.\altera_mf.v	/^    input   jtag_state_sdr; \/\/ sdr state signal from tap controller$/;"	p
jtag_state_sdr	.\altera_mf.v	/^    output    jtag_state_sdr;   \/\/ shift dr state    $/;"	p
jtag_state_sdr	.\altera_mf.v	/^    output    jtag_state_sdr;$/;"	p
jtag_state_sdr	.\altera_mf.v	/^    output   jtag_state_sdr;    \/\/ Shift DR state $/;"	p
jtag_state_sdr	.\altera_mf.v	/^    reg   jtag_state_sdr;   \/\/ shift dr state    $/;"	r
jtag_state_sdr_i	.\altera_mf.v	/^    wire   jtag_state_sdr_i;$/;"	n
jtag_state_sdrs	.\altera_mf.v	/^    input    jtag_state_sdrs;$/;"	p
jtag_state_sdrs	.\altera_mf.v	/^    output    jtag_state_sdrs;$/;"	p
jtag_state_sdrs	.\altera_mf.v	/^    output   jtag_state_sdrs;   \/\/ Select DR scan state$/;"	p
jtag_state_sir	.\altera_mf.v	/^    input    jtag_state_sir;$/;"	p
jtag_state_sir	.\altera_mf.v	/^    input   jtag_state_sir; \/\/ sir state signal from tap controller$/;"	p
jtag_state_sir	.\altera_mf.v	/^    output    jtag_state_sir;   \/\/ shift ir state$/;"	p
jtag_state_sir	.\altera_mf.v	/^    output    jtag_state_sir;$/;"	p
jtag_state_sir	.\altera_mf.v	/^    output   jtag_state_sir;    \/\/ shift IR state $/;"	p
jtag_state_sir	.\altera_mf.v	/^    reg   jtag_state_sir;   \/\/ shift ir state$/;"	r
jtag_state_sir_i	.\altera_mf.v	/^    wire   jtag_state_sir_i;$/;"	n
jtag_state_sirs	.\altera_mf.v	/^    input    jtag_state_sirs;$/;"	p
jtag_state_sirs	.\altera_mf.v	/^    output    jtag_state_sirs;$/;"	p
jtag_state_sirs	.\altera_mf.v	/^    output   jtag_state_sirs;   \/\/ Select IR scan state$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    input    jtag_state_tlr;$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    input   jtag_state_tlr; \/\/ tlr state signal from tap controller$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    output    jtag_state_tlr;   \/\/ tlr state$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    output    jtag_state_tlr;$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    output   jtag_state_tlr;    \/\/ Test, Logic, Reset state$/;"	p
jtag_state_tlr	.\altera_mf.v	/^    reg   jtag_state_tlr;   \/\/ tlr state$/;"	r
jtag_state_tlr_i	.\altera_mf.v	/^    wire   jtag_state_tlr_i;$/;"	n
jtag_state_udr	.\altera_mf.v	/^    input    jtag_state_udr;$/;"	p
jtag_state_udr	.\altera_mf.v	/^    input   jtag_state_udr; \/\/ udr state signal from tap controller$/;"	p
jtag_state_udr	.\altera_mf.v	/^    output    jtag_state_udr;   \/\/ update dr state$/;"	p
jtag_state_udr	.\altera_mf.v	/^    output    jtag_state_udr;$/;"	p
jtag_state_udr	.\altera_mf.v	/^    output   jtag_state_udr;    \/\/ update dr state $/;"	p
jtag_state_udr	.\altera_mf.v	/^    reg   jtag_state_udr;   \/\/ update dr state$/;"	r
jtag_state_udr_i	.\altera_mf.v	/^    wire   jtag_state_udr_i;$/;"	n
jtag_state_uir	.\altera_mf.v	/^    input    jtag_state_uir;$/;"	p
jtag_state_uir	.\altera_mf.v	/^    input   jtag_state_uir; \/\/ uir state signal from tap controller$/;"	p
jtag_state_uir	.\altera_mf.v	/^    output    jtag_state_uir;   \/\/ update ir state$/;"	p
jtag_state_uir	.\altera_mf.v	/^    output    jtag_state_uir;$/;"	p
jtag_state_uir	.\altera_mf.v	/^    output   jtag_state_uir;    \/\/ update IR state$/;"	p
jtag_state_uir	.\altera_mf.v	/^    reg   jtag_state_uir;   \/\/ update ir state$/;"	r
jtag_state_uir_i	.\altera_mf.v	/^    wire   jtag_state_uir_i;$/;"	n
jtag_tap_controller	.\altera_mf.v	/^module jtag_tap_controller (tck,tms,tdi,jtag_tdo,tdo,jtag_tck,jtag_tms,jtag_tdi,$/;"	m
jtag_tap_controller	.\work\jtag_tap_controller\_primary.vhd	/^entity jtag_tap_controller is$/;"	e
jtag_tck	.\altera_mf.v	/^    input   jtag_tck;       \/\/ tck signal from tap controller$/;"	p
jtag_tck	.\altera_mf.v	/^    output    jtag_tck;  \/\/ tck signal from jtag$/;"	p
jtag_tck_i	.\altera_mf.v	/^    wire   jtag_tck_i;$/;"	n
jtag_tdi	.\altera_mf.v	/^    input   jtag_tdi;       \/\/ tdi signal from tap controller$/;"	p
jtag_tdi	.\altera_mf.v	/^    output    jtag_tdi;  \/\/ tdi signal from jtag$/;"	p
jtag_tdi_i	.\altera_mf.v	/^    wire   jtag_tdi_i;$/;"	n
jtag_tdo	.\altera_mf.v	/^    input     jtag_tdo; \/\/ tdo signal from hub$/;"	p
jtag_tdo	.\altera_mf.v	/^    output   jtag_tdo;             \/\/ tdo signal to tap controller$/;"	p
jtag_tdo_i	.\altera_mf.v	/^    wire   jtag_tdo_i;$/;"	n
jtag_tdo_reg	.\altera_mf.v	/^    reg   jtag_tdo_reg;  \/\/ register for jtag_tdo$/;"	r
jtag_tms	.\altera_mf.v	/^    input   jtag_tms;       \/\/ tms signal from tap controller$/;"	p
jtag_tms	.\altera_mf.v	/^    output    jtag_tms;  \/\/ tms signal from jtag$/;"	p
jtag_tms_i	.\altera_mf.v	/^    wire   jtag_tms_i;$/;"	n
jtag_usr1	.\altera_mf.v	/^    input     jtag_usr1;$/;"	p
jtag_usr1	.\altera_mf.v	/^    input   jtag_usr1;      \/\/ usr1 signal from tap controller$/;"	p
jtag_usr1	.\altera_mf.v	/^    output    jtag_usr1;        \/\/ jtag has usr1 instruction$/;"	p
jtag_usr1_i	.\altera_mf.v	/^    wire   jtag_usr1_i;$/;"	n
jtag_usr1_reg	.\altera_mf.v	/^    reg       jtag_usr1_reg;$/;"	r
k	.\altera_mf.v	/^    integer i, j, k, m, n;$/;"	r
k	.\altera_mf.v	/^    integer k;        \/\/ for loop index$/;"	r
k	.\altera_mf.v	/^    integer k;$/;"	r
k2	.\altera_mf.v	/^    integer k2;$/;"	r
k3	.\altera_mf.v	/^    integer k3;$/;"	r
k4	.\altera_mf.v	/^    integer k4;$/;"	r
kick_delay_oc	.\altera_mf.v	/^	parameter kick_delay_oc		= 5'd18;$/;"	c
kick_pause	.\altera_mf.v	/^	parameter kick_pause 		= 5'd17;$/;"	c
kick_start_rd	.\altera_mf.v	/^	parameter kick_start_rd 	= 5'd13;$/;"	c
kick_start_wr	.\altera_mf.v	/^	parameter kick_start_wr 	= 5'd16;$/;"	c
l0_clk	.\altera_mf.v	/^    wire l0_clk;$/;"	n
l0_count	.\altera_mf.v	/^    integer l0_count;$/;"	r
l0_got_first_rising_edge	.\altera_mf.v	/^    reg l0_got_first_rising_edge;$/;"	r
l0_high	.\altera_mf.v	/^    parameter l0_high = 1;$/;"	c
l0_high	.\altera_mf.v	/^parameter   l0_high             = 1;$/;"	c
l0_high_val	.\altera_mf.v	/^    reg [31:0] l0_high_val;$/;"	r
l0_initial	.\altera_mf.v	/^    parameter l0_initial = 1;$/;"	c
l0_initial	.\altera_mf.v	/^parameter   l0_initial          = 1;$/;"	c
l0_initial_val	.\altera_mf.v	/^    reg [31:0] l0_initial_val;$/;"	r
l0_low	.\altera_mf.v	/^    parameter l0_low = 1;$/;"	c
l0_low	.\altera_mf.v	/^parameter   l0_low              = 1;$/;"	c
l0_low_val	.\altera_mf.v	/^    reg [31:0] l0_low_val;$/;"	r
l0_mode	.\altera_mf.v	/^    parameter l0_mode = "bypass";$/;"	c
l0_mode	.\altera_mf.v	/^parameter   l0_mode             = "bypass";$/;"	c
l0_mode_val	.\altera_mf.v	/^    reg [8*6:1] l0_mode_val;$/;"	r
l0_ph	.\altera_mf.v	/^    parameter l0_ph = 0;$/;"	c
l0_ph	.\altera_mf.v	/^parameter   l0_ph               = 0;$/;"	c
l0_time_delay	.\altera_mf.v	/^    parameter l0_time_delay = 0;$/;"	c
l0_time_delay	.\altera_mf.v	/^parameter   l0_time_delay       = 0;$/;"	c
l0_time_delay_val	.\altera_mf.v	/^    reg [31:0] l0_time_delay_val;$/;"	r
l0_tmp	.\altera_mf.v	/^    reg l0_tmp;$/;"	r
l1_clk	.\altera_mf.v	/^    wire l1_clk;$/;"	n
l1_count	.\altera_mf.v	/^    integer l1_count;$/;"	r
l1_got_first_rising_edge	.\altera_mf.v	/^    reg l1_got_first_rising_edge;$/;"	r
l1_high	.\altera_mf.v	/^    parameter l1_high = 1;$/;"	c
l1_high	.\altera_mf.v	/^parameter   l1_high             = 1;$/;"	c
l1_high_val	.\altera_mf.v	/^    reg [31:0] l1_high_val;$/;"	r
l1_initial	.\altera_mf.v	/^    parameter l1_initial = 1;$/;"	c
l1_initial	.\altera_mf.v	/^parameter   l1_initial          = 1;$/;"	c
l1_initial_val	.\altera_mf.v	/^    reg [31:0] l1_initial_val;$/;"	r
l1_low	.\altera_mf.v	/^    parameter l1_low = 1;$/;"	c
l1_low	.\altera_mf.v	/^parameter   l1_low              = 1;$/;"	c
l1_low_val	.\altera_mf.v	/^    reg [31:0] l1_low_val;$/;"	r
l1_mode	.\altera_mf.v	/^    parameter l1_mode = "bypass";$/;"	c
l1_mode	.\altera_mf.v	/^parameter   l1_mode             = "bypass";$/;"	c
l1_mode_val	.\altera_mf.v	/^    reg [8*6:1] l1_mode_val;$/;"	r
l1_ph	.\altera_mf.v	/^    parameter l1_ph = 0;$/;"	c
l1_ph	.\altera_mf.v	/^parameter   l1_ph               = 0;$/;"	c
l1_time_delay	.\altera_mf.v	/^    parameter l1_time_delay = 0;$/;"	c
l1_time_delay	.\altera_mf.v	/^parameter   l1_time_delay       = 0;$/;"	c
l1_time_delay_val	.\altera_mf.v	/^    reg [31:0] l1_time_delay_val;$/;"	r
l1_tmp	.\altera_mf.v	/^    reg l1_tmp;$/;"	r
l_bandwidth_type	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_bandwidth_type;$/;"	r
l_bandwidth_type	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_bandwidth_type;$/;"	r
l_bandwidth_type	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_bandwidth_type;$/;"	r
l_bandwidth_type	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_bandwidth_type;$/;"	r
l_bandwidth_type	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_bandwidth_type;$/;"	r
l_compensate_clock	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_compensate_clock;$/;"	r
l_compensate_clock	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_compensate_clock;$/;"	r
l_compensate_clock	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_compensate_clock;$/;"	r
l_compensate_clock	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_compensate_clock;$/;"	r
l_compensate_clock	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_compensate_clock;$/;"	r
l_enable0_counter	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_enable0_counter;$/;"	r
l_enable0_counter	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_enable0_counter;$/;"	r
l_enable1_counter	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_enable1_counter;$/;"	r
l_enable1_counter	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_enable1_counter;$/;"	r
l_enable_switch_over_counter	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_enable_switch_over_counter;$/;"	r
l_enable_switch_over_counter	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_enable_switch_over_counter;$/;"	r
l_enable_switch_over_counter	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_enable_switch_over_counter;$/;"	r
l_enable_switch_over_counter	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_enable_switch_over_counter;$/;"	r
l_enable_switch_over_counter	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_enable_switch_over_counter;$/;"	r
l_feedback_source	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_feedback_source;$/;"	r
l_feedback_source	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_feedback_source;$/;"	r
l_ff	.\altera_mf.v	/^    integer l_ff;$/;"	r
l_gate_lock_signal	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_gate_lock_signal;$/;"	r
l_gate_lock_signal	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_gate_lock_signal;$/;"	r
l_index	.\altera_mf.v	/^    integer l_index;$/;"	r
l_int_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] l_int_reg;$/;"	r
l_operation_mode	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_operation_mode;$/;"	r
l_operation_mode	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_operation_mode;$/;"	r
l_operation_mode	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_operation_mode;$/;"	r
l_operation_mode	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_operation_mode;$/;"	r
l_operation_mode	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_operation_mode;$/;"	r
l_pll_type	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_pll_type;$/;"	r
l_pll_type	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_pll_type;$/;"	r
l_pll_type	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_pll_type;$/;"	r
l_pll_type	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_pll_type;$/;"	r
l_pll_type	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_pll_type;$/;"	r
l_primary_clock	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_primary_clock;$/;"	r
l_primary_clock	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_primary_clock;$/;"	r
l_qualify_conf_done	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_qualify_conf_done;$/;"	r
l_qualify_conf_done	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_qualify_conf_done;$/;"	r
l_s_ff	.\altera_mf.v	/^    integer l_s_ff;$/;"	r
l_scan_chain	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_scan_chain;$/;"	r
l_scan_chain	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_scan_chain;$/;"	r
l_scan_chain	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_scan_chain;$/;"	r
l_scan_chain	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_scan_chain;$/;"	r
l_scan_chain	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_scan_chain;$/;"	r
l_self_reset_on_loss_lock	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_self_reset_on_loss_lock;$/;"	r
l_self_reset_on_loss_lock	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_self_reset_on_loss_lock;$/;"	r
l_self_reset_on_loss_lock	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_self_reset_on_loss_lock;$/;"	r
l_sim_gate_lock_device_behavior	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_sim_gate_lock_device_behavior;$/;"	r
l_sim_gate_lock_device_behavior	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_sim_gate_lock_device_behavior;$/;"	r
l_sim_gate_lock_device_behavior	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_sim_gate_lock_device_behavior;$/;"	r
l_sim_gate_lock_device_behavior	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_sim_gate_lock_device_behavior;$/;"	r
l_simulation_type	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_simulation_type;$/;"	r
l_simulation_type	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_simulation_type;$/;"	r
l_simulation_type	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_simulation_type;$/;"	r
l_simulation_type	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_simulation_type;$/;"	r
l_simulation_type	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_simulation_type;$/;"	r
l_switch_over_on_gated_lock	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_switch_over_on_gated_lock;$/;"	r
l_switch_over_on_gated_lock	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_switch_over_on_gated_lock;$/;"	r
l_switch_over_on_lossclk	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_switch_over_on_lossclk;$/;"	r
l_switch_over_on_lossclk	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] l_switch_over_on_lossclk;$/;"	r
l_switch_over_type	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_switch_over_type;$/;"	r
l_switch_over_type	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_switch_over_type;$/;"	r
l_switch_over_type	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_switch_over_type;$/;"	r
l_switch_over_type	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] l_switch_over_type;$/;"	r
l_us_ff	.\altera_mf.v	/^    integer l_us_ff;$/;"	r
l_vco_frequency_control	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] l_vco_frequency_control;$/;"	r
l_vco_frequency_control	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] l_vco_frequency_control;$/;"	r
l_vco_frequency_control	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] l_vco_frequency_control;$/;"	r
last_clk_period	.\altera_mf.v	/^    real clk_period, last_clk_period;$/;"	r
last_clkin_edge	.\altera_mf.v	/^    real last_clkin_edge;$/;"	r
last_inclk0_edge	.\altera_mf.v	/^    real last_inclk0_edge,last_inclk1_edge,diff_percent_period;$/;"	r
last_inclk0_period	.\altera_mf.v	/^    real inclk0_period, last_inclk0_period,inclk1_period, last_inclk1_period;$/;"	r
last_inclk1_edge	.\altera_mf.v	/^    real last_inclk0_edge,last_inclk1_edge,diff_percent_period;$/;"	r
last_inclk1_period	.\altera_mf.v	/^    real inclk0_period, last_inclk0_period,inclk1_period, last_inclk1_period;$/;"	r
last_length	.\altera_mf.v	/^    reg [31 : 0]                             last_length;$/;"	r
last_length_idx	.\altera_mf.v	/^    integer   last_length_idx;\/\/ decoding previous length index$/;"	r
last_phase_shift	.\altera_mf.v	/^    integer last_phase_shift[0:7];$/;"	r
last_phase_shift	.\altera_mf.v	/^    time last_phase_shift[0:7];$/;"	r
last_rec	.\altera_mf.v	/^    reg last_rec;$/;"	r
last_synchronizing_rising_edge_for_clk0	.\altera_mf.v	/^time last_synchronizing_rising_edge_for_clk0;$/;"	r
last_synchronizing_rising_edge_for_clk1	.\altera_mf.v	/^time last_synchronizing_rising_edge_for_clk1;$/;"	r
last_synchronizing_rising_edge_for_clk2	.\altera_mf.v	/^time last_synchronizing_rising_edge_for_clk2;$/;"	r
last_synchronizing_rising_edge_for_extclk	.\altera_mf.v	/^time last_synchronizing_rising_edge_for_extclk;$/;"	r
last_txf_cha	.\dma_pri.v	/^reg [2:0]                              last_txf_cha    ;$/;"	r
lc	.\altera_mf.v	/^    integer fac_ten, lc;$/;"	r
lcell	.\altera_mf.v	/^module lcell (in, out);$/;"	m
lcell	.\work\lcell\_primary.vhd	/^entity lcell is$/;"	e
legacy_speed	.\altera_mf.v	/^    parameter legacy_speed            = ((lpm_showahead == "OFF") && (add_ram_output_register == "ON"));$/;"	c
length	.\altera_mf.v	/^        input [`DEFAULT_BIT_LENGTH - 1 : 0] length;    $/;"	p
length_idx	.\altera_mf.v	/^    integer   length_idx;     \/\/ decoding length index$/;"	r
length_idx_cur	.\altera_mf.v	/^    integer   length_idx_cur; \/\/ reading\/outputing length index$/;"	r
length_idx_old	.\altera_mf.v	/^    integer   length_idx_old; \/\/ previous decoding length index$/;"	r
lfc_old	.\altera_mf.v	/^    integer lfc_old;$/;"	r
lfc_val	.\altera_mf.v	/^    integer lfc_val;$/;"	r
lfc_val_bit_setting	.\altera_mf.v	/^    reg [1:2] lfc_val_bit_setting, lfc_val_old_bit_setting;$/;"	r
lfc_val_old_bit_setting	.\altera_mf.v	/^    reg [1:2] lfc_val_bit_setting, lfc_val_old_bit_setting;$/;"	r
lfr_old	.\altera_mf.v	/^    reg [9*8:1] lfr_old;$/;"	r
lfr_val	.\altera_mf.v	/^    reg [9*8:1] lfr_val;$/;"	r
lfr_val_bit_setting	.\altera_mf.v	/^    reg [3:7] lfr_val_bit_setting, lfr_val_old_bit_setting;$/;"	r
lfr_val_old_bit_setting	.\altera_mf.v	/^    reg [3:7] lfr_val_bit_setting, lfr_val_old_bit_setting;$/;"	r
lfxt_clk	.\omsp_clock_module.v	/^input               lfxt_clk;         \/\/ Low frequency oscillator (typ 32kHz)$/;"	p
lfxt_clk	.\openMSP430.v	/^input                lfxt_clk;               \/\/ Low frequency oscillator (typ 32kHz)$/;"	p
lfxt_clk	.\openMSP430_fpga.v	/^input  lfxt_clk;$/;"	p
lfxt_clk	.\tb_openMSP430_fpga.v	/^reg                lfxt_clk;$/;"	r
lfxt_clk_dly	.\omsp_clock_module.v	/^reg  lfxt_clk_dly;$/;"	r
lfxt_clk_en	.\omsp_clock_module.v	/^wire   lfxt_clk_en = (lfxt_clk_s & ~lfxt_clk_dly) & (~oscoff | (mclk_dma_enable & bcsctl1[`DMA_OSCOFF]));$/;"	n
lfxt_clk_n	.\omsp_clock_module.v	/^   wire lfxt_clk_n;$/;"	n
lfxt_clk_s	.\omsp_clock_module.v	/^wire lfxt_clk_s;$/;"	n
lfxt_disable	.\omsp_clock_module.v	/^   reg  lfxt_disable;$/;"	r
lfxt_disable_by_cpu_en	.\omsp_clock_module.v	/^   wire lfxt_disable_by_cpu_en;$/;"	n
lfxt_disable_by_oscoff	.\omsp_clock_module.v	/^   wire lfxt_disable_by_oscoff;$/;"	n
lfxt_en_wkup	.\omsp_clock_module.v	/^   wire lfxt_en_wkup;$/;"	n
lfxt_enable	.\omsp_clock_module.v	/^output              lfxt_enable;      \/\/ Low frequency oscillator enable$/;"	p
lfxt_enable	.\openMSP430.v	/^output               lfxt_enable;            \/\/ ASIC ONLY: Low frequency oscillator enable$/;"	p
lfxt_enable	.\openMSP430_fpga.v	/^wire               lfxt_enable;$/;"	n
lfxt_enable_nxt	.\omsp_clock_module.v	/^   wire lfxt_enable_nxt;$/;"	n
lfxt_mclk_wkup	.\omsp_clock_module.v	/^   wire lfxt_mclk_wkup;$/;"	n
lfxt_not_enabled_by_dbg	.\omsp_clock_module.v	/^   wire lfxt_not_enabled_by_dbg;$/;"	n
lfxt_wkup	.\omsp_clock_module.v	/^output              lfxt_wkup;        \/\/ Low frequency oscillator wake-up (asynchronous)$/;"	p
lfxt_wkup	.\openMSP430.v	/^output               lfxt_wkup;              \/\/ ASIC ONLY: Low frequency oscillator wake-up (asynchronous)$/;"	p
lfxt_wkup	.\openMSP430_fpga.v	/^wire               lfxt_wkup;$/;"	n
lfxt_wkup_n	.\omsp_clock_module.v	/^   wire lfxt_wkup_n;$/;"	n
lfxt_wkup_set	.\omsp_clock_module.v	/^   wire   lfxt_wkup_set  = lfxt_mclk_wkup | oscoff_and_mclk_dma_wkup | lfxt_en_wkup | cpu_en_wkup;$/;"	n
lfxt_wkup_set_scan	.\omsp_clock_module.v	/^   wire lfxt_wkup_set_scan;$/;"	n
lfxt_wkup_set_scan_observe	.\omsp_clock_module.v	/^   wire lfxt_wkup_set_scan_observe;$/;"	n
line_no	.\altera_mf.v	/^    integer line_no;$/;"	r
lloaden	.\altera_mf.v	/^output lloaden;$/;"	p
lloaden_tmp	.\altera_mf.v	/^reg lloaden_tmp;$/;"	r
load_cntr	.\altera_mf.v	/^    integer load_cntr;$/;"	r
load_const_value	.\altera_mf.v	/^    wire [63 : 0]load_const_value;$/;"	n
load_enable	.\altera_mf.v	/^    reg load_enable;$/;"	r
load_enable_cdr	.\altera_mf.v	/^    reg load_enable_cdr;$/;"	r
loadconst_control_aclr	.\altera_mf.v	/^  	parameter loadconst_control_aclr	= "ACLR0";$/;"	c
loadconst_control_register	.\altera_mf.v	/^  	parameter loadconst_control_register = "CLOCK0";$/;"	c
loadconst_value	.\altera_mf.v	/^  	parameter loadconst_value = 0;$/;"	c
local_clk_div_lloaden	.\altera_mf.v	/^    wire local_clk_div_lloaden;$/;"	n
local_loaden	.\altera_mf.v	/^    wire local_loaden;$/;"	n
lock_c	.\altera_mf.v	/^    parameter lock_c = 4;$/;"	c
lock_high	.\altera_mf.v	/^    parameter lock_high = 0; \/\/ 0 .. 4095$/;"	c
lock_high	.\altera_mf.v	/^parameter   lock_high                 = 1;$/;"	c
lock_low	.\altera_mf.v	/^    parameter lock_low = 0;  \/\/ 0 .. 7$/;"	c
lock_low	.\altera_mf.v	/^parameter   lock_low                  = 0;$/;"	c
lock_out_reg_dly	.\altera_mf.v	/^    reg lock_out_reg_dly;$/;"	r
lock_out_regr	.\altera_mf.v	/^    reg lock_out_regr;$/;"	r
lock_state_mc	.\altera_mf.v	/^    reg [1 : 0] lock_state_mc;$/;"	r
lock_state_mc_d	.\altera_mf.v	/^    reg [1 : 0] lock_state_mc_d;$/;"	r
lock_window	.\altera_mf.v	/^    parameter lock_window = 5000;$/;"	c
lock_window	.\altera_mf.v	/^    parameter lock_window = 5;$/;"	c
lock_window_ui	.\altera_mf.v	/^    parameter lock_window_ui = "0.05"; \/\/ "0.05", "0.1", "0.15", "0.2"$/;"	c
lock_window_ui	.\altera_mf.v	/^parameter   lock_window_ui           = "0.05";$/;"	c
lock_window_ui_bits	.\altera_mf.v	/^parameter lock_window_ui_bits = 0;$/;"	c
locked	.\altera_mf.v	/^    output locked;$/;"	p
locked	.\altera_mf.v	/^output        locked;$/;"	p
locked	.\altera_mf.v	/^output locked;$/;"	p
locked_tmp	.\altera_mf.v	/^    reg locked_tmp;$/;"	r
locked_tmp	.\altera_mf.v	/^wire locked_tmp;$/;"	n
locked_wire	.\altera_mf.v	/^wire locked_wire;$/;"	n
loop_filter_c	.\altera_mf.v	/^    parameter loop_filter_c = 0;        \/\/ 0 , 2 , 4$/;"	c
loop_filter_c	.\altera_mf.v	/^    parameter loop_filter_c = 16;$/;"	c
loop_filter_c	.\altera_mf.v	/^    parameter loop_filter_c = 1;$/;"	c
loop_filter_c	.\altera_mf.v	/^parameter   loop_filter_c       = 5;$/;"	c
loop_filter_c_arr	.\altera_mf.v	/^    integer loop_filter_c_arr[0:3];$/;"	r
loop_filter_c_bits	.\altera_mf.v	/^parameter loop_filter_c_bits = 0;$/;"	c
loop_filter_c_bits	.\altera_mf.v	/^parameter loop_filter_c_bits = 9999;$/;"	c
loop_filter_r	.\altera_mf.v	/^    parameter loop_filter_r = "1.0";    \/\/ "1.0", "2.0", "4.0", "6.0", "8.0", "12.0", "16.0", "20.0"$/;"	c
loop_filter_r	.\altera_mf.v	/^    parameter loop_filter_r = "1.0";$/;"	c
loop_filter_r	.\altera_mf.v	/^parameter   loop_filter_r       = "1.0";$/;"	c
loop_filter_r_arr	.\altera_mf.v	/^    reg [9*8:1] loop_filter_r_arr[0:39];$/;"	r
loop_filter_r_bits	.\altera_mf.v	/^parameter loop_filter_r_bits = 0;$/;"	c
loop_filter_r_bits	.\altera_mf.v	/^parameter loop_filter_r_bits = 9999;$/;"	c
loop_initial	.\altera_mf.v	/^    integer loop_initial;$/;"	r
loop_iter	.\altera_mf.v	/^        integer loop_iter;$/;"	r
loop_ph	.\altera_mf.v	/^    integer loop_ph;$/;"	r
loop_time_delay	.\altera_mf.v	/^    integer loop_time_delay;$/;"	r
loop_xplier	.\altera_mf.v	/^    integer loop_xplier;$/;"	r
loopback_input_pad	.\altera_mf.v	/^    parameter loopback_input_pad = (int_width_b > width_b)? (int_width_b - width_b) : 1; $/;"	c
loopback_lower_bound	.\altera_mf.v	/^    parameter loopback_lower_bound = (int_width_b > width_b)? width_b : 0 ;$/;"	c
loopback_out_wire	.\altera_mf.v	/^    wire [int_width_result - 1: 0] loopback_out_wire;$/;"	n
loopback_out_wire_feedback	.\altera_mf.v	/^    wire [int_width_result - 1: 0] loopback_out_wire_feedback;$/;"	n
loopback_wire	.\altera_mf.v	/^    reg [int_width_result: 0] loopback_wire;$/;"	r
loopback_wire_latency	.\altera_mf.v	/^    reg [int_width_result: 0] loopback_wire_latency;$/;"	r
loopback_wire_reg	.\altera_mf.v	/^    reg [int_width_result: 0] loopback_wire_reg;$/;"	r
loopback_wire_temp	.\altera_mf.v	/^    wire [mult_b_pre_width - 1 : 0] loopback_wire_temp;$/;"	n
lose_lock_on_one_change	.\altera_mf.v	/^    parameter lose_lock_on_one_change = "OFF";$/;"	c
lose_lock_on_one_change	.\altera_mf.v	/^    parameter lose_lock_on_one_change ="OFF" ;$/;"	c
low	.\altera_mf.v	/^    input [31:0] low;$/;"	p
low	.\altera_mf.v	/^    integer low;$/;"	r
low_reg	.\altera_mf.v	/^    reg [31:0] low_reg;$/;"	r
low_time	.\altera_mf.v	/^    integer low_time;$/;"	r
low_time	.\altera_mf.v	/^    time low_time;$/;"	r
low_time0	.\altera_mf.v	/^time low_time0;$/;"	r
low_time1	.\altera_mf.v	/^time low_time1;$/;"	r
low_time2	.\altera_mf.v	/^time low_time2;$/;"	r
low_time_ext	.\altera_mf.v	/^time low_time_ext;$/;"	r
lower_bits	.\altera_mf.v	/^    reg [width_result - width_upper_data -1 + 4 : 0] lower_bits;$/;"	r
lower_range	.\altera_mf.v	/^    parameter lower_range = ((2*int_width_result - 1) < (int_width_a + int_width_b)) ? int_width_result : int_width_a + int_width_b;$/;"	c
lpbck_cnt	.\altera_mf.v	/^    integer lpbck_cnt;$/;"	r
lpm_delay	.\altera_mf.v	/^    parameter lpm_delay = 1;$/;"	c
lpm_file	.\altera_mf.v	/^    parameter lpm_file         = "UNUSED";      \/\/ name of hex file$/;"	c
lpm_file	.\altera_mf.v	/^    parameter lpm_file = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^        parameter lpm_hint = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter    lpm_hint    =    "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint                           = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint                  = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint                = "USE_EAB=ON";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint              = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint         = "USE_EAB=ON";  \/\/ non-LPM parameters (Altera)$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint = "SLD_VIRTUAL_JTAG"; \/\/ required by coding standard$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint = "USE_EAB=ON";$/;"	c
lpm_hint	.\altera_mf.v	/^    parameter lpm_hint= "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^  parameter lpm_hint = "UNUSED",$/;"	c
lpm_hint	.\altera_mf.v	/^parameter   lpm_hint                  = "UNUSED";$/;"	c
lpm_hint	.\altera_mf.v	/^parameter lpm_hint = "UNUSED";$/;"	c
lpm_mode	.\altera_mf.v	/^    parameter lpm_mode = "READ";$/;"	c
lpm_numwords	.\altera_mf.v	/^    parameter lpm_numwords            = 2;$/;"	c
lpm_numwords	.\altera_mf.v	/^    parameter lpm_numwords = 1;$/;"	c
lpm_numwords	.\altera_mf.v	/^    parameter lpm_numwords = 2;$/;"	c
lpm_representation	.\altera_mf.v	/^    parameter lpm_representation = "UNSIGNED";$/;"	c
lpm_showahead	.\altera_mf.v	/^    parameter lpm_showahead           = "OFF";$/;"	c
lpm_showahead	.\altera_mf.v	/^    parameter lpm_showahead = "OFF";$/;"	c
lpm_type	.\altera_mf.v	/^        parameter lpm_type = "alt_cal";$/;"	c
lpm_type	.\altera_mf.v	/^        parameter lpm_type = "alt_cal_av";$/;"	c
lpm_type	.\altera_mf.v	/^        parameter lpm_type = "alt_cal_c3gxb";$/;"	c
lpm_type	.\altera_mf.v	/^        parameter lpm_type = "alt_cal_mm";$/;"	c
lpm_type	.\altera_mf.v	/^        parameter lpm_type = "alt_cal_sv";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "ALTPARALLEL_FLASH_LOADER";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "ALTSERIAL_FLASH_LOADER";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "altsource_probe";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "altstratixii_oct";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "sld_signaltap";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter    lpm_type    =    "sld_virtual_jtag_basic";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type                           = "altsyncram";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type                  = "altmult_accum";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type                = "scfifo";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type               = "alt3pram";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type              = "altmult_add";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "SLD_VIRTUAL_JTAG"; \/\/ required by coding standard$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "a_graycounter";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altaccumulate";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altdpram";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altfp_mult";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altlvds_rx";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altlvds_tx";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altshift_taps";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altsqrt";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "altsquare";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "dcfifo";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "dcfifo_mixed_widths";$/;"	c
lpm_type	.\altera_mf.v	/^    parameter lpm_type = "parallel_add";$/;"	c
lpm_type	.\altera_mf.v	/^  parameter lpm_type = "alt_aeq_s4",$/;"	c
lpm_type	.\altera_mf.v	/^parameter   lpm_type            = "altpll";$/;"	c
lpm_type	.\altera_mf.v	/^parameter lpm_type = "altclklock";$/;"	c
lpm_type	.\altera_mf.v	/^parameter lpm_type = "altddio_bidir";$/;"	c
lpm_type	.\altera_mf.v	/^parameter lpm_type = "altddio_in";$/;"	c
lpm_type	.\altera_mf.v	/^parameter lpm_type = "altddio_out";$/;"	c
lpm_width	.\altera_mf.v	/^    parameter lpm_width               = 1;$/;"	c
lpm_width	.\altera_mf.v	/^    parameter lpm_width = 1;$/;"	c
lpm_width	.\altera_mf.v	/^    parameter lpm_width = 64;$/;"	c
lpm_width_r	.\altera_mf.v	/^    parameter lpm_width_r = lpm_width;$/;"	c
lpm_widthad	.\altera_mf.v	/^    parameter lpm_widthad = 1;$/;"	c
lpm_widthu	.\altera_mf.v	/^    parameter lpm_widthu              = 1;$/;"	c
lpm_widthu	.\altera_mf.v	/^    parameter lpm_widthu = 1;$/;"	c
lpm_widthu_r	.\altera_mf.v	/^    parameter lpm_widthu_r = lpm_widthu;$/;"	c
lrreq	.\altera_mf.v	/^    reg lrreq;$/;"	r
lsb_position	.\altera_mf.v	/^    parameter lsb_position = 36 - width_a - width_b;$/;"	c
lutram_dual_port_fast_read	.\altera_mf.v	/^   parameter lutram_dual_port_fast_read = ((is_lutram == 1) && ((read_during_write_mode_mixed_ports == "NEW_DATA") || (read_during_write_mode_mixed_ports == "DONT_CARE") || (read_during_write_mode_mixed_ports == "CONSTRAINED_DONT_CARE") || ((read_during_write_mode_mixed_ports == "OLD_DATA") && (outdata_reg_b == "UNREGISTERED")))) ? 1 : 0;$/;"	c
lutram_single_port_fast_read	.\altera_mf.v	/^   parameter lutram_single_port_fast_read = ((is_lutram == 1) && ((read_during_write_mode_port_a == "DONT_CARE") || (outdata_reg_a == "UNREGISTERED")) && (operation_mode == "SINGLE_PORT")) ? 1 : 0;$/;"	c
lvds_dffb_clk	.\altera_mf.v	/^    wire lvds_dffb_clk;$/;"	n
lvds_dffc_clk	.\altera_mf.v	/^    wire lvds_dffc_clk;$/;"	n
lvds_dffd_clk	.\altera_mf.v	/^    wire lvds_dffd_clk;$/;"	n
m	.\altera_mf.v	/^        integer m, ivalue;$/;"	r
m	.\altera_mf.v	/^        integer m; $/;"	r
m	.\altera_mf.v	/^        output m; $/;"	p
m	.\altera_mf.v	/^    input m,n;$/;"	p
m	.\altera_mf.v	/^    input tap_phase, m, n;$/;"	p
m	.\altera_mf.v	/^    integer i, j, k, m, n;$/;"	r
m	.\altera_mf.v	/^    integer m, magnitude;$/;"	r
m	.\altera_mf.v	/^    integer m,n, phase;$/;"	r
m	.\altera_mf.v	/^    integer tap_phase, m, n, phase;$/;"	r
m	.\altera_mf.v	/^    parameter m = 0;$/;"	c
m	.\altera_mf.v	/^integer m;$/;"	r
m	.\altera_mf.v	/^parameter   m                   = 0; \/\/ m must default to 0 in order for altpll to calculate advanced parameters for itself$/;"	c
m1	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m2	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m2	.\altera_mf.v	/^    parameter m2 = 1;$/;"	c
m2	.\altera_mf.v	/^parameter   m2                  = 1;$/;"	c
m2_mode_val	.\altera_mf.v	/^    reg [8*6:1] m2_mode_val;$/;"	r
m2_val	.\altera_mf.v	/^    reg [31:0] m2_val;$/;"	r
m3	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m4	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m5	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m6	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m7	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m8	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m9	.\altera_mf.v	/^    integer m1,m2,m3,m4,m5,m6,m7,m8,m9;$/;"	r
m_delay	.\altera_mf.v	/^    reg [31:0] m_delay;$/;"	r
m_hi	.\altera_mf.v	/^    reg [31:0] m_hi;$/;"	r
m_hi	.\altera_mf.v	/^    reg [7:0] m_hi;$/;"	r
m_initial	.\altera_mf.v	/^    parameter m_initial = 1;$/;"	c
m_initial	.\altera_mf.v	/^parameter   m_initial           = 1;$/;"	c
m_initial_val	.\altera_mf.v	/^    reg [31:0] m_initial_val;$/;"	r
m_lo	.\altera_mf.v	/^    reg [31:0] m_lo;$/;"	r
m_lo	.\altera_mf.v	/^    reg [7:0] m_lo;$/;"	r
m_mod	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
m_mod	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
m_mod	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
m_mod	.\altera_mf.v	/^    reg [31:0] m_mod;$/;"	r
m_mode_val	.\altera_mf.v	/^    reg [8*6:1] m_mode_val;$/;"	r
m_mode_val	.\altera_mf.v	/^    reg [8*6:1] m_mode_val[0:1];$/;"	r
m_mode_val_old	.\altera_mf.v	/^    reg [8*6:1] m_mode_val_old[0:1];$/;"	r
m_out	.\altera_mf.v	/^        integer m_out;$/;"	r
m_ph	.\altera_mf.v	/^    parameter m_ph = 0;$/;"	c
m_ph	.\altera_mf.v	/^parameter   m_ph                = 0;$/;"	c
m_ph_val	.\altera_mf.v	/^    integer   m_ph_val;$/;"	r
m_ph_val_old	.\altera_mf.v	/^    integer   m_ph_val_old;$/;"	r
m_ph_val_orig	.\altera_mf.v	/^    integer m_ph_val_orig;$/;"	r
m_ph_val_tmp	.\altera_mf.v	/^    integer   m_ph_val_tmp;$/;"	r
m_test_source	.\altera_mf.v	/^    parameter m_test_source  = -1;$/;"	c
m_test_source	.\altera_mf.v	/^    parameter m_test_source = 5;$/;"	c
m_test_source	.\altera_mf.v	/^parameter   m_test_source       = 5;$/;"	c
m_time_delay	.\altera_mf.v	/^    input clk_time_delay, m_time_delay, n_time_delay;$/;"	p
m_time_delay	.\altera_mf.v	/^    integer clk_time_delay, m_time_delay, n_time_delay;$/;"	r
m_time_delay	.\altera_mf.v	/^    parameter m_time_delay = 0;$/;"	c
m_time_delay	.\altera_mf.v	/^parameter   m_time_delay        = 0;$/;"	c
m_time_delay_val	.\altera_mf.v	/^    reg [31:0] m_time_delay_val;$/;"	r
m_times_vco_period	.\altera_mf.v	/^    integer m_times_vco_period;$/;"	r
m_times_vco_period	.\altera_mf.v	/^    time m_times_vco_period;$/;"	r
m_val	.\altera_mf.v	/^    reg [31:0] m_val;$/;"	r
m_val	.\altera_mf.v	/^    reg [31:0] m_val[0:1];$/;"	r
m_val_old	.\altera_mf.v	/^    reg [31:0] m_val_old[0:1];$/;"	r
m_val_tmp	.\altera_mf.v	/^    reg [31:0] m_val_tmp;$/;"	r
m_val_tmp	.\altera_mf.v	/^    reg [31:0] m_val_tmp[0:1];$/;"	r
m_value	.\altera_mf.v	/^        integer m_value;$/;"	r
mab	.\omsp_execution_unit.v	/^output       [15:0] mab;           \/\/ Memory address bus$/;"	p
mab	.\omsp_frontend.v	/^output        [15:0] mab;              \/\/ Frontend Memory address bus$/;"	p
mab	.\omsp_frontend.v	/^wire [15:0] mab      = pc_nxt;$/;"	n
mab_lsb	.\omsp_execution_unit.v	/^reg        mab_lsb;$/;"	r
magnitude	.\altera_mf.v	/^    integer m, magnitude;$/;"	r
mant_dataa	.\altera_mf.v	/^    reg[width_man : 0] mant_dataa;$/;"	r
mant_datab	.\altera_mf.v	/^    reg[width_man : 0] mant_datab;$/;"	r
mant_result	.\altera_mf.v	/^    reg[(2 * width_man) + 1 : 0] mant_result;$/;"	r
mant_result_msb	.\altera_mf.v	/^    reg mant_result_msb;$/;"	r
max_d_value	.\altera_mf.v	/^    integer max_d_value;$/;"	r
max_denom	.\altera_mf.v	/^        input max_denom;$/;"	p
max_denom	.\altera_mf.v	/^        integer max_denom;$/;"	r
max_iter	.\altera_mf.v	/^        parameter max_iter = 20;$/;"	c
max_m	.\altera_mf.v	/^        parameter max_m = 511;$/;"	c
max_modulus	.\altera_mf.v	/^    integer max_modulus;$/;"	r
max_n	.\altera_mf.v	/^        parameter max_n = 511;$/;"	c
max_neg_abs	.\altera_mf.v	/^    integer   max_neg_abs;$/;"	r
max_offset	.\altera_mf.v	/^        parameter max_offset = 0.004;$/;"	c
max_pfd	.\altera_mf.v	/^        parameter max_pfd = 720;$/;"	c
max_precision	.\altera_mf.v	/^    `define max_precision (width+size+shift*(size-1)+30)    \/\/ Result will not overflow this size$/;"	c
max_vco	.\altera_mf.v	/^        parameter max_vco = 1300;$/;"	c
max_vco	.\altera_mf.v	/^        parameter max_vco = 1600; \/\/ max vco frequency. (in mHz)$/;"	c
maximum_depth	.\altera_mf.v	/^    parameter maximum_depth                      = 0;$/;"	c
maximum_depth	.\altera_mf.v	/^    parameter maximum_depth           = 0;    $/;"	c
maximum_depth	.\altera_mf.v	/^    parameter maximum_depth    = 0;             \/\/ maximum segmented value of the RAM$/;"	c
maximum_depth	.\altera_mf.v	/^    parameter maximum_depth = 2048;$/;"	c
mb_en	.\omsp_execution_unit.v	/^output              mb_en;         \/\/ Memory bus enable$/;"	p
mb_en	.\omsp_frontend.v	/^output               mb_en;            \/\/ Frontend Memory bus enable$/;"	p
mb_en	.\omsp_frontend.v	/^wire        mb_en    = fetch | pc_sw_wr | (i_state==I_IRQ_FETCH) | pmem_busy | (cpu_halt_st & ~cpu_halt_req);$/;"	n
mb_rd_det	.\omsp_execution_unit.v	/^wire        mb_rd_det = ((e_state==`E_SRC_RD) & ~inst_as[`IMM])       |$/;"	n
mb_wr	.\omsp_execution_unit.v	/^output        [1:0] mb_wr;         \/\/ Memory bus write transfer$/;"	p
mb_wr_det	.\omsp_execution_unit.v	/^wire        mb_wr_det = ((e_state==`E_IRQ_1)  & ~inst_irq_rst)        |$/;"	n
mb_wr_msk	.\omsp_execution_unit.v	/^wire  [1:0] mb_wr_msk =  inst_alu[`EXEC_NO_WR]  ? 2'b00 :$/;"	n
mclk	.\dma_decode_16b.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\dma_pri.v	/^input                                   mclk           ;$/;"	p
mclk	.\dma_tfbuffer.v	/^ input                      mclk;$/;"	p
mclk	.\omsp_execution_unit.v	/^input               mclk;          \/\/ Main system clock$/;"	p
mclk	.\omsp_frontend.v	/^input                mclk;             \/\/ Main system clock$/;"	p
mclk	.\omsp_gpio.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\omsp_mem_backbone.v	/^input                mclk;              \/\/ Main system clock$/;"	p
mclk	.\omsp_multiplier.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\omsp_register_file.v	/^input               mclk;         \/\/ Main system clock$/;"	p
mclk	.\omsp_sfr.v	/^input               mclk;         \/\/ Main system clock$/;"	p
mclk	.\omsp_timerA.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\omsp_watchdog.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\openMSP430.v	/^output               mclk;                   \/\/ Main system clock$/;"	p
mclk	.\openMSP430_fpga.v	/^wire               mclk;$/;"	n
mclk	.\template_periph_16b.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk	.\template_periph_8b.v	/^input              mclk;            \/\/ Main system clock$/;"	p
mclk	.\uart_top.v	/^input               mclk;           \/\/ Main system clock$/;"	p
mclk_active	.\omsp_clock_module.v	/^wire mclk_active     = 1'b1;$/;"	n
mclk_active	.\omsp_clock_module.v	/^wire mclk_active     = mclk_enable                | mclk_wkup_s                | (dbg_en_s & cpu_en_s);$/;"	n
mclk_bckup_gated	.\omsp_mem_backbone.v	/^wire mclk_bckup_gated;$/;"	n
mclk_decode	.\omsp_frontend.v	/^wire       mclk_decode = mclk;$/;"	n
mclk_decode	.\omsp_frontend.v	/^wire       mclk_decode;$/;"	n
mclk_div	.\omsp_clock_module.v	/^reg [2:0] mclk_div;$/;"	r
mclk_div_en	.\omsp_clock_module.v	/^  wire  mclk_div_en     = mclk_active     & mclk_div_sel;$/;"	n
mclk_div_en	.\omsp_clock_module.v	/^  wire  mclk_div_en     = mclk_active;$/;"	n
mclk_div_sel	.\omsp_clock_module.v	/^  wire  mclk_div_sel    = (bcsctl2[`DIVMx]==2'b00) ?  1'b1          :$/;"	n
mclk_dma_active	.\omsp_clock_module.v	/^wire mclk_dma_active = 1'b1;$/;"	n
mclk_dma_active	.\omsp_clock_module.v	/^wire mclk_dma_active = cpuoff_and_mclk_dma_enable | cpuoff_and_mclk_dma_wkup_s | mclk_active;$/;"	n
mclk_dma_div_en	.\omsp_clock_module.v	/^  wire  mclk_dma_div_en = mclk_dma_active & mclk_div_sel;$/;"	n
mclk_dma_div_en	.\omsp_clock_module.v	/^  wire  mclk_dma_div_en = mclk_dma_active;$/;"	n
mclk_dma_enable	.\omsp_clock_module.v	/^input               mclk_dma_enable;  \/\/ DMA Sub-System Clock enable$/;"	p
mclk_dma_enable	.\omsp_frontend.v	/^output               mclk_dma_enable;  \/\/ DMA Sub-System Clock enable$/;"	p
mclk_dma_enable	.\omsp_frontend.v	/^wire mclk_dma_enable = dma_en & cpu_en_s;$/;"	n
mclk_dma_enable	.\openMSP430.v	/^wire                 mclk_dma_enable;$/;"	n
mclk_dma_wkup	.\omsp_clock_module.v	/^input               mclk_dma_wkup;    \/\/ DMA Sub-System Clock wake-up (asynchronous)$/;"	p
mclk_dma_wkup	.\omsp_frontend.v	/^output               mclk_dma_wkup;    \/\/ DMA Sub-System Clock wake-up (asynchronous)$/;"	p
mclk_dma_wkup	.\openMSP430.v	/^wire                 mclk_dma_wkup;$/;"	n
mclk_enable	.\omsp_clock_module.v	/^input               mclk_enable;      \/\/ Main System Clock enable$/;"	p
mclk_enable	.\omsp_frontend.v	/^output               mclk_enable;      \/\/ Main System Clock enable$/;"	p
mclk_enable	.\omsp_frontend.v	/^wire mclk_enable = inst_irq_rst ? cpu_en_s :        \/\/      - the RESET interrupt is currently executing$/;"	n
mclk_enable	.\openMSP430.v	/^wire                 mclk_enable;$/;"	n
mclk_inst_dext	.\omsp_frontend.v	/^wire       mclk_inst_dext = mclk;$/;"	n
mclk_inst_dext	.\omsp_frontend.v	/^wire       mclk_inst_dext;$/;"	n
mclk_inst_sext	.\omsp_frontend.v	/^wire       mclk_inst_sext = mclk;$/;"	n
mclk_inst_sext	.\omsp_frontend.v	/^wire       mclk_inst_sext;$/;"	n
mclk_irq_num	.\omsp_frontend.v	/^wire       mclk_irq_num       = mclk;$/;"	n
mclk_irq_num	.\omsp_frontend.v	/^wire       mclk_irq_num;$/;"	n
mclk_mdb_in_buf	.\omsp_execution_unit.v	/^wire        mclk_mdb_in_buf = mclk;$/;"	n
mclk_mdb_in_buf	.\omsp_execution_unit.v	/^wire        mclk_mdb_in_buf;$/;"	n
mclk_mdb_out_nxt	.\omsp_execution_unit.v	/^wire        mclk_mdb_out_nxt = mclk;$/;"	n
mclk_mdb_out_nxt	.\omsp_execution_unit.v	/^wire        mclk_mdb_out_nxt;$/;"	n
mclk_op1	.\omsp_multiplier.v	/^wire        mclk_op1           = mclk;$/;"	n
mclk_op1	.\omsp_multiplier.v	/^wire        mclk_op1;$/;"	n
mclk_op2	.\omsp_multiplier.v	/^wire        mclk_op2 = mclk;$/;"	n
mclk_op2	.\omsp_multiplier.v	/^wire        mclk_op2;$/;"	n
mclk_pc	.\omsp_frontend.v	/^wire       mclk_pc = mclk;$/;"	n
mclk_pc	.\omsp_frontend.v	/^wire       mclk_pc;$/;"	n
mclk_r1	.\omsp_register_file.v	/^wire       mclk_r1            = mclk;$/;"	n
mclk_r1	.\omsp_register_file.v	/^wire       mclk_r1;$/;"	n
mclk_r10	.\omsp_register_file.v	/^wire       mclk_r10 = mclk;$/;"	n
mclk_r10	.\omsp_register_file.v	/^wire       mclk_r10;$/;"	n
mclk_r11	.\omsp_register_file.v	/^wire       mclk_r11 = mclk;$/;"	n
mclk_r11	.\omsp_register_file.v	/^wire       mclk_r11;$/;"	n
mclk_r12	.\omsp_register_file.v	/^wire       mclk_r12 = mclk;$/;"	n
mclk_r12	.\omsp_register_file.v	/^wire       mclk_r12;$/;"	n
mclk_r13	.\omsp_register_file.v	/^wire       mclk_r13 = mclk;$/;"	n
mclk_r13	.\omsp_register_file.v	/^wire       mclk_r13;$/;"	n
mclk_r14	.\omsp_register_file.v	/^wire       mclk_r14 = mclk;$/;"	n
mclk_r14	.\omsp_register_file.v	/^wire       mclk_r14;$/;"	n
mclk_r15	.\omsp_register_file.v	/^wire       mclk_r15 = mclk;$/;"	n
mclk_r15	.\omsp_register_file.v	/^wire       mclk_r15;$/;"	n
mclk_r2	.\omsp_register_file.v	/^wire        mclk_r2 = mclk;$/;"	n
mclk_r2	.\omsp_register_file.v	/^wire        mclk_r2;$/;"	n
mclk_r3	.\omsp_register_file.v	/^wire       mclk_r3 = mclk;$/;"	n
mclk_r3	.\omsp_register_file.v	/^wire       mclk_r3;$/;"	n
mclk_r4	.\omsp_register_file.v	/^wire       mclk_r4 = mclk;$/;"	n
mclk_r4	.\omsp_register_file.v	/^wire       mclk_r4;$/;"	n
mclk_r5	.\omsp_register_file.v	/^wire       mclk_r5 = mclk;$/;"	n
mclk_r5	.\omsp_register_file.v	/^wire       mclk_r5;$/;"	n
mclk_r6	.\omsp_register_file.v	/^wire       mclk_r6 = mclk;$/;"	n
mclk_r6	.\omsp_register_file.v	/^wire       mclk_r6;$/;"	n
mclk_r7	.\omsp_register_file.v	/^wire       mclk_r7 = mclk;$/;"	n
mclk_r7	.\omsp_register_file.v	/^wire       mclk_r7;$/;"	n
mclk_r8	.\omsp_register_file.v	/^wire       mclk_r8 = mclk;$/;"	n
mclk_r8	.\omsp_register_file.v	/^wire       mclk_r8;$/;"	n
mclk_r9	.\omsp_register_file.v	/^wire       mclk_r9 = mclk;$/;"	n
mclk_r9	.\omsp_register_file.v	/^wire       mclk_r9;$/;"	n
mclk_reshi	.\omsp_multiplier.v	/^wire        mclk_reshi = mclk;$/;"	n
mclk_reshi	.\omsp_multiplier.v	/^wire        mclk_reshi;$/;"	n
mclk_reslo	.\omsp_multiplier.v	/^wire        mclk_reslo = mclk;$/;"	n
mclk_reslo	.\omsp_multiplier.v	/^wire        mclk_reslo;$/;"	n
mclk_wdtctl	.\omsp_watchdog.v	/^wire       mclk_wdtctl        = mclk;$/;"	n
mclk_wdtctl	.\omsp_watchdog.v	/^wire       mclk_wdtctl;$/;"	n
mclk_wkup	.\omsp_clock_module.v	/^input               mclk_wkup;        \/\/ Main System Clock wake-up (asynchronous)$/;"	p
mclk_wkup	.\omsp_frontend.v	/^output               mclk_wkup;        \/\/ Main System Clock wake-up (asynchronous)$/;"	p
mclk_wkup	.\openMSP430.v	/^wire                 mclk_wkup;$/;"	n
mclk_wkup_s	.\omsp_clock_module.v	/^wire mclk_wkup_s;$/;"	n
mdb_in	.\omsp_execution_unit.v	/^input        [15:0] mdb_in;        \/\/ Memory data bus input$/;"	p
mdb_in	.\omsp_frontend.v	/^input         [15:0] mdb_in;           \/\/ Frontend Memory data bus input$/;"	p
mdb_in_buf	.\omsp_execution_unit.v	/^reg  [15:0] mdb_in_buf;$/;"	r
mdb_in_buf_en	.\omsp_execution_unit.v	/^reg         mdb_in_buf_en;$/;"	r
mdb_in_buf_valid	.\omsp_execution_unit.v	/^reg         mdb_in_buf_valid;$/;"	r
mdb_in_bw	.\omsp_execution_unit.v	/^wire         [15:0] mdb_in_bw;$/;"	n
mdb_in_val	.\omsp_execution_unit.v	/^wire         [15:0] mdb_in_val;$/;"	n
mdb_out	.\omsp_execution_unit.v	/^output       [15:0] mdb_out;       \/\/ Memory data bus output$/;"	p
mdb_out_nxt	.\omsp_execution_unit.v	/^reg  [15:0] mdb_out_nxt;$/;"	r
mdb_out_nxt_en	.\omsp_execution_unit.v	/^wire        mdb_out_nxt_en  = (e_state==`E_DST_RD) |$/;"	n
mem_access	.\omsp_dbg.v	/^wire        mem_access;$/;"	n
mem_addr	.\omsp_dbg.v	/^reg  [15:0] mem_addr;$/;"	r
mem_addr_inc	.\omsp_dbg.v	/^wire [15:0] mem_addr_inc = (mem_cnt==16'h0000)                       ? 16'h0000 :$/;"	n
mem_addr_rd	.\omsp_dbg.v	/^wire [15:0] mem_addr_rd  = mem_addr               & {16{reg_rd[MEM_ADDR]}};$/;"	n
mem_addr_wr	.\omsp_dbg.v	/^wire        mem_addr_wr  = reg_wr[MEM_ADDR];$/;"	n
mem_burst	.\omsp_dbg.v	/^reg         mem_burst;$/;"	r
mem_burst	.\omsp_dbg_i2c.v	/^input               mem_burst;         \/\/ Burst on going$/;"	p
mem_burst	.\omsp_dbg_uart.v	/^input               mem_burst;      \/\/ Burst on going$/;"	p
mem_burst_end	.\omsp_dbg.v	/^wire mem_burst_end   = ((dbg_wr | dbg_rd_rdy) & ~|mem_cnt);$/;"	n
mem_burst_end	.\omsp_dbg_i2c.v	/^input               mem_burst_end;     \/\/ End TX\/RX burst$/;"	p
mem_burst_end	.\omsp_dbg_uart.v	/^input               mem_burst_end;  \/\/ End TX\/RX burst$/;"	p
mem_burst_rd	.\omsp_dbg.v	/^wire        mem_burst_rd;$/;"	n
mem_burst_rd	.\omsp_dbg_i2c.v	/^input               mem_burst_rd;      \/\/ Start TX burst$/;"	p
mem_burst_rd	.\omsp_dbg_uart.v	/^input               mem_burst_rd;   \/\/ Start TX burst$/;"	p
mem_burst_start	.\omsp_dbg.v	/^wire mem_burst_start = (mem_start             &  |mem_cnt);$/;"	n
mem_burst_wr	.\omsp_dbg.v	/^wire        mem_burst_wr;$/;"	n
mem_burst_wr	.\omsp_dbg_i2c.v	/^input               mem_burst_wr;      \/\/ Start RX burst$/;"	p
mem_burst_wr	.\omsp_dbg_uart.v	/^input               mem_burst_wr;   \/\/ Start RX burst$/;"	p
mem_bw	.\omsp_dbg.v	/^wire        mem_bw    = mem_ctl[3];$/;"	n
mem_bw	.\omsp_dbg_i2c.v	/^input               mem_bw;            \/\/ Burst byte width$/;"	p
mem_bw	.\omsp_dbg_uart.v	/^input               mem_bw;         \/\/ Burst byte width$/;"	p
mem_cnt	.\omsp_dbg.v	/^reg  [15:0] mem_cnt;$/;"	r
mem_cnt_dec	.\omsp_dbg.v	/^wire [15:0] mem_cnt_dec = (mem_cnt==16'h0000)                       ? 16'h0000 :$/;"	n
mem_cnt_rd	.\omsp_dbg.v	/^wire [15:0] mem_cnt_rd   = mem_cnt                & {16{reg_rd[MEM_CNT]}};$/;"	n
mem_cnt_wr	.\omsp_dbg.v	/^wire        mem_cnt_wr  = reg_wr[MEM_CNT];$/;"	n
mem_ctl	.\omsp_dbg.v	/^reg   [3:1] mem_ctl;$/;"	r
mem_ctl	.\omsp_dbg.v	/^wire  [7:0] mem_ctl_full  = {4'b0000, mem_ctl, 1'b0};$/;"	n
mem_ctl_full	.\omsp_dbg.v	/^wire  [7:0] mem_ctl_full  = {4'b0000, mem_ctl, 1'b0};$/;"	n
mem_ctl_full	.\omsp_dbg.v	/^wire [15:0] mem_ctl_rd   = {8'h00, mem_ctl_full}  & {16{reg_rd[MEM_CTL]}};$/;"	n
mem_ctl_rd	.\omsp_dbg.v	/^wire [15:0] mem_ctl_rd   = {8'h00, mem_ctl_full}  & {16{reg_rd[MEM_CTL]}};$/;"	n
mem_ctl_wr	.\omsp_dbg.v	/^wire        mem_ctl_wr = reg_wr[MEM_CTL];$/;"	n
mem_data	.\altera_mf.v	/^    reg  [width-1:0]       mem_data [(1<<widthad)-1:0];$/;"	r
mem_data	.\altera_mf.v	/^    reg [lpm_width-1:0] mem_data [(1<<lpm_widthu)-1:0];$/;"	r
mem_data	.\altera_mf.v	/^    reg [lpm_width-1:0] mem_data [(1<<lpm_widthu):0];$/;"	r
mem_data	.\altera_mf.v	/^    reg [lpm_width_r-1:0] mem_data [(1<<FIFO_DEPTH) + WIDTH_RATIO : 0];$/;"	r
mem_data	.\altera_mf.v	/^    reg [width-1:0] mem_data [0:(1<<widthad)-1];$/;"	r
mem_data	.\altera_mf.v	/^    reg [width_a-1:0] mem_data [0:(1<<widthad_a)-1];$/;"	r
mem_data	.\omsp_dbg.v	/^reg  [15:0] mem_data;$/;"	r
mem_data2	.\altera_mf.v	/^    reg [lpm_width-1:0] mem_data2 [(1<<lpm_widthu)-1:0];$/;"	r
mem_data_b	.\altera_mf.v	/^    reg [width_b-1:0] mem_data_b [0:(1<<widthad_b)-1];$/;"	r
mem_data_rd	.\omsp_dbg.v	/^wire [15:0] mem_data_rd  = mem_data               & {16{reg_rd[MEM_DATA]}};$/;"	n
mem_data_wr	.\omsp_dbg.v	/^wire        mem_data_wr = reg_wr[MEM_DATA];$/;"	n
mem_halt_cpu	.\omsp_dbg.v	/^wire  mem_halt_cpu;$/;"	n
mem_output	.\altera_mf.v	/^    reg [width-1:0] mem_output;$/;"	r
mem_output_at_inclock	.\altera_mf.v	/^    reg [width-1:0] mem_output_at_inclock;$/;"	r
mem_output_at_outclock	.\altera_mf.v	/^    reg [width-1:0] mem_output_at_outclock;$/;"	r
mem_run_cpu	.\omsp_dbg.v	/^wire  mem_run_cpu;$/;"	n
mem_seq_start	.\omsp_dbg.v	/^wire       mem_seq_start = ((mem_start & ~|mem_cnt) | mem_startb);$/;"	n
mem_start	.\omsp_dbg.v	/^reg         mem_start;$/;"	r
mem_startb	.\omsp_dbg.v	/^reg        mem_startb;$/;"	r
mem_state	.\omsp_dbg.v	/^reg  [1:0] mem_state;$/;"	r
mem_state_nxt	.\omsp_dbg.v	/^reg  [1:0] mem_state_nxt;$/;"	r
mem_val	.\ram.v	/^wire        [15:0] mem_val = mem[ram_addr];$/;"	n
mem_val	.\rom.v	/^wire        [15:0] mem_val = mem[ram_addr];$/;"	n
memory_data1	.\altera_mf.v	/^    reg [`MAX_WIDTH : 0] memory_data1, memory_data2;$/;"	r
memory_data2	.\altera_mf.v	/^    reg [`MAX_WIDTH : 0] memory_data1, memory_data2;$/;"	r
memory_depth	.\altera_mf.v	/^    integer memory_width, memory_depth;$/;"	r
memory_width	.\altera_mf.v	/^    integer memory_width, memory_depth;$/;"	r
metastable_event	.\altera_mf.v	/^    event metastable_event; \/\/ hook for debug monitoring$/;"	e
min_pfd	.\altera_mf.v	/^        parameter min_pfd = 5;$/;"	c
min_vco	.\altera_mf.v	/^        parameter min_vco = 300;  \/\/ min vco frequency. (in mHz)$/;"	c
min_vco	.\altera_mf.v	/^        parameter min_vco = 300;$/;"	c
mirq_wkup	.\omsp_frontend.v	/^wire mirq_wkup;$/;"	n
mode	.\altera_mf.v	/^    input [8*6:1] mode;$/;"	p
mode	.\altera_mf.v	/^    input mode;$/;"	p
mode	.\altera_mf.v	/^    integer mode;$/;"	r
modulus	.\altera_mf.v	/^    input [31:0] modulus;$/;"	p
modulus	.\altera_mf.v	/^    integer modulus;$/;"	r
mpy_info	.\omsp_sfr.v	/^wire        mpy_info     =  1'b0;$/;"	n
mpy_info	.\omsp_sfr.v	/^wire        mpy_info     =  1'b1;$/;"	n
msb	.\altera_mf.v	/^    reg msb;$/;"	r
msb_aligned_result	.\altera_mf.v	/^    wire [`max_precision-1:0] msb_aligned_result;$/;"	n
msg	.\print_task.v	/^    input [80*8 : 1]       msg;$/;"	p
msg_code	.\altera_mf.v	/^    input msg_code;$/;"	p
msg_code	.\altera_mf.v	/^    integer msg_code;$/;"	r
msw_subtract	.\altera_mf.v	/^    parameter msw_subtract = "NO";  \/\/ or "YES"$/;"	c
mult01_round	.\altera_mf.v	/^    input mult01_round;$/;"	p
mult01_round_aclr	.\altera_mf.v	/^    parameter mult01_round_aclr                     = "ACLR3";$/;"	c
mult01_round_pre	.\altera_mf.v	/^    wire mult01_round_pre;$/;"	n
mult01_round_reg	.\altera_mf.v	/^    reg mult01_round_reg;$/;"	r
mult01_round_register	.\altera_mf.v	/^    parameter mult01_round_register                 = "CLOCK0";$/;"	c
mult01_round_wire	.\altera_mf.v	/^    wire mult01_round_wire;$/;"	n
mult01_round_wire_clk	.\altera_mf.v	/^    wire mult01_round_wire_clk;$/;"	n
mult01_round_wire_clr	.\altera_mf.v	/^    tri0 mult01_round_wire_clr;$/;"	n
mult01_round_wire_en	.\altera_mf.v	/^    tri1 mult01_round_wire_en;$/;"	n
mult01_saturate_pre	.\altera_mf.v	/^    wire mult01_saturate_pre;$/;"	n
mult01_saturate_reg	.\altera_mf.v	/^    reg mult01_saturate_reg;$/;"	r
mult01_saturate_wire	.\altera_mf.v	/^    wire mult01_saturate_wire;$/;"	n
mult01_saturate_wire_clk	.\altera_mf.v	/^    wire mult01_saturate_wire_clk;$/;"	n
mult01_saturate_wire_clr	.\altera_mf.v	/^    tri0 mult01_saturate_wire_clr;$/;"	n
mult01_saturate_wire_en	.\altera_mf.v	/^    tri1 mult01_saturate_wire_en;$/;"	n
mult01_saturation	.\altera_mf.v	/^    input mult01_saturation;$/;"	p
mult01_saturation_aclr	.\altera_mf.v	/^    parameter mult01_saturation_aclr                = "ACLR3";$/;"	c
mult01_saturation_register	.\altera_mf.v	/^    parameter mult01_saturation_register            = "CLOCK0";$/;"	c
mult0_is_saturated	.\altera_mf.v	/^    output mult0_is_saturated;$/;"	p
mult0_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult0_result;$/;"	r
mult0_round_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult0_round_out;$/;"	r
mult0_saturate_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult0_saturate_out;$/;"	r
mult0_saturate_overflow	.\altera_mf.v	/^    reg mult0_saturate_overflow;$/;"	r
mult0_saturate_overflow_stat	.\altera_mf.v	/^    reg mult0_saturate_overflow_stat;$/;"	r
mult0_source_scanin_en	.\altera_mf.v	/^    tri0 mult0_source_scanin_en;$/;"	n
mult1_is_saturated	.\altera_mf.v	/^    output mult1_is_saturated;$/;"	p
mult1_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b) -1 : 0] mult1_result;$/;"	r
mult1_round_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult1_round_out;$/;"	r
mult1_saturate_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult1_saturate_out;$/;"	r
mult1_saturate_overflow	.\altera_mf.v	/^    reg mult1_saturate_overflow;$/;"	r
mult1_saturate_overflow_stat	.\altera_mf.v	/^    reg mult1_saturate_overflow_stat;$/;"	r
mult1_source_scanin_en	.\altera_mf.v	/^    tri0 mult1_source_scanin_en;$/;"	n
mult23_round	.\altera_mf.v	/^    input mult23_round;$/;"	p
mult23_round_aclr	.\altera_mf.v	/^    parameter mult23_round_aclr                     = "ACLR3";$/;"	c
mult23_round_pre	.\altera_mf.v	/^    wire mult23_round_pre;$/;"	n
mult23_round_reg	.\altera_mf.v	/^    reg mult23_round_reg;$/;"	r
mult23_round_register	.\altera_mf.v	/^    parameter mult23_round_register                 = "CLOCK0";$/;"	c
mult23_round_wire	.\altera_mf.v	/^    wire mult23_round_wire;$/;"	n
mult23_round_wire_clk	.\altera_mf.v	/^    wire mult23_round_wire_clk;$/;"	n
mult23_round_wire_clr	.\altera_mf.v	/^    tri0 mult23_round_wire_clr;$/;"	n
mult23_round_wire_en	.\altera_mf.v	/^    tri1 mult23_round_wire_en;$/;"	n
mult23_saturate_pre	.\altera_mf.v	/^    wire mult23_saturate_pre;$/;"	n
mult23_saturate_reg	.\altera_mf.v	/^    reg mult23_saturate_reg;$/;"	r
mult23_saturate_wire	.\altera_mf.v	/^    wire mult23_saturate_wire;$/;"	n
mult23_saturate_wire_clk	.\altera_mf.v	/^    wire mult23_saturate_wire_clk;$/;"	n
mult23_saturate_wire_clr	.\altera_mf.v	/^    tri0 mult23_saturate_wire_clr;$/;"	n
mult23_saturate_wire_en	.\altera_mf.v	/^    tri1 mult23_saturate_wire_en;$/;"	n
mult23_saturation	.\altera_mf.v	/^    input mult23_saturation;$/;"	p
mult23_saturation_aclr	.\altera_mf.v	/^    parameter mult23_saturation_aclr                = "ACLR3";$/;"	c
mult23_saturation_register	.\altera_mf.v	/^    parameter mult23_saturation_register            = "CLOCK0";$/;"	c
mult2_is_saturated	.\altera_mf.v	/^    output mult2_is_saturated;$/;"	p
mult2_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b) -1 : 0] mult2_result;$/;"	r
mult2_round_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult2_round_out;$/;"	r
mult2_saturate_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult2_saturate_out;$/;"	r
mult2_saturate_overflow	.\altera_mf.v	/^    reg mult2_saturate_overflow;$/;"	r
mult2_saturate_overflow_stat	.\altera_mf.v	/^    reg mult2_saturate_overflow_stat;$/;"	r
mult2_source_scanin_en	.\altera_mf.v	/^    tri0 mult2_source_scanin_en;$/;"	n
mult3_is_saturated	.\altera_mf.v	/^    output mult3_is_saturated; $/;"	p
mult3_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b) -1 : 0] mult3_result;$/;"	r
mult3_round_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult3_round_out;$/;"	r
mult3_saturate_out	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 3) -1 : 0] mult3_saturate_out;$/;"	r
mult3_saturate_overflow	.\altera_mf.v	/^    reg mult3_saturate_overflow;$/;"	r
mult3_saturate_overflow_stat	.\altera_mf.v	/^    reg mult3_saturate_overflow_stat;$/;"	r
mult3_source_scanin_en	.\altera_mf.v	/^    tri0 mult3_source_scanin_en;$/;"	n
mult_a_int	.\altera_mf.v	/^    reg [int_width_a - 1 : 0] mult_a_int;$/;"	r
mult_a_pre	.\altera_mf.v	/^    wire [4 * int_width_a -1 : 0] mult_a_pre;$/;"	n
mult_a_reg	.\altera_mf.v	/^    reg  [4 * int_width_a -1 : 0] mult_a_reg;$/;"	r
mult_a_reg	.\altera_mf.v	/^    reg [int_width_a - 1 : 0] mult_a_reg;$/;"	r
mult_a_tmp	.\altera_mf.v	/^    reg [int_width_a -1 : 0] mult_a_tmp;$/;"	r
mult_a_wire	.\altera_mf.v	/^    wire  [4 * int_width_a -1 : 0] mult_a_wire;$/;"	n
mult_a_wire	.\altera_mf.v	/^    wire [int_width_a -1 :0] mult_a_wire;$/;"	n
mult_b_int	.\altera_mf.v	/^    reg [int_width_b -1 :0] mult_b_int;$/;"	r
mult_b_pre	.\altera_mf.v	/^    wire [4 * int_width_b -1 : 0] mult_b_pre;$/;"	n
mult_b_pre_temp	.\altera_mf.v	/^    wire [int_width_b - 1: 0] mult_b_pre_temp;$/;"	n
mult_b_pre_width	.\altera_mf.v	/^    parameter mult_b_pre_width = int_width_b + 19;$/;"	c
mult_b_reg	.\altera_mf.v	/^    reg  [4 * int_width_b -1 : 0] mult_b_reg;$/;"	r
mult_b_reg	.\altera_mf.v	/^    reg [int_width_b -1 :0] mult_b_reg;$/;"	r
mult_b_tmp	.\altera_mf.v	/^    reg [int_width_b -1 : 0] mult_b_tmp;$/;"	r
mult_b_wire	.\altera_mf.v	/^    wire  [4 * int_width_b -1 : 0] mult_b_wire;$/;"	n
mult_b_wire	.\altera_mf.v	/^    wire [int_width_b -1 :0] mult_b_wire;$/;"	n
mult_c_pre	.\altera_mf.v	/^    wire [int_width_c -1 : 0] mult_c_pre;$/;"	n
mult_c_reg	.\altera_mf.v	/^    reg  [int_width_c -1 : 0] mult_c_reg;$/;"	r
mult_c_wire	.\altera_mf.v	/^    wire  [4 * int_width_c -1 : 0] mult_c_wire;$/;"	n
mult_final_out	.\altera_mf.v	/^    reg [int_width_a + int_width_b -1 : 0] mult_final_out;$/;"	r
mult_full	.\altera_mf.v	/^    reg [5 + int_width_a + int_width_b + width_upper_data : 0] mult_full;$/;"	r
mult_is_saturate_vec	.\altera_mf.v	/^    wire [3 : 0] mult_is_saturate_vec;$/;"	n
mult_is_saturated	.\altera_mf.v	/^    output mult_is_saturated;$/;"	p
mult_is_saturated_int	.\altera_mf.v	/^    reg mult_is_saturated_int;$/;"	r
mult_is_saturated_latent	.\altera_mf.v	/^    tri0 mult_is_saturated_latent;$/;"	n
mult_is_saturated_pipe	.\altera_mf.v	/^    reg [extra_accumulator_latency : 0] mult_is_saturated_pipe;$/;"	r
mult_is_saturated_reg	.\altera_mf.v	/^    reg mult_is_saturated_reg;$/;"	r
mult_is_saturated_wire	.\altera_mf.v	/^    tri0 mult_is_saturated_wire;$/;"	n
mult_out_latent	.\altera_mf.v	/^    wire [int_width_a + int_width_b -1 : 0] mult_out_latent;$/;"	n
mult_pipe	.\altera_mf.v	/^    reg [5 + int_width_a + int_width_b + width_upper_data : 0] mult_pipe [extra_multiplier_latency:0];$/;"	r
mult_pipe_wire_clk	.\altera_mf.v	/^    wire mult_pipe_wire_clk; $/;"	n
mult_pipe_wire_clr	.\altera_mf.v	/^    tri0 mult_pipe_wire_clr;$/;"	n
mult_pipe_wire_en	.\altera_mf.v	/^    tri1 mult_pipe_wire_en; $/;"	n
mult_res	.\altera_mf.v	/^    reg [int_width_a + int_width_b - 1 : 0] mult_res;$/;"	r
mult_res_0	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_0;$/;"	r
mult_res_1	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_1;$/;"	r
mult_res_2	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_2;$/;"	r
mult_res_3	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_3;$/;"	r
mult_res_ext	.\altera_mf.v	/^    reg  [2*int_width_result : 0] mult_res_ext;$/;"	r
mult_res_out	.\altera_mf.v	/^    reg [int_width_result -1 : 0] mult_res_out;$/;"	r
mult_res_pad	.\altera_mf.v	/^    parameter mult_res_pad = (int_width_result > int_width_a + int_width_b)? (int_width_result - int_width_a - int_width_b) :$/;"	c
mult_res_reg	.\altera_mf.v	/^    reg  [4 * (int_width_a + int_width_b) -1:0] mult_res_reg;$/;"	r
mult_res_reg_0	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_reg_0;$/;"	r
mult_res_reg_2	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] mult_res_reg_2;$/;"	r
mult_res_temp	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b - 1) :0] mult_res_temp;$/;"	r
mult_res_wire	.\altera_mf.v	/^    wire  [4 * (int_width_a + int_width_b) -1:0] mult_res_wire;$/;"	n
mult_result	.\altera_mf.v	/^    reg [int_width_a + int_width_b -1 : 0] mult_result;$/;"	r
mult_round	.\altera_mf.v	/^    input mult_round;$/;"	p
mult_round	.\altera_mf.v	/^    tri0 mult_round;$/;"	n
mult_round_aclr	.\altera_mf.v	/^    parameter mult_round_aclr = "ACLR3";$/;"	c
mult_round_for_ini	.\altera_mf.v	/^    parameter mult_round_for_ini = ((multiplier_rounding == "NO")? 0 : (int_width_a + int_width_b - 18));$/;"	c
mult_round_int	.\altera_mf.v	/^    wire mult_round_int;$/;"	n
mult_round_out	.\altera_mf.v	/^    reg [int_width_a + int_width_b -1 : 0] mult_round_out;$/;"	r
mult_round_reg	.\altera_mf.v	/^    parameter mult_round_reg = "CLOCK0";$/;"	c
mult_round_tmp	.\altera_mf.v	/^    reg  mult_round_tmp;$/;"	r
mult_round_wire_clk	.\altera_mf.v	/^    wire mult_round_wire_clk;$/;"	n
mult_round_wire_clr	.\altera_mf.v	/^    tri0 mult_round_wire_clr;$/;"	n
mult_round_wire_en	.\altera_mf.v	/^    tri1 mult_round_wire_en;$/;"	n
mult_saturate_out	.\altera_mf.v	/^    reg [int_width_a + int_width_b -1 : 0] mult_saturate_out;$/;"	r
mult_saturate_overflow	.\altera_mf.v	/^    reg mult_saturate_overflow;$/;"	r
mult_saturate_overflow_pipe_reg	.\altera_mf.v	/^    reg [3 : 0] mult_saturate_overflow_pipe_reg;$/;"	r
mult_saturate_overflow_reg	.\altera_mf.v	/^    reg [3 : 0] mult_saturate_overflow_reg;$/;"	r
mult_saturate_overflow_vec	.\altera_mf.v	/^    wire [3 : 0] mult_saturate_overflow_vec;$/;"	n
mult_saturation	.\altera_mf.v	/^    input mult_saturation;$/;"	p
mult_saturation	.\altera_mf.v	/^    tri0 mult_saturation;$/;"	n
mult_saturation_aclr	.\altera_mf.v	/^    parameter mult_saturation_aclr = "ACLR3";$/;"	c
mult_saturation_int	.\altera_mf.v	/^    wire mult_saturation_int;$/;"	n
mult_saturation_reg	.\altera_mf.v	/^    parameter mult_saturation_reg = "CLOCK0";$/;"	c
mult_saturation_tmp	.\altera_mf.v	/^    reg  mult_saturation_tmp;$/;"	r
mult_saturation_wire_clk	.\altera_mf.v	/^    wire mult_saturation_wire_clk;$/;"	n
mult_saturation_wire_clr	.\altera_mf.v	/^    tri0 mult_saturation_wire_clr;$/;"	n
mult_saturation_wire_en	.\altera_mf.v	/^    tri1 mult_saturation_wire_en;$/;"	n
mult_signed	.\altera_mf.v	/^    reg mult_signed;$/;"	r
mult_signed_latent	.\altera_mf.v	/^    wire mult_signed_latent;$/;"	n
mult_signed_out	.\altera_mf.v	/^    reg mult_signed_out;$/;"	r
multi_clock	.\altera_mf.v	/^    parameter multi_clock = "OFF";$/;"	c
multiplier	.\altera_mf.v	/^        input [32 : 0] multiplier;$/;"	p
multiplier01_rounding	.\altera_mf.v	/^    parameter multiplier01_rounding = "NO";$/;"	c
multiplier01_saturation	.\altera_mf.v	/^    parameter multiplier01_saturation = "NO";$/;"	c
multiplier1_direction	.\altera_mf.v	/^    parameter multiplier1_direction		= "UNUSED";$/;"	c
multiplier1_direction	.\altera_mf.v	/^    parameter multiplier1_direction = "UNUSED";$/;"	c
multiplier23_rounding	.\altera_mf.v	/^    parameter multiplier23_rounding = "NO";$/;"	c
multiplier23_saturation	.\altera_mf.v	/^    parameter multiplier23_saturation = "NO";$/;"	c
multiplier3_direction	.\altera_mf.v	/^    parameter multiplier3_direction		= "UNUSED";$/;"	c
multiplier3_direction	.\altera_mf.v	/^    parameter multiplier3_direction = "UNUSED";$/;"	c
multiplier_aclr	.\altera_mf.v	/^    parameter multiplier_aclr           = "ACLR3";$/;"	c
multiplier_aclr0	.\altera_mf.v	/^    parameter multiplier_aclr0     = "ACLR3";$/;"	c
multiplier_aclr1	.\altera_mf.v	/^    parameter multiplier_aclr1     = "ACLR3";$/;"	c
multiplier_aclr2	.\altera_mf.v	/^    parameter multiplier_aclr2     = "ACLR3";$/;"	c
multiplier_aclr3	.\altera_mf.v	/^    parameter multiplier_aclr3     = "ACLR3";$/;"	c
multiplier_reg	.\altera_mf.v	/^    parameter multiplier_reg            = "CLOCK0";$/;"	c
multiplier_reg0_wire_clk	.\altera_mf.v	/^    wire multiplier_reg0_wire_clk;$/;"	n
multiplier_reg0_wire_clr	.\altera_mf.v	/^    tri0 multiplier_reg0_wire_clr;$/;"	n
multiplier_reg0_wire_en	.\altera_mf.v	/^    tri1 multiplier_reg0_wire_en;$/;"	n
multiplier_reg1_wire_clk	.\altera_mf.v	/^    wire multiplier_reg1_wire_clk;$/;"	n
multiplier_reg1_wire_clr	.\altera_mf.v	/^    tri0 multiplier_reg1_wire_clr;$/;"	n
multiplier_reg1_wire_en	.\altera_mf.v	/^    tri1 multiplier_reg1_wire_en;$/;"	n
multiplier_reg2_wire_clk	.\altera_mf.v	/^    wire multiplier_reg2_wire_clk;$/;"	n
multiplier_reg2_wire_clr	.\altera_mf.v	/^    tri0 multiplier_reg2_wire_clr;$/;"	n
multiplier_reg2_wire_en	.\altera_mf.v	/^    tri1 multiplier_reg2_wire_en;$/;"	n
multiplier_reg3_wire_clk	.\altera_mf.v	/^    wire multiplier_reg3_wire_clk;$/;"	n
multiplier_reg3_wire_clr	.\altera_mf.v	/^    tri0 multiplier_reg3_wire_clr;$/;"	n
multiplier_reg3_wire_en	.\altera_mf.v	/^    tri1 multiplier_reg3_wire_en;$/;"	n
multiplier_register0	.\altera_mf.v	/^    parameter multiplier_register0 = "CLOCK0";$/;"	c
multiplier_register1	.\altera_mf.v	/^    parameter multiplier_register1 = "CLOCK0";$/;"	c
multiplier_register2	.\altera_mf.v	/^    parameter multiplier_register2 = "CLOCK0";$/;"	c
multiplier_register3	.\altera_mf.v	/^    parameter multiplier_register3 = "CLOCK0";$/;"	c
multiplier_rounding	.\altera_mf.v	/^    parameter multiplier_rounding = "NO";$/;"	c
multiplier_saturation	.\altera_mf.v	/^    parameter multiplier_saturation = "NO";$/;"	c
multiplier_wire_clk	.\altera_mf.v	/^    wire multiplier_wire_clk;$/;"	n
multiplier_wire_clr	.\altera_mf.v	/^    tri0 multiplier_wire_clr;$/;"	n
multiplier_wire_en	.\altera_mf.v	/^    tri1 multiplier_wire_en;$/;"	n
my_rem	.\altera_mf.v	/^    integer my_rem;$/;"	r
n	.\altera_mf.v	/^        integer n;$/;"	r
n	.\altera_mf.v	/^        output n; $/;"	p
n	.\altera_mf.v	/^    input m,n;$/;"	p
n	.\altera_mf.v	/^    input tap_phase, m, n;$/;"	p
n	.\altera_mf.v	/^    integer i, j, k, m, n;$/;"	r
n	.\altera_mf.v	/^    integer m,n, phase;$/;"	r
n	.\altera_mf.v	/^    integer tap_phase, m, n, phase;$/;"	r
n	.\altera_mf.v	/^    parameter n = 1;$/;"	c
n	.\altera_mf.v	/^parameter   n                   = 1;$/;"	c
n2	.\altera_mf.v	/^    parameter n2 = 1;$/;"	c
n2	.\altera_mf.v	/^parameter   n2                  = 1;$/;"	c
n2_mode_val	.\altera_mf.v	/^    reg [8*6:1] n2_mode_val;$/;"	r
n2_val	.\altera_mf.v	/^    reg [31:0] n2_val;$/;"	r
nState	.\altera_mf.v	/^    reg [ 4 : 0 ] nState;$/;"	r
n_cntr_inclk	.\altera_mf.v	/^    wire n_cntr_inclk;$/;"	n
n_flash	.\altera_mf.v	/^    parameter    n_flash    =    1;$/;"	c
n_hi	.\altera_mf.v	/^    reg [7:0] n_hi;$/;"	r
n_lo	.\altera_mf.v	/^    reg [7:0] n_lo;$/;"	r
n_mode_val	.\altera_mf.v	/^    reg [8*6:1] n_mode_val;$/;"	r
n_mode_val	.\altera_mf.v	/^    reg [8*6:1] n_mode_val[0:1];$/;"	r
n_mode_val_old	.\altera_mf.v	/^    reg [8*6:1] n_mode_val_old[0:1];$/;"	r
n_out	.\altera_mf.v	/^        integer n_out;$/;"	r
n_time_delay	.\altera_mf.v	/^    input clk_time_delay, m_time_delay, n_time_delay;$/;"	p
n_time_delay	.\altera_mf.v	/^    integer clk_time_delay, m_time_delay, n_time_delay;$/;"	r
n_time_delay	.\altera_mf.v	/^    parameter n_time_delay = 0;$/;"	c
n_time_delay	.\altera_mf.v	/^parameter   n_time_delay        = 0;$/;"	c
n_time_delay_val	.\altera_mf.v	/^    reg [31:0] n_time_delay_val;$/;"	r
n_val	.\altera_mf.v	/^    reg [31:0] n_val;$/;"	r
n_val	.\altera_mf.v	/^    reg [31:0] n_val[0:1];$/;"	r
n_val_old	.\altera_mf.v	/^    reg [31:0] n_val_old[0:1];$/;"	r
n_val_tmp	.\altera_mf.v	/^    reg [31:0] n_val_tmp;$/;"	r
nan	.\altera_mf.v	/^    output nan;$/;"	p
nan_bit	.\altera_mf.v	/^    reg nan_bit;$/;"	r
nan_dataa	.\altera_mf.v	/^    reg nan_dataa;$/;"	r
nan_datab	.\altera_mf.v	/^    reg nan_datab;$/;"	r
nan_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] nan_pipe;$/;"	r
nand_size	.\altera_mf.v	/^    parameter    nand_size    =    67108864;$/;"	c
nce_l0	.\altera_mf.v	/^    wire nce_l0;$/;"	n
nce_l1	.\altera_mf.v	/^    wire nce_l1;$/;"	n
nce_temp	.\altera_mf.v	/^    wire nce_temp;$/;"	n
ncso_width	.\altera_mf.v	/^    parameter    ncso_width    =    1;$/;"	c
neg_a	.\altera_mf.v	/^        reg neg_a;$/;"	r
neg_a	.\altera_mf.v	/^    reg neg_a;$/;"	r
neg_b	.\altera_mf.v	/^        reg neg_b;$/;"	r
neg_b	.\altera_mf.v	/^    reg neg_b;$/;"	r
neg_rs232_rx	.\uart_rx.v	/^wire neg_rs232_rx;$/;"	n
neg_rx_int	.\uart_tx.v	/^wire neg_rx_int;    \/\/ rx_int下降沿标志位$/;"	n
negedge_count	.\altera_mf.v	/^    integer negedge_count;$/;"	r
new_data	.\altera_mf.v	/^    integer                new_data;$/;"	r
new_dataa_int	.\altera_mf.v	/^    tri0  [4 * int_width_a -1 : 0] new_dataa_int;$/;"	n
new_datab_int	.\altera_mf.v	/^    tri0  [4 * int_width_b -1 : 0] new_datab_int;$/;"	n
new_divisor	.\altera_mf.v	/^    integer   new_divisor;$/;"	r
new_m_times_vco_period	.\altera_mf.v	/^    integer new_m_times_vco_period;$/;"	r
new_m_times_vco_period	.\altera_mf.v	/^    time new_m_times_vco_period;$/;"	r
new_mode	.\altera_mf.v	/^    reg [8*6:1] new_mode;$/;"	r
new_multiplier	.\altera_mf.v	/^    integer new_multiplier;$/;"	r
new_read_data	.\altera_mf.v	/^    wire [width-1:0] new_read_data;$/;"	n
next_clk_check	.\altera_mf.v	/^reg [1:0] next_clk_check;$/;"	r
next_din_s1	.\altera_mf.v	/^    wire  next_din_s1;$/;"	n
next_state	.\dma_pri.v	/^reg       [3:0]      next_state   ;$/;"	r
next_vco_sched_time	.\altera_mf.v	/^    time    next_vco_sched_time;$/;"	r
nflash_mfc	.\altera_mf.v	/^    parameter    nflash_mfc    =    "NUMONYX";$/;"	c
ni	.\altera_mf.v	/^    integer ni;$/;"	r
nmi	.\omsp_sfr.v	/^input               nmi;          \/\/ Non-maskable interrupt (asynchronous)$/;"	p
nmi	.\openMSP430.v	/^input                nmi;                    \/\/ Non-maskable interrupt (asynchronous and non-glitchy)$/;"	p
nmi_acc	.\omsp_frontend.v	/^output               nmi_acc;          \/\/ Non-Maskable interrupt request accepted$/;"	p
nmi_acc	.\omsp_frontend.v	/^wire               nmi_acc     = irq_acc_all[62];$/;"	n
nmi_acc	.\omsp_sfr.v	/^input               nmi_acc;      \/\/ Non-Maskable interrupt request accepted$/;"	p
nmi_acc	.\openMSP430.v	/^wire                 nmi_acc;$/;"	n
nmi_capture	.\omsp_sfr.v	/^   wire   nmi_capture      = nmi_pol;$/;"	n
nmi_capture	.\omsp_sfr.v	/^   wire   nmi_capture;$/;"	n
nmi_capture_rst	.\omsp_sfr.v	/^   reg    nmi_capture_rst;$/;"	r
nmi_dly	.\omsp_sfr.v	/^reg  nmi_dly;$/;"	r
nmi_edge	.\omsp_sfr.v	/^wire       nmi_edge;$/;"	n
nmi_pnd	.\omsp_frontend.v	/^input                nmi_pnd;          \/\/ Non-maskable interrupt pending$/;"	p
nmi_pnd	.\omsp_sfr.v	/^output              nmi_pnd;      \/\/ NMI Pending$/;"	p
nmi_pnd	.\omsp_sfr.v	/^wire        nmi_pnd          = 1'b0;$/;"	n
nmi_pnd	.\omsp_sfr.v	/^wire        nmi_pnd   = nmiifg & nmie;$/;"	n
nmi_pnd	.\openMSP430.v	/^wire                 nmi_pnd;$/;"	n
nmi_pol	.\omsp_sfr.v	/^wire nmi_pol = nmi ^ wdtnmies;$/;"	n
nmi_s	.\omsp_sfr.v	/^   wire   nmi_s            = nmi_pol;$/;"	n
nmi_s	.\omsp_sfr.v	/^   wire   nmi_s;$/;"	n
nmi_wkup	.\omsp_frontend.v	/^input                nmi_wkup;         \/\/ NMI Wakeup$/;"	p
nmi_wkup	.\omsp_sfr.v	/^output              nmi_wkup;     \/\/ NMI Wakeup$/;"	p
nmi_wkup	.\omsp_sfr.v	/^wire        nmi_wkup         = 1'b0;$/;"	n
nmi_wkup	.\omsp_sfr.v	/^wire        nmi_wkup  = 1'b0;$/;"	n
nmi_wkup	.\omsp_sfr.v	/^wire        nmi_wkup;$/;"	n
nmi_wkup	.\openMSP430.v	/^wire                 nmi_wkup;$/;"	n
nmie	.\omsp_sfr.v	/^reg        nmie;$/;"	r
nmie	.\omsp_sfr.v	/^wire       nmie  =  1'b0;$/;"	n
nmiifg	.\omsp_sfr.v	/^reg        nmiifg;$/;"	r
nmiifg	.\omsp_sfr.v	/^wire       nmiifg = 1'b0;$/;"	n
nn	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
nn	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
no_multiply	.\altera_mf.v	/^    reg no_multiply;$/;"	r
no_rounding	.\altera_mf.v	/^    reg no_rounding;$/;"	r
no_warn	.\altera_mf.v	/^    reg no_warn;$/;"	r
nodiv_aclk	.\omsp_clock_module.v	/^   wire       nodiv_aclk   = dco_clk;$/;"	n
nodiv_aclk	.\omsp_clock_module.v	/^   wire nodiv_aclk = lfxt_clk;$/;"	n
nodiv_mclk	.\omsp_clock_module.v	/^wire nodiv_mclk;$/;"	n
nodiv_mclk_n	.\omsp_clock_module.v	/^      wire nodiv_mclk_n;$/;"	n
nodiv_smclk	.\omsp_clock_module.v	/^wire nodiv_smclk;$/;"	n
noe	.\altera_mf.v	/^    input    noe;$/;"	p
non_50_duty_cycle_is_valid	.\altera_mf.v	/^    reg non_50_duty_cycle_is_valid;$/;"	r
normal_mode	.\altera_mf.v	/^    parameter    normal_mode    =    1;$/;"	c
nrb_addr	.\altera_mf.v	/^    parameter    nrb_addr    =    65667072;$/;"	c
num	.\altera_mf.v	/^        integer num;$/;"	r
num	.\uart_rx.v	/^reg[3:0] num;$/;"	r
num	.\uart_tx.v	/^reg[3:0] num;$/;"	r
num_bit_mult0	.\altera_mf.v	/^    integer num_bit_mult0;$/;"	r
num_bit_mult1	.\altera_mf.v	/^    integer num_bit_mult1;$/;"	r
num_bit_mult2	.\altera_mf.v	/^    integer num_bit_mult2;$/;"	r
num_bit_mult3	.\altera_mf.v	/^    integer num_bit_mult3;$/;"	r
num_corrupt_bits	.\altera_mf.v	/^    reg [1 : 0] num_corrupt_bits [number_of_channels -1 : 0];$/;"	r
num_corrupt_bits	.\altera_mf.v	/^    reg [1 : 0] num_corrupt_bits;$/;"	r
num_mult	.\altera_mf.v	/^    integer num_mult;$/;"	r
num_output_cntrs	.\altera_mf.v	/^    integer num_output_cntrs;$/;"	r
num_phase_taps	.\altera_mf.v	/^    parameter num_phase_taps = 8;$/;"	c
num_stor	.\altera_mf.v	/^    integer num_stor;$/;"	r
number_of_channels	.\altera_mf.v	/^        parameter number_of_channels = 1;$/;"	c
number_of_channels	.\altera_mf.v	/^    parameter number_of_channels = 1;$/;"	c
number_of_channels	.\altera_mf.v	/^  parameter number_of_channels = 5,$/;"	c
number_of_multipliers	.\altera_mf.v	/^    parameter number_of_multipliers		= 1;$/;"	c
number_of_multipliers	.\altera_mf.v	/^    parameter number_of_multipliers = 1;$/;"	c
number_of_taps	.\altera_mf.v	/^    parameter number_of_taps = 4;   \/\/ Specifies the number of regularly spaced$/;"	c
numerator	.\altera_mf.v	/^        input numerator;$/;"	p
numerator	.\altera_mf.v	/^        integer numerator;$/;"	r
numwords	.\altera_mf.v	/^    parameter numwords         = 0;             \/\/ words stored in memory$/;"	c
numwords	.\altera_mf.v	/^    parameter numwords = 0;$/;"	c
numwords_a	.\altera_mf.v	/^    parameter numwords_a       = 0;$/;"	c
numwords_b	.\altera_mf.v	/^    parameter numwords_b                = 0;$/;"	c
o	.\altera_mf.v	/^    output o;$/;"	p
o	.\altera_mf.v	/^    reg    o;$/;"	r
o_avmm_sreaddata	.\altera_mf.v	/^  output [avmm_slave_rdata_width-1:0] o_avmm_sreaddata,$/;"	p
o_dprio_addr	.\altera_mf.v	/^  output [dprio_addr_width-1:0] o_dprio_addr,$/;"	p
o_dprio_data	.\altera_mf.v	/^  output [dprio_data_width-1:0] o_dprio_data$/;"	p
o_dprio_rden	.\altera_mf.v	/^  output                        o_dprio_rden,$/;"	p
o_dprio_wren	.\altera_mf.v	/^  output                        o_dprio_wren,$/;"	p
o_quad_address	.\altera_mf.v	/^  output [8:0] o_quad_address, \/\/ output to altgx_reconfig$/;"	p
o_reconfig_busy	.\altera_mf.v	/^  output       o_reconfig_busy,$/;"	p
oe	.\altera_mf.v	/^    input oe;$/;"	p
oe	.\altera_mf.v	/^input oe;$/;"	p
oe	.\altera_mf.v	/^tri1 oe;   \/\/ default oe to 1$/;"	n
oe	.\altera_mf.v	/^tri1 oe;$/;"	n
oe_out	.\altera_mf.v	/^output [width-1:0] oe_out;$/;"	p
oe_reg	.\altera_mf.v	/^parameter oe_reg = "UNUSED";$/;"	c
oe_reg_ext	.\altera_mf.v	/^reg  oe_reg_ext;$/;"	r
oe_rgd	.\altera_mf.v	/^reg  oe_rgd;$/;"	r
off_addr	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
off_addr	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
offset	.\altera_mf.v	/^    integer offset;$/;"	r
offsets_pden_rd	.\altera_mf.v	/^	parameter offsets_pden_rd	= 5'd3;$/;"	c
offsets_pden_wr	.\altera_mf.v	/^	parameter offsets_pden_wr	= 5'd4;$/;"	c
ofp	.\altera_mf.v	/^    integer ifp, ofp, r, r2;$/;"	r
old_m_value	.\altera_mf.v	/^        integer old_m_value;$/;"	r
omsp_alu	.\omsp_alu.v	/^module  omsp_alu ($/;"	m
omsp_alu	.\work\omsp_alu\_primary.vhd	/^entity omsp_alu is$/;"	e
omsp_and_gate	.\omsp_and_gate.v	/^module  omsp_and_gate ($/;"	m
omsp_and_gate	.\work\omsp_and_gate\_primary.vhd	/^entity omsp_and_gate is$/;"	e
omsp_clock_gate	.\omsp_clock_gate.v	/^module  omsp_clock_gate ($/;"	m
omsp_clock_gate	.\work\omsp_clock_gate\_primary.vhd	/^entity omsp_clock_gate is$/;"	e
omsp_clock_module	.\omsp_clock_module.v	/^module  omsp_clock_module ($/;"	m
omsp_clock_module	.\work\omsp_clock_module\_primary.vhd	/^entity omsp_clock_module is$/;"	e
omsp_clock_mux	.\omsp_clock_mux.v	/^module  omsp_clock_mux ($/;"	m
omsp_clock_mux	.\work\omsp_clock_mux\_primary.vhd	/^entity omsp_clock_mux is$/;"	e
omsp_dbg	.\omsp_dbg.v	/^module  omsp_dbg ($/;"	m
omsp_dbg	.\work\omsp_dbg\_primary.vhd	/^entity omsp_dbg is$/;"	e
omsp_dbg_hwbrk	.\omsp_dbg_hwbrk.v	/^module  omsp_dbg_hwbrk ($/;"	m
omsp_dbg_hwbrk	.\work\omsp_dbg_hwbrk\_primary.vhd	/^entity omsp_dbg_hwbrk is$/;"	e
omsp_dbg_i2c	.\omsp_dbg_i2c.v	/^module  omsp_dbg_i2c ($/;"	m
omsp_dbg_i2c	.\work\omsp_dbg_i2c\_primary.vhd	/^entity omsp_dbg_i2c is$/;"	e
omsp_dbg_uart	.\omsp_dbg_uart.v	/^module  omsp_dbg_uart ($/;"	m
omsp_dbg_uart	.\work\omsp_dbg_uart\_primary.vhd	/^entity omsp_dbg_uart is$/;"	e
omsp_execution_unit	.\omsp_execution_unit.v	/^module  omsp_execution_unit ($/;"	m
omsp_execution_unit	.\work\omsp_execution_unit\_primary.vhd	/^entity omsp_execution_unit is$/;"	e
omsp_frontend	.\omsp_frontend.v	/^module  omsp_frontend ($/;"	m
omsp_frontend	.\work\omsp_frontend\_primary.vhd	/^entity omsp_frontend is$/;"	e
omsp_gpio	.\omsp_gpio.v	/^module  omsp_gpio ($/;"	m
omsp_gpio	.\work\omsp_gpio\_primary.vhd	/^entity omsp_gpio is$/;"	e
omsp_mem_backbone	.\omsp_mem_backbone.v	/^module  omsp_mem_backbone ($/;"	m
omsp_mem_backbone	.\work\omsp_mem_backbone\_primary.vhd	/^entity omsp_mem_backbone is$/;"	e
omsp_multiplier	.\omsp_multiplier.v	/^module  omsp_multiplier ($/;"	m
omsp_multiplier	.\work\omsp_multiplier\_primary.vhd	/^entity omsp_multiplier is$/;"	e
omsp_register_file	.\omsp_register_file.v	/^module  omsp_register_file ($/;"	m
omsp_register_file	.\work\omsp_register_file\_primary.vhd	/^entity omsp_register_file is$/;"	e
omsp_scan_mux	.\omsp_scan_mux.v	/^module  omsp_scan_mux ($/;"	m
omsp_scan_mux	.\work\omsp_scan_mux\_primary.vhd	/^entity omsp_scan_mux is$/;"	e
omsp_sfr	.\omsp_sfr.v	/^module  omsp_sfr ($/;"	m
omsp_sfr	.\work\omsp_sfr\_primary.vhd	/^entity omsp_sfr is$/;"	e
omsp_sync_cell	.\omsp_sync_cell.v	/^module  omsp_sync_cell ($/;"	m
omsp_sync_cell	.\work\omsp_sync_cell\_primary.vhd	/^entity omsp_sync_cell is$/;"	e
omsp_sync_reset	.\omsp_sync_reset.v	/^module  omsp_sync_reset ($/;"	m
omsp_sync_reset	.\work\omsp_sync_reset\_primary.vhd	/^entity omsp_sync_reset is$/;"	e
omsp_timerA	.\omsp_timerA.v	/^module  omsp_timerA ($/;"	m
omsp_timerA	.\work\omsp_timer@a\_primary.vhd	/^entity omsp_timerA is$/;"	e
omsp_wakeup_cell	.\omsp_wakeup_cell.v	/^module  omsp_wakeup_cell ($/;"	m
omsp_wakeup_cell	.\work\omsp_wakeup_cell\_primary.vhd	/^entity omsp_wakeup_cell is$/;"	e
omsp_watchdog	.\omsp_watchdog.v	/^module  omsp_watchdog ($/;"	m
omsp_watchdog	.\work\omsp_watchdog\_primary.vhd	/^entity omsp_watchdog is$/;"	e
one_hot16	.\omsp_frontend.v	/^function [15:0] one_hot16;$/;"	f
one_hot64	.\omsp_frontend.v	/^function [63:0] one_hot64;$/;"	f
one_hot8	.\omsp_frontend.v	/^function [7:0] one_hot8;$/;"	f
op1	.\omsp_multiplier.v	/^reg  [15:0] op1;$/;"	r
op1_mux	.\omsp_multiplier.v	/^wire [15:0] op1_mux    = op1_rd     & {16{reg_rd[OP1_MPY]  |$/;"	n
op1_rd	.\omsp_multiplier.v	/^wire [15:0] op1_rd  = op1;$/;"	n
op1_wr	.\omsp_multiplier.v	/^wire        op1_wr = reg_wr[OP1_MPY]  |$/;"	n
op2	.\omsp_multiplier.v	/^reg  [15:0] op2;$/;"	r
op2_mux	.\omsp_multiplier.v	/^wire [15:0] op2_mux    = op2_rd     & {16{reg_rd[OP2]}};$/;"	n
op2_rd	.\omsp_multiplier.v	/^wire [15:0] op2_rd  = op2;$/;"	n
op2_wr	.\omsp_multiplier.v	/^wire        op2_wr = reg_wr[OP2];$/;"	n
op_a	.\altera_mf.v	/^        reg [2*int_width_result - 1 :0] op_a; $/;"	r
op_a	.\altera_mf.v	/^        reg [int_width_a -1 :0]        op_a; $/;"	r
op_a_int	.\altera_mf.v	/^        reg [int_width_a -1 :0]        op_a_int; $/;"	r
op_b	.\altera_mf.v	/^        reg [2*int_width_result - 1 :0] op_b; $/;"	r
op_b	.\altera_mf.v	/^        reg [int_width_b -1 :0]        op_b; $/;"	r
op_b	.\altera_mf.v	/^        reg [int_width_multiply_b -1 :0]        op_b; $/;"	r
op_b_int	.\altera_mf.v	/^        reg [int_width_b -1 :0]        op_b_int; $/;"	r
op_b_int	.\altera_mf.v	/^        reg [int_width_multiply_b -1 :0]        op_b_int; $/;"	r
op_bit8_msk	.\omsp_alu.v	/^wire        op_bit8_msk     = ~exec_cycle | ~inst_bw;$/;"	n
op_dst	.\omsp_alu.v	/^input        [15:0] op_dst;        \/\/ Destination operand$/;"	p
op_dst	.\omsp_execution_unit.v	/^wire         [15:0] op_dst;$/;"	n
op_dst_in	.\omsp_alu.v	/^wire  [4:0] alu_dadd0      = bcd_add(op_src_in[3:0],   op_dst_in[3:0],  status[0]);$/;"	n
op_dst_in	.\omsp_alu.v	/^wire  [4:0] alu_dadd1      = bcd_add(op_src_in[7:4],   op_dst_in[7:4],  alu_dadd0[4]);$/;"	n
op_dst_in	.\omsp_alu.v	/^wire  [4:0] alu_dadd2      = bcd_add(op_src_in[11:8],  op_dst_in[11:8], alu_dadd1[4]);$/;"	n
op_dst_in	.\omsp_alu.v	/^wire  [4:0] alu_dadd3      = bcd_add(op_src_in[15:12], op_dst_in[15:12],alu_dadd2[4]);$/;"	n
op_dst_in	.\omsp_alu.v	/^wire [16:0] op_dst_in       = {1'b0, {op_dst[15:8]     & {8{op_bit8_msk}}}, op_dst[7:0]};$/;"	n
op_mode	.\altera_mf.v	/^    reg op_mode;$/;"	r
op_src	.\omsp_alu.v	/^input        [15:0] op_src;        \/\/ Source operand$/;"	p
op_src	.\omsp_alu.v	/^wire [16:0] alu_shift      = {1'b0, alu_shift_msb, op_src[15:9], alu_shift_7, op_src[7:1]};$/;"	n
op_src	.\omsp_alu.v	/^wire [16:0] alu_swpb       = {1'b0, op_src[7:0],op_src[15:8]};$/;"	n
op_src	.\omsp_execution_unit.v	/^wire         [15:0] op_src;$/;"	n
op_src_in	.\omsp_alu.v	/^wire [16:0] op_src_in       = {1'b0, {op_src_inv[15:8] & {8{op_bit8_msk}}}, op_src_inv[7:0]};$/;"	n
op_src_in_jmp	.\omsp_alu.v	/^wire [16:0] op_src_in_jmp  = op_src_in & {17{~jmp_not_taken}};$/;"	n
op_src_inv	.\omsp_alu.v	/^wire [15:0] op_src_inv     = {16{op_src_inv_cmd}} ^ op_src;$/;"	n
op_src_inv_cmd	.\omsp_alu.v	/^wire        op_src_inv_cmd = exec_cycle & (inst_alu[`ALU_SRC_INV]);$/;"	n
openMSP430	.\openMSP430.v	/^module  openMSP430 ($/;"	m
openMSP430	.\work\open@m@s@p430\_primary.vhd	/^entity openMSP430 is$/;"	e
openMSP430_fpga	.\openMSP430_fpga.v	/^module  openMSP430_fpga($/;"	m
openMSP430_fpga	.\work\open@m@s@p430_fpga\_primary.vhd	/^entity openMSP430_fpga is$/;"	e
operation_mode	.\altera_mf.v	/^    parameter operation_mode                       = "normal";$/;"	c
operation_mode	.\altera_mf.v	/^    parameter operation_mode                     = "BIDIR_DUAL_PORT";$/;"	c
operation_mode	.\altera_mf.v	/^    parameter operation_mode = "normal";$/;"	c
operation_mode	.\altera_mf.v	/^parameter   operation_mode            = "NORMAL" ;$/;"	c
operation_mode	.\altera_mf.v	/^parameter operation_mode = "NORMAL";$/;"	c
option_bits_start_address	.\altera_mf.v	/^    parameter    option_bits_start_address    =    0;$/;"	c
or_sign_wire	.\altera_mf.v	/^    reg or_sign_wire;$/;"	r
ori_per0	.\altera_mf.v	/^time ori_per0;$/;"	r
ori_per1	.\altera_mf.v	/^time ori_per1;$/;"	r
ori_per2	.\altera_mf.v	/^time ori_per2;$/;"	r
ori_per_ext	.\altera_mf.v	/^time ori_per_ext;$/;"	r
oscoff	.\omsp_clock_module.v	/^input               oscoff;           \/\/ Turns off LFXT1 clock input$/;"	p
oscoff	.\omsp_execution_unit.v	/^output              oscoff;        \/\/ Turns off LFXT1 clock input$/;"	p
oscoff	.\omsp_register_file.v	/^output              oscoff;       \/\/ Turns off LFXT1 clock input$/;"	p
oscoff	.\openMSP430.v	/^wire                 oscoff;$/;"	n
oscoff_and_mclk_dma_enable	.\omsp_clock_module.v	/^   wire oscoff_and_mclk_dma_enable;$/;"	n
oscoff_and_mclk_dma_enable_s	.\omsp_clock_module.v	/^   wire oscoff_and_mclk_dma_enable_s;$/;"	n
oscoff_and_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire oscoff_and_mclk_dma_wkup;$/;"	n
oscoff_mask	.\omsp_register_file.v	/^   wire [15:0] oscoff_mask = 16'h0000;$/;"	n
oscoff_mask	.\omsp_register_file.v	/^   wire [15:0] oscoff_mask = 16'h0020; \/\/                       - the SCG1 mode is emulated$/;"	n
oscoff_mask	.\omsp_register_file.v	/^   wire [15:0] oscoff_mask = 16'h0020;$/;"	n
oscoff_s	.\omsp_clock_module.v	/^   wire       oscoff_s     = oscoff;$/;"	n
oscoff_s	.\omsp_clock_module.v	/^   wire oscoff_s;$/;"	n
other_clock_last_value	.\altera_mf.v	/^    reg other_clock_last_value;$/;"	r
other_clock_value	.\altera_mf.v	/^    reg other_clock_value;$/;"	r
out	.\altera_mf.v	/^    output out;$/;"	p
out_file	.\altera_mf.v	/^    output [`MAX_NAME_SZ*8 : 1] out_file;$/;"	p
out_file	.\altera_mf.v	/^    reg [`MAX_NAME_SZ*8 : 1] out_file;$/;"	r
outclk_data_h	.\altera_mf.v	/^    reg [deserialization_factor -1 :0] outclk_data_h;$/;"	r
outclk_data_l	.\altera_mf.v	/^    reg [deserialization_factor -1 :0] outclk_data_l;$/;"	r
outclk_load_cntr	.\altera_mf.v	/^    integer outclk_load_cntr;$/;"	r
outclk_shift_h	.\altera_mf.v	/^    reg [deserialization_factor -1 :0] outclk_shift_h;$/;"	r
outclk_shift_l	.\altera_mf.v	/^    reg [deserialization_factor -1 :0] outclk_shift_l;$/;"	r
outclock	.\altera_mf.v	/^    input                  outclock;$/;"	p
outclock	.\altera_mf.v	/^    input  outclock;             \/\/ Output or read clock$/;"	p
outclock	.\altera_mf.v	/^    tri1                   outclock;$/;"	n
outclock	.\altera_mf.v	/^    tri1 outclock;$/;"	n
outclock	.\altera_mf.v	/^input outclock;$/;"	p
outclock_alignment	.\altera_mf.v	/^    parameter outclock_alignment = "EDGE_ALIGNED";$/;"	c
outclock_divide_by	.\altera_mf.v	/^    parameter outclock_divide_by = 1;$/;"	c
outclock_divide_by	.\altera_mf.v	/^    parameter outclock_divide_by = deserialization_factor;$/;"	c
outclock_duty_cycle	.\altera_mf.v	/^    parameter outclock_duty_cycle = 50;$/;"	c
outclock_h	.\altera_mf.v	/^    reg outclock_h;$/;"	r
outclock_l	.\altera_mf.v	/^    reg outclock_l;$/;"	r
outclock_multiply_by	.\altera_mf.v	/^    parameter outclock_multiply_by = 1;$/;"	c
outclock_phase_shift	.\altera_mf.v	/^    parameter outclock_phase_shift = 0;$/;"	c
outclock_phase_shift	.\altera_mf.v	/^parameter outclock_phase_shift = 0;  \/\/ units in ps$/;"	c
outclock_phase_shift_adj	.\altera_mf.v	/^integer outclock_phase_shift_adj;$/;"	r
outclock_resource	.\altera_mf.v	/^    parameter outclock_resource = "AUTO";$/;"	c
outclocken	.\altera_mf.v	/^    input                  outclocken;$/;"	p
outclocken	.\altera_mf.v	/^    input  outclocken;           \/\/ Clock enable for outclock$/;"	p
outclocken	.\altera_mf.v	/^    tri1                   outclocken;$/;"	n
outclocken	.\altera_mf.v	/^    tri1 outclocken;$/;"	n
outclocken	.\altera_mf.v	/^input outclocken;$/;"	p
outclocken	.\altera_mf.v	/^tri1 outclocken; \/\/ default outclocken to 1$/;"	n
outclocken	.\altera_mf.v	/^tri1 outclocken;$/;"	n
outdata_aclr	.\altera_mf.v	/^    parameter outdata_aclr = "ON";$/;"	c
outdata_aclr_a	.\altera_mf.v	/^    parameter outdata_aclr_a   = "NONE";$/;"	c
outdata_aclr_a	.\altera_mf.v	/^    parameter outdata_aclr_a   = "ON";         \/\/ aclr affects qa[]?$/;"	c
outdata_aclr_b	.\altera_mf.v	/^    parameter outdata_aclr_b            = "NONE";$/;"	c
outdata_aclr_b	.\altera_mf.v	/^    parameter outdata_aclr_b   = "ON";         \/\/ aclr affects qb[]?$/;"	c
outdata_reg	.\altera_mf.v	/^    parameter outdata_reg = "UNREGISTERED";$/;"	c
outdata_reg_a	.\altera_mf.v	/^    parameter outdata_reg_a    = "UNREGISTERED";$/;"	c
outdata_reg_a	.\altera_mf.v	/^    parameter outdata_reg_a    = "UNREGISTERED";\/\/ clock used by qa[]$/;"	c
outdata_reg_b	.\altera_mf.v	/^    parameter outdata_reg_b             = "UNREGISTERED";$/;"	c
outdata_reg_b	.\altera_mf.v	/^    parameter outdata_reg_b    = "UNREGISTERED";\/\/ clock used by qb[]$/;"	c
output	.\altera_mf.v	/^  output                            adce_cal_busy,$/;"	p
output	.\altera_mf.v	/^  output                            busy,$/;"	p
output	.\altera_mf.v	/^  output                            dprio_rden,$/;"	p
output	.\altera_mf.v	/^  output                            timeout,$/;"	p
output	.\altera_mf.v	/^  output                        o_dprio_rden,$/;"	p
output	.\altera_mf.v	/^  output                        o_dprio_wren,$/;"	p
output	.\altera_mf.v	/^  output                      [8:0] quad_address,$/;"	p
output	.\altera_mf.v	/^  output       o_reconfig_busy,$/;"	p
output	.\altera_mf.v	/^  output [15:0]                     dprio_data,$/;"	p
output	.\altera_mf.v	/^  output [4*number_of_channels-1:0] testbus_sels,$/;"	p
output	.\altera_mf.v	/^  output [8:0] o_quad_address, \/\/ output to altgx_reconfig$/;"	p
output	.\altera_mf.v	/^  output [dprio_addr_width-1:0] o_dprio_addr,$/;"	p
output	.\altera_mf.v	/^  output [dprio_data_width-1:0] o_dprio_data$/;"	p
output	.\altera_mf.v	/^  output [number_of_channels-1:0]   error$/;"	p
output	.\altera_mf.v	/^  output reg                              o_avmm_swaitrequest,$/;"	p
output_aclr	.\altera_mf.v	/^    parameter output_aclr               = "ACLR3";$/;"	c
output_aclr	.\altera_mf.v	/^    parameter output_aclr     = "ACLR3";$/;"	c
output_count	.\altera_mf.v	/^    integer   output_count;$/;"	r
output_counter_value	.\altera_mf.v	/^    input output_counter_value, duty_cycle;$/;"	p
output_counter_value	.\altera_mf.v	/^    input output_counter_value;$/;"	p
output_counter_value	.\altera_mf.v	/^    integer output_counter_value, duty_cycle, counter_h;$/;"	r
output_counter_value	.\altera_mf.v	/^    integer output_counter_value, duty_cycle;$/;"	r
output_counter_value	.\altera_mf.v	/^    integer output_counter_value;$/;"	r
output_data_rate	.\altera_mf.v	/^    parameter output_data_rate = 0;$/;"	c
output_enable	.\altera_mf.v	/^wire output_enable;$/;"	n
output_laten_result	.\altera_mf.v	/^    reg [(2*int_width_result - 1): 0] output_laten_result;$/;"	r
output_reg	.\altera_mf.v	/^    parameter output_reg                = "CLOCK0";$/;"	c
output_reg_wire_clk	.\altera_mf.v	/^    wire output_reg_wire_clk;$/;"	n
output_reg_wire_clr	.\altera_mf.v	/^    tri0 output_reg_wire_clr;$/;"	n
output_reg_wire_en	.\altera_mf.v	/^    tri1 output_reg_wire_en;$/;"	n
output_reg_wire_result	.\altera_mf.v	/^    wire [(2*int_width_result - 1): 0] output_reg_wire_result;$/;"	n
output_register	.\altera_mf.v	/^    parameter output_register = "CLOCK0";$/;"	c
output_round	.\altera_mf.v	/^    input output_round;$/;"	p
output_round_aclr	.\altera_mf.v	/^    parameter output_round_aclr = "NONE";$/;"	c
output_round_pipeline_aclr	.\altera_mf.v	/^    parameter output_round_pipeline_aclr = "NONE";$/;"	c
output_round_pipeline_register	.\altera_mf.v	/^    parameter output_round_pipeline_register = "UNREGISTERED";$/;"	c
output_round_register	.\altera_mf.v	/^    parameter output_round_register = "UNREGISTERED";$/;"	c
output_round_type	.\altera_mf.v	/^    parameter output_round_type = "NEAREST_INTEGER";$/;"	c
output_rounding	.\altera_mf.v	/^    parameter output_rounding = "NO";$/;"	c
output_saturate	.\altera_mf.v	/^    input output_saturate;$/;"	p
output_saturate_aclr	.\altera_mf.v	/^    parameter output_saturate_aclr = "NONE";$/;"	c
output_saturate_pipeline_aclr	.\altera_mf.v	/^    parameter output_saturate_pipeline_aclr = "NONE";$/;"	c
output_saturate_pipeline_register	.\altera_mf.v	/^    parameter output_saturate_pipeline_register = "UNREGISTERED";$/;"	c
output_saturate_register	.\altera_mf.v	/^    parameter output_saturate_register = "UNREGISTERED";$/;"	c
output_saturate_type	.\altera_mf.v	/^    parameter output_saturate_type = "ASYMMETRIC";$/;"	c
output_saturation	.\altera_mf.v	/^    parameter output_saturation = "NO";$/;"	c
output_shift_count	.\altera_mf.v	/^    integer output_shift_count;$/;"	r
output_value0	.\altera_mf.v	/^reg output_value0;$/;"	r
output_value1	.\altera_mf.v	/^reg output_value1;$/;"	r
output_value2	.\altera_mf.v	/^reg output_value2;$/;"	r
output_value_ext	.\altera_mf.v	/^reg output_value_ext;$/;"	r
output_wire_clk	.\altera_mf.v	/^    wire output_wire_clk;$/;"	n
output_wire_clr	.\altera_mf.v	/^    tri0 output_wire_clr;$/;"	n
output_wire_en	.\altera_mf.v	/^    tri1 output_wire_en;$/;"	n
outround_int	.\altera_mf.v	/^    tri0 outround_int;$/;"	n
outround_pipe_reg	.\altera_mf.v	/^    reg outround_pipe_reg;$/;"	r
outround_pipe_wire	.\altera_mf.v	/^    wire outround_pipe_wire;$/;"	n
outround_pipe_wire_clk	.\altera_mf.v	/^    wire outround_pipe_wire_clk;$/;"	n
outround_pipe_wire_clr	.\altera_mf.v	/^    tri0 outround_pipe_wire_clr;$/;"	n
outround_pipe_wire_en	.\altera_mf.v	/^    tri1 outround_pipe_wire_en;$/;"	n
outround_reg	.\altera_mf.v	/^    reg outround_reg;$/;"	r
outround_reg_wire_clk	.\altera_mf.v	/^    wire outround_reg_wire_clk;$/;"	n
outround_reg_wire_clr	.\altera_mf.v	/^    tri0 outround_reg_wire_clr;$/;"	n
outround_reg_wire_en	.\altera_mf.v	/^    tri1 outround_reg_wire_en;$/;"	n
outround_wire	.\altera_mf.v	/^    wire outround_wire;$/;"	n
outsat_int	.\altera_mf.v	/^    tri0 outsat_int;$/;"	n
outsat_pipe_reg	.\altera_mf.v	/^    reg outsat_pipe_reg;$/;"	r
outsat_pipe_wire	.\altera_mf.v	/^    wire outsat_pipe_wire;$/;"	n
outsat_pipe_wire_clk	.\altera_mf.v	/^    wire outsat_pipe_wire_clk;$/;"	n
outsat_pipe_wire_clr	.\altera_mf.v	/^    tri0 outsat_pipe_wire_clr;$/;"	n
outsat_pipe_wire_en	.\altera_mf.v	/^    tri1 outsat_pipe_wire_en;$/;"	n
outsat_reg	.\altera_mf.v	/^    reg outsat_reg;$/;"	r
outsat_reg_wire_clk	.\altera_mf.v	/^    wire outsat_reg_wire_clk;$/;"	n
outsat_reg_wire_clr	.\altera_mf.v	/^    tri0 outsat_reg_wire_clr;$/;"	n
outsat_reg_wire_en	.\altera_mf.v	/^    tri1 outsat_reg_wire_en;$/;"	n
outsat_wire	.\altera_mf.v	/^    wire outsat_wire;$/;"	n
overflow	.\altera_mf.v	/^    output overflow;$/;"	p
overflow	.\altera_mf.v	/^    reg overflow;$/;"	r
overflow_bit	.\altera_mf.v	/^    reg overflow_bit;$/;"	r
overflow_checking	.\altera_mf.v	/^    parameter overflow_checking       = "ON";$/;"	c
overflow_checking	.\altera_mf.v	/^    parameter overflow_checking = "ON";$/;"	c
overflow_checking	.\altera_mf.v	/^    reg overflow_checking;$/;"	r
overflow_int	.\altera_mf.v	/^    reg overflow_int;$/;"	r
overflow_int_wire	.\altera_mf.v	/^    wire overflow_int_wire;$/;"	n
overflow_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] overflow_pipe;$/;"	r
overflow_stat_pipe_reg	.\altera_mf.v	/^    reg [extra_latency : 0] overflow_stat_pipe_reg;$/;"	r
overflow_stat_reg	.\altera_mf.v	/^    reg overflow_stat_reg;$/;"	r
overflow_status	.\altera_mf.v	/^    reg overflow_status;$/;"	r
overflow_status_bit_pos	.\altera_mf.v	/^    integer overflow_status_bit_pos; $/;"	r
overflow_tmp_int	.\altera_mf.v	/^    reg overflow_tmp_int;$/;"	r
p0addr_sim	.\altera_mf.v	/^        reg     [0:0]   p0addr_sim;$/;"	r
p1_din	.\omsp_gpio.v	/^input         [7:0] p1_din;         \/\/ Port 1 data input$/;"	p
p1_din	.\openMSP430_fpga.v	/^wire          [7:0] p1_din;$/;"	n
p1_dout	.\omsp_gpio.v	/^output        [7:0] p1_dout;        \/\/ Port 1 data output$/;"	p
p1_dout	.\openMSP430_fpga.v	/^output p1_dout;$/;"	p
p1_dout	.\openMSP430_fpga.v	/^wire         [7:0] p1_dout;$/;"	n
p1_dout	.\tb_openMSP430_fpga.v	/^wire         [7:0] p1_dout;$/;"	n
p1_dout_en	.\omsp_gpio.v	/^output        [7:0] p1_dout_en;     \/\/ Port 1 data output enable$/;"	p
p1_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p1_dout_en;$/;"	n
p1_sel	.\omsp_gpio.v	/^output        [7:0] p1_sel;         \/\/ Port 1 function select$/;"	p
p1_sel	.\openMSP430_fpga.v	/^wire         [7:0] p1_sel;$/;"	n
p1dir	.\omsp_gpio.v	/^reg  [7:0] p1dir;$/;"	r
p1dir_nxt	.\omsp_gpio.v	/^wire [7:0] p1dir_nxt = P1DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p1dir_rd	.\omsp_gpio.v	/^wire [15:0] p1dir_rd  = {8'h00, (p1dir & {8{reg_rd[P1DIR]}})} << (8 & {4{P1DIR[0]}});$/;"	n
p1dir_wr	.\omsp_gpio.v	/^wire       p1dir_wr  = P1DIR[0] ? reg_hi_wr[P1DIR] : reg_lo_wr[P1DIR];$/;"	n
p1ie	.\omsp_gpio.v	/^reg  [7:0] p1ie;$/;"	r
p1ie_nxt	.\omsp_gpio.v	/^wire [7:0] p1ie_nxt = P1IE[0] ? per_din[15:8]   : per_din[7:0];$/;"	n
p1ie_rd	.\omsp_gpio.v	/^wire [15:0] p1ie_rd   = {8'h00, (p1ie  & {8{reg_rd[P1IE]}})}  << (8 & {4{P1IE[0]}});$/;"	n
p1ie_wr	.\omsp_gpio.v	/^wire       p1ie_wr  = P1IE[0] ? reg_hi_wr[P1IE] : reg_lo_wr[P1IE];$/;"	n
p1ies	.\omsp_gpio.v	/^reg  [7:0] p1ies;$/;"	r
p1ies_nxt	.\omsp_gpio.v	/^wire [7:0] p1ies_nxt = P1IES[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p1ies_rd	.\omsp_gpio.v	/^wire [15:0] p1ies_rd  = {8'h00, (p1ies & {8{reg_rd[P1IES]}})} << (8 & {4{P1IES[0]}});$/;"	n
p1ies_wr	.\omsp_gpio.v	/^wire       p1ies_wr  = P1IES[0] ? reg_hi_wr[P1IES] : reg_lo_wr[P1IES];$/;"	n
p1ifg	.\omsp_gpio.v	/^reg  [7:0] p1ifg;$/;"	r
p1ifg_nxt	.\omsp_gpio.v	/^wire [7:0] p1ifg_nxt = P1IFG[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p1ifg_rd	.\omsp_gpio.v	/^wire [15:0] p1ifg_rd  = {8'h00, (p1ifg & {8{reg_rd[P1IFG]}})} << (8 & {4{P1IFG[0]}});$/;"	n
p1ifg_set	.\omsp_gpio.v	/^wire [7:0] p1ifg_set;$/;"	n
p1ifg_wr	.\omsp_gpio.v	/^wire       p1ifg_wr  = P1IFG[0] ? reg_hi_wr[P1IFG] : reg_lo_wr[P1IFG];$/;"	n
p1in	.\omsp_gpio.v	/^wire [7:0] p1in;$/;"	n
p1in_dly	.\omsp_gpio.v	/^reg    [7:0] p1in_dly;$/;"	r
p1in_fe	.\omsp_gpio.v	/^wire   [7:0] p1in_fe   =  ~p1in &  p1in_dly;$/;"	n
p1in_rd	.\omsp_gpio.v	/^wire [15:0] p1in_rd   = {8'h00, (p1in  & {8{reg_rd[P1IN]}})}  << (8 & {4{P1IN[0]}});$/;"	n
p1in_re	.\omsp_gpio.v	/^wire   [7:0] p1in_re   =   p1in & ~p1in_dly;$/;"	n
p1out	.\omsp_gpio.v	/^reg  [7:0] p1out;$/;"	r
p1out_nxt	.\omsp_gpio.v	/^wire [7:0] p1out_nxt = P1OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p1out_rd	.\omsp_gpio.v	/^wire [15:0] p1out_rd  = {8'h00, (p1out & {8{reg_rd[P1OUT]}})} << (8 & {4{P1OUT[0]}});$/;"	n
p1out_wr	.\omsp_gpio.v	/^wire       p1out_wr  = P1OUT[0] ? reg_hi_wr[P1OUT] : reg_lo_wr[P1OUT];$/;"	n
p1sel	.\omsp_gpio.v	/^reg  [7:0] p1sel;$/;"	r
p1sel_nxt	.\omsp_gpio.v	/^wire [7:0] p1sel_nxt = P1SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p1sel_rd	.\omsp_gpio.v	/^wire [15:0] p1sel_rd  = {8'h00, (p1sel & {8{reg_rd[P1SEL]}})} << (8 & {4{P1SEL[0]}});$/;"	n
p1sel_wr	.\omsp_gpio.v	/^wire       p1sel_wr  = P1SEL[0] ? reg_hi_wr[P1SEL] : reg_lo_wr[P1SEL];$/;"	n
p2_din	.\omsp_gpio.v	/^input         [7:0] p2_din;         \/\/ Port 2 data input$/;"	p
p2_din	.\openMSP430_fpga.v	/^wire          [7:0] p2_din;$/;"	n
p2_dout	.\omsp_gpio.v	/^output        [7:0] p2_dout;        \/\/ Port 2 data output$/;"	p
p2_dout	.\openMSP430_fpga.v	/^wire         [7:0] p2_dout;$/;"	n
p2_dout_en	.\omsp_gpio.v	/^output        [7:0] p2_dout_en;     \/\/ Port 2 data output enable$/;"	p
p2_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p2_dout_en;$/;"	n
p2_sel	.\omsp_gpio.v	/^output        [7:0] p2_sel;         \/\/ Port 2 function select$/;"	p
p2_sel	.\openMSP430_fpga.v	/^wire         [7:0] p2_sel;$/;"	n
p2dir	.\omsp_gpio.v	/^reg  [7:0] p2dir;$/;"	r
p2dir_nxt	.\omsp_gpio.v	/^wire [7:0] p2dir_nxt = P2DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p2dir_rd	.\omsp_gpio.v	/^wire [15:0] p2dir_rd  = {8'h00, (p2dir & {8{reg_rd[P2DIR]}})} << (8 & {4{P2DIR[0]}});$/;"	n
p2dir_wr	.\omsp_gpio.v	/^wire       p2dir_wr  = P2DIR[0] ? reg_hi_wr[P2DIR] : reg_lo_wr[P2DIR];$/;"	n
p2ie	.\omsp_gpio.v	/^reg  [7:0] p2ie;$/;"	r
p2ie_nxt	.\omsp_gpio.v	/^wire [7:0] p2ie_nxt = P2IE[0] ? per_din[15:8]   : per_din[7:0];$/;"	n
p2ie_rd	.\omsp_gpio.v	/^wire [15:0] p2ie_rd   = {8'h00, (p2ie  & {8{reg_rd[P2IE]}})}  << (8 & {4{P2IE[0]}});$/;"	n
p2ie_wr	.\omsp_gpio.v	/^wire       p2ie_wr  = P2IE[0] ? reg_hi_wr[P2IE] : reg_lo_wr[P2IE];$/;"	n
p2ies	.\omsp_gpio.v	/^reg  [7:0] p2ies;$/;"	r
p2ies_nxt	.\omsp_gpio.v	/^wire [7:0] p2ies_nxt = P2IES[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p2ies_rd	.\omsp_gpio.v	/^wire [15:0] p2ies_rd  = {8'h00, (p2ies & {8{reg_rd[P2IES]}})} << (8 & {4{P2IES[0]}});$/;"	n
p2ies_wr	.\omsp_gpio.v	/^wire       p2ies_wr  = P2IES[0] ? reg_hi_wr[P2IES] : reg_lo_wr[P2IES];$/;"	n
p2ifg	.\omsp_gpio.v	/^reg  [7:0] p2ifg;$/;"	r
p2ifg_nxt	.\omsp_gpio.v	/^wire [7:0] p2ifg_nxt = P2IFG[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p2ifg_rd	.\omsp_gpio.v	/^wire [15:0] p2ifg_rd  = {8'h00, (p2ifg & {8{reg_rd[P2IFG]}})} << (8 & {4{P2IFG[0]}});$/;"	n
p2ifg_set	.\omsp_gpio.v	/^wire [7:0] p2ifg_set;$/;"	n
p2ifg_wr	.\omsp_gpio.v	/^wire       p2ifg_wr  = P2IFG[0] ? reg_hi_wr[P2IFG] : reg_lo_wr[P2IFG];$/;"	n
p2in	.\omsp_gpio.v	/^wire [7:0] p2in;$/;"	n
p2in_dly	.\omsp_gpio.v	/^reg    [7:0] p2in_dly;$/;"	r
p2in_fe	.\omsp_gpio.v	/^wire   [7:0] p2in_fe   =  ~p2in &  p2in_dly;$/;"	n
p2in_rd	.\omsp_gpio.v	/^wire [15:0] p2in_rd   = {8'h00, (p2in  & {8{reg_rd[P2IN]}})}  << (8 & {4{P2IN[0]}});$/;"	n
p2in_re	.\omsp_gpio.v	/^wire   [7:0] p2in_re   =   p2in & ~p2in_dly;$/;"	n
p2out	.\omsp_gpio.v	/^reg  [7:0] p2out;$/;"	r
p2out_nxt	.\omsp_gpio.v	/^wire [7:0] p2out_nxt = P2OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p2out_rd	.\omsp_gpio.v	/^wire [15:0] p2out_rd  = {8'h00, (p2out & {8{reg_rd[P2OUT]}})} << (8 & {4{P2OUT[0]}});$/;"	n
p2out_wr	.\omsp_gpio.v	/^wire       p2out_wr  = P2OUT[0] ? reg_hi_wr[P2OUT] : reg_lo_wr[P2OUT];$/;"	n
p2sel	.\omsp_gpio.v	/^reg  [7:0] p2sel;$/;"	r
p2sel_nxt	.\omsp_gpio.v	/^wire [7:0] p2sel_nxt = P2SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p2sel_rd	.\omsp_gpio.v	/^wire [15:0] p2sel_rd  = {8'h00, (p2sel & {8{reg_rd[P2SEL]}})} << (8 & {4{P2SEL[0]}});$/;"	n
p2sel_wr	.\omsp_gpio.v	/^wire       p2sel_wr  = P2SEL[0] ? reg_hi_wr[P2SEL] : reg_lo_wr[P2SEL];$/;"	n
p3_din	.\omsp_gpio.v	/^input         [7:0] p3_din;         \/\/ Port 3 data input$/;"	p
p3_din	.\openMSP430_fpga.v	/^wire          [7:0] p3_din;$/;"	n
p3_dout	.\omsp_gpio.v	/^output        [7:0] p3_dout;        \/\/ Port 3 data output$/;"	p
p3_dout	.\openMSP430_fpga.v	/^wire         [7:0] p3_dout;$/;"	n
p3_dout_en	.\omsp_gpio.v	/^output        [7:0] p3_dout_en;     \/\/ Port 3 data output enable$/;"	p
p3_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p3_dout_en;$/;"	n
p3_sel	.\omsp_gpio.v	/^output        [7:0] p3_sel;         \/\/ Port 3 function select$/;"	p
p3_sel	.\openMSP430_fpga.v	/^wire         [7:0] p3_sel;$/;"	n
p3dir	.\omsp_gpio.v	/^reg  [7:0] p3dir;$/;"	r
p3dir_nxt	.\omsp_gpio.v	/^wire [7:0] p3dir_nxt = P3DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p3dir_rd	.\omsp_gpio.v	/^wire [15:0] p3dir_rd  = {8'h00, (p3dir & {8{reg_rd[P3DIR]}})} << (8 & {4{P3DIR[0]}});$/;"	n
p3dir_wr	.\omsp_gpio.v	/^wire       p3dir_wr  = P3DIR[0] ? reg_hi_wr[P3DIR] : reg_lo_wr[P3DIR];$/;"	n
p3in	.\omsp_gpio.v	/^wire  [7:0] p3in;$/;"	n
p3in_rd	.\omsp_gpio.v	/^wire [15:0] p3in_rd   = {8'h00, (p3in  & {8{reg_rd[P3IN]}})}  << (8 & {4{P3IN[0]}});$/;"	n
p3out	.\omsp_gpio.v	/^reg  [7:0] p3out;$/;"	r
p3out_nxt	.\omsp_gpio.v	/^wire [7:0] p3out_nxt = P3OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p3out_rd	.\omsp_gpio.v	/^wire [15:0] p3out_rd  = {8'h00, (p3out & {8{reg_rd[P3OUT]}})} << (8 & {4{P3OUT[0]}});$/;"	n
p3out_wr	.\omsp_gpio.v	/^wire       p3out_wr  = P3OUT[0] ? reg_hi_wr[P3OUT] : reg_lo_wr[P3OUT];$/;"	n
p3sel	.\omsp_gpio.v	/^reg  [7:0] p3sel;$/;"	r
p3sel_nxt	.\omsp_gpio.v	/^wire [7:0] p3sel_nxt = P3SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p3sel_rd	.\omsp_gpio.v	/^wire [15:0] p3sel_rd  = {8'h00, (p3sel & {8{reg_rd[P3SEL]}})} << (8 & {4{P3SEL[0]}});$/;"	n
p3sel_wr	.\omsp_gpio.v	/^wire       p3sel_wr  = P3SEL[0] ? reg_hi_wr[P3SEL] : reg_lo_wr[P3SEL];$/;"	n
p4_din	.\omsp_gpio.v	/^input         [7:0] p4_din;         \/\/ Port 4 data input$/;"	p
p4_din	.\openMSP430_fpga.v	/^wire          [7:0] p4_din;$/;"	n
p4_dout	.\omsp_gpio.v	/^output        [7:0] p4_dout;        \/\/ Port 4 data output$/;"	p
p4_dout	.\openMSP430_fpga.v	/^wire         [7:0] p4_dout;$/;"	n
p4_dout_en	.\omsp_gpio.v	/^output        [7:0] p4_dout_en;     \/\/ Port 4 data output enable$/;"	p
p4_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p4_dout_en;$/;"	n
p4_sel	.\omsp_gpio.v	/^output        [7:0] p4_sel;         \/\/ Port 4 function select$/;"	p
p4_sel	.\openMSP430_fpga.v	/^wire         [7:0] p4_sel;$/;"	n
p4dir	.\omsp_gpio.v	/^reg  [7:0] p4dir;$/;"	r
p4dir_nxt	.\omsp_gpio.v	/^wire [7:0] p4dir_nxt = P4DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p4dir_rd	.\omsp_gpio.v	/^wire [15:0] p4dir_rd  = {8'h00, (p4dir & {8{reg_rd[P4DIR]}})} << (8 & {4{P4DIR[0]}});$/;"	n
p4dir_wr	.\omsp_gpio.v	/^wire       p4dir_wr  = P4DIR[0] ? reg_hi_wr[P4DIR] : reg_lo_wr[P4DIR];$/;"	n
p4in	.\omsp_gpio.v	/^wire  [7:0] p4in;$/;"	n
p4in_rd	.\omsp_gpio.v	/^wire [15:0] p4in_rd   = {8'h00, (p4in  & {8{reg_rd[P4IN]}})}  << (8 & {4{P4IN[0]}});$/;"	n
p4out	.\omsp_gpio.v	/^reg  [7:0] p4out;$/;"	r
p4out_nxt	.\omsp_gpio.v	/^wire [7:0] p4out_nxt = P4OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p4out_rd	.\omsp_gpio.v	/^wire [15:0] p4out_rd  = {8'h00, (p4out & {8{reg_rd[P4OUT]}})} << (8 & {4{P4OUT[0]}});$/;"	n
p4out_wr	.\omsp_gpio.v	/^wire       p4out_wr  = P4OUT[0] ? reg_hi_wr[P4OUT] : reg_lo_wr[P4OUT];$/;"	n
p4sel	.\omsp_gpio.v	/^reg  [7:0] p4sel;$/;"	r
p4sel_nxt	.\omsp_gpio.v	/^wire [7:0] p4sel_nxt = P4SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p4sel_rd	.\omsp_gpio.v	/^wire [15:0] p4sel_rd  = {8'h00, (p4sel & {8{reg_rd[P4SEL]}})} << (8 & {4{P4SEL[0]}});$/;"	n
p4sel_wr	.\omsp_gpio.v	/^wire       p4sel_wr  = P4SEL[0] ? reg_hi_wr[P4SEL] : reg_lo_wr[P4SEL];$/;"	n
p5_din	.\omsp_gpio.v	/^input         [7:0] p5_din;         \/\/ Port 5 data input$/;"	p
p5_din	.\openMSP430_fpga.v	/^wire          [7:0] p5_din;$/;"	n
p5_dout	.\omsp_gpio.v	/^output        [7:0] p5_dout;        \/\/ Port 5 data output$/;"	p
p5_dout	.\openMSP430_fpga.v	/^wire         [7:0] p5_dout;$/;"	n
p5_dout_en	.\omsp_gpio.v	/^output        [7:0] p5_dout_en;     \/\/ Port 5 data output enable$/;"	p
p5_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p5_dout_en;$/;"	n
p5_sel	.\omsp_gpio.v	/^output        [7:0] p5_sel;         \/\/ Port 5 function select$/;"	p
p5_sel	.\openMSP430_fpga.v	/^wire         [7:0] p5_sel;$/;"	n
p5dir	.\omsp_gpio.v	/^reg  [7:0] p5dir;$/;"	r
p5dir_nxt	.\omsp_gpio.v	/^wire [7:0] p5dir_nxt = P5DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p5dir_rd	.\omsp_gpio.v	/^wire [15:0] p5dir_rd  = {8'h00, (p5dir & {8{reg_rd[P5DIR]}})} << (8 & {4{P5DIR[0]}});$/;"	n
p5dir_wr	.\omsp_gpio.v	/^wire       p5dir_wr  = P5DIR[0] ? reg_hi_wr[P5DIR] : reg_lo_wr[P5DIR];$/;"	n
p5in	.\omsp_gpio.v	/^wire  [7:0] p5in;$/;"	n
p5in_rd	.\omsp_gpio.v	/^wire [15:0] p5in_rd   = {8'h00, (p5in  & {8{reg_rd[P5IN]}})}  << (8 & {4{P5IN[0]}});$/;"	n
p5out	.\omsp_gpio.v	/^reg  [7:0] p5out;$/;"	r
p5out_nxt	.\omsp_gpio.v	/^wire [7:0] p5out_nxt = P5OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p5out_rd	.\omsp_gpio.v	/^wire [15:0] p5out_rd  = {8'h00, (p5out & {8{reg_rd[P5OUT]}})} << (8 & {4{P5OUT[0]}});$/;"	n
p5out_wr	.\omsp_gpio.v	/^wire       p5out_wr  = P5OUT[0] ? reg_hi_wr[P5OUT] : reg_lo_wr[P5OUT];$/;"	n
p5sel	.\omsp_gpio.v	/^reg  [7:0] p5sel;$/;"	r
p5sel_nxt	.\omsp_gpio.v	/^wire [7:0] p5sel_nxt = P5SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p5sel_rd	.\omsp_gpio.v	/^wire [15:0] p5sel_rd  = {8'h00, (p5sel & {8{reg_rd[P5SEL]}})} << (8 & {4{P5SEL[0]}});$/;"	n
p5sel_wr	.\omsp_gpio.v	/^wire       p5sel_wr  = P5SEL[0] ? reg_hi_wr[P5SEL] : reg_lo_wr[P5SEL];$/;"	n
p6_din	.\omsp_gpio.v	/^input         [7:0] p6_din;         \/\/ Port 6 data input$/;"	p
p6_din	.\openMSP430_fpga.v	/^wire          [7:0] p6_din;$/;"	n
p6_dout	.\omsp_gpio.v	/^output        [7:0] p6_dout;        \/\/ Port 6 data output$/;"	p
p6_dout	.\openMSP430_fpga.v	/^wire         [7:0] p6_dout;$/;"	n
p6_dout_en	.\omsp_gpio.v	/^output        [7:0] p6_dout_en;     \/\/ Port 6 data output enable$/;"	p
p6_dout_en	.\openMSP430_fpga.v	/^wire         [7:0] p6_dout_en;$/;"	n
p6_sel	.\omsp_gpio.v	/^output        [7:0] p6_sel;         \/\/ Port 6 function select$/;"	p
p6_sel	.\openMSP430_fpga.v	/^wire         [7:0] p6_sel;$/;"	n
p6dir	.\omsp_gpio.v	/^reg  [7:0] p6dir;$/;"	r
p6dir_nxt	.\omsp_gpio.v	/^wire [7:0] p6dir_nxt = P6DIR[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p6dir_rd	.\omsp_gpio.v	/^wire [15:0] p6dir_rd  = {8'h00, (p6dir & {8{reg_rd[P6DIR]}})} << (8 & {4{P6DIR[0]}});$/;"	n
p6dir_wr	.\omsp_gpio.v	/^wire       p6dir_wr  = P6DIR[0] ? reg_hi_wr[P6DIR] : reg_lo_wr[P6DIR];$/;"	n
p6in	.\omsp_gpio.v	/^wire  [7:0] p6in;$/;"	n
p6in_rd	.\omsp_gpio.v	/^wire [15:0] p6in_rd   = {8'h00, (p6in  & {8{reg_rd[P6IN]}})}  << (8 & {4{P6IN[0]}});$/;"	n
p6out	.\omsp_gpio.v	/^reg  [7:0] p6out;$/;"	r
p6out_nxt	.\omsp_gpio.v	/^wire [7:0] p6out_nxt = P6OUT[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p6out_rd	.\omsp_gpio.v	/^wire [15:0] p6out_rd  = {8'h00, (p6out & {8{reg_rd[P6OUT]}})} << (8 & {4{P6OUT[0]}});$/;"	n
p6out_wr	.\omsp_gpio.v	/^wire       p6out_wr  = P6OUT[0] ? reg_hi_wr[P6OUT] : reg_lo_wr[P6OUT];$/;"	n
p6sel	.\omsp_gpio.v	/^reg  [7:0] p6sel;$/;"	r
p6sel_nxt	.\omsp_gpio.v	/^wire [7:0] p6sel_nxt = P6SEL[0] ? per_din[15:8]    : per_din[7:0];$/;"	n
p6sel_rd	.\omsp_gpio.v	/^wire [15:0] p6sel_rd  = {8'h00, (p6sel & {8{reg_rd[P6SEL]}})} << (8 & {4{P6SEL[0]}});$/;"	n
p6sel_wr	.\omsp_gpio.v	/^wire       p6sel_wr  = P6SEL[0] ? reg_hi_wr[P6SEL] : reg_lo_wr[P6SEL];$/;"	n
pad	.\io_cell.v	/^inout          pad;            \/\/ I\/O Pad$/;"	p
pad_regr	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] pad_regr;$/;"	r
padio	.\altera_mf.v	/^inout  [width-1:0] padio;$/;"	p
page_clk_divisor	.\altera_mf.v	/^    parameter    page_clk_divisor    =    1;$/;"	c
page_mode	.\altera_mf.v	/^    parameter    page_mode    =    0;$/;"	c
parallel_add	.\altera_mf.v	/^module parallel_add ($/;"	m
parallel_add	.\work\parallel_add\_primary.vhd	/^entity parallel_add is$/;"	e
param_found	.\altera_mf.v	/^    reg param_found; \/\/ to indicate whether compare_param_name have been found in the given_string$/;"	r
param_name	.\altera_mf.v	/^    reg [8*50:1] param_name;  \/\/ to store parameter name$/;"	r
param_name_char_count	.\altera_mf.v	/^    integer param_name_char_count;  \/\/ to indicate current character count in the param_name$/;"	r
param_value	.\altera_mf.v	/^    reg [8*20:1] param_value; \/\/ to store parameter value$/;"	r
param_value_char_count	.\altera_mf.v	/^    integer param_value_char_count; \/\/ to indicate current character count in the param_value$/;"	r
parameter	.\altera_mf.v	/^  parameter ST_WRITE = 2'd1,$/;"	c
parameter	.\altera_mf.v	/^  parameter avmm_master_rdata_width = 16,$/;"	c
parameter	.\altera_mf.v	/^  parameter avmm_slave_addr_width = 16, \/\/ tbd$/;"	c
parameter	.\altera_mf.v	/^  parameter avmm_slave_wdata_width = 16,$/;"	c
parameter	.\altera_mf.v	/^  parameter channel_address_width = 3,$/;"	c
parameter	.\altera_mf.v	/^  parameter dprio_addr_width = 16,$/;"	c
parameter	.\altera_mf.v	/^  parameter ireg_chaddr_width = channel_address_width,$/;"	c
parameter	.\altera_mf.v	/^  parameter ireg_data_width   = 16,$/;"	c
parameter	.\altera_mf.v	/^  parameter lpm_hint = "UNUSED"$/;"	c
parameter	.\altera_mf.v	/^  parameter lpm_type = "alt_dfe",$/;"	c
parameter	.\altera_mf.v	/^  parameter lpm_type = "alt_eyemon",$/;"	c
parameter	.\altera_mf.v	/^  parameter radce_hflck = 15'h0000, \/\/ settings for RADCE_HFLCK CRAM settings - get values from ICD$/;"	c
parameter	.\altera_mf.v	/^  parameter use_hw_conv_det = 1'b0, \/\/ use hardware convergence detect macro if set to 1'b1 - else, default to soft ip.$/;"	c
pattern	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] pattern;$/;"	r
pc	.\omsp_dbg.v	/^input        [15:0] pc;                \/\/ Program counter$/;"	p
pc	.\omsp_dbg_hwbrk.v	/^input   [15:0] pc;           \/\/ Program counter$/;"	p
pc	.\omsp_execution_unit.v	/^input        [15:0] pc;            \/\/ Program counter$/;"	p
pc	.\omsp_frontend.v	/^output        [15:0] pc;               \/\/ Program counter$/;"	p
pc	.\omsp_frontend.v	/^reg  [15:0] pc;$/;"	r
pc	.\omsp_register_file.v	/^input        [15:0] pc;           \/\/ Program counter$/;"	p
pc	.\openMSP430.v	/^wire          [15:0] pc;$/;"	n
pc_en	.\omsp_frontend.v	/^wire       pc_en  = fetch                  |$/;"	n
pc_incr	.\omsp_frontend.v	/^wire [15:0] pc_incr = pc + {14'h0000, fetch, 1'b0};$/;"	n
pc_nxt	.\omsp_execution_unit.v	/^input        [15:0] pc_nxt;        \/\/ Next PC value (for CALL & IRQ)$/;"	p
pc_nxt	.\omsp_frontend.v	/^output        [15:0] pc_nxt;           \/\/ Next PC value (for CALL & IRQ)$/;"	p
pc_nxt	.\omsp_frontend.v	/^wire [15:0] pc_nxt  = pc_sw_wr               ? pc_sw    :$/;"	n
pc_nxt	.\openMSP430.v	/^wire          [15:0] pc_nxt;$/;"	n
pc_sw	.\omsp_execution_unit.v	/^output       [15:0] pc_sw;         \/\/ Program counter software value$/;"	p
pc_sw	.\omsp_frontend.v	/^input         [15:0] pc_sw;            \/\/ Program counter software value$/;"	p
pc_sw	.\omsp_register_file.v	/^output       [15:0] pc_sw;        \/\/ Program counter software value$/;"	p
pc_sw	.\omsp_register_file.v	/^wire [15:0] pc_sw    = reg_dest_val_in;$/;"	n
pc_sw	.\openMSP430.v	/^wire          [15:0] pc_sw;$/;"	n
pc_sw_wr	.\omsp_execution_unit.v	/^output              pc_sw_wr;      \/\/ Program counter software write$/;"	p
pc_sw_wr	.\omsp_frontend.v	/^input                pc_sw_wr;         \/\/ Program counter software write$/;"	p
pc_sw_wr	.\omsp_register_file.v	/^output              pc_sw_wr;     \/\/ Program counter software write$/;"	p
pc_sw_wr	.\omsp_register_file.v	/^wire        pc_sw_wr = (inst_dest[0] & reg_dest_wr) | reg_pc_call;$/;"	n
pc_sw_wr	.\openMSP430.v	/^wire                 pc_sw_wr;$/;"	n
per_addr	.\dma_decode_16b.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\dma_tfbuffer.v	/^ input          [13:0]      per_addr;$/;"	p
per_addr	.\omsp_clock_module.v	/^input        [13:0] per_addr;         \/\/ Peripheral address$/;"	p
per_addr	.\omsp_clock_module.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
per_addr	.\omsp_gpio.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\omsp_gpio.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
per_addr	.\omsp_mem_backbone.v	/^output        [13:0] per_addr;          \/\/ Peripheral address$/;"	p
per_addr	.\omsp_mem_backbone.v	/^wire        [13:0] per_addr      =  per_addr_ful[13:0];$/;"	n
per_addr	.\omsp_multiplier.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\omsp_sfr.v	/^input        [13:0] per_addr;     \/\/ Peripheral address$/;"	p
per_addr	.\omsp_sfr.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
per_addr	.\omsp_timerA.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\omsp_watchdog.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\openMSP430.v	/^output        [13:0] per_addr;               \/\/ Peripheral address$/;"	p
per_addr	.\openMSP430_fpga.v	/^wire        [13:0] per_addr;$/;"	n
per_addr	.\template_periph_16b.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr	.\template_periph_8b.v	/^input       [13:0] per_addr;        \/\/ Peripheral address$/;"	p
per_addr	.\template_periph_8b.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
per_addr	.\uart_top.v	/^input        [13:0] per_addr;       \/\/ Peripheral address$/;"	p
per_addr_ful	.\omsp_mem_backbone.v	/^wire        [14:0] per_addr_ful  =  {{15-`PER_AWIDTH{1'b0}}, per_addr_mux};$/;"	n
per_addr_mux	.\omsp_mem_backbone.v	/^wire        [14:0] per_addr_ful  =  {{15-`PER_AWIDTH{1'b0}}, per_addr_mux};$/;"	n
per_addr_mux	.\omsp_mem_backbone.v	/^wire  [`PER_MSB:0] per_addr_mux  =  ext_per_en ? ext_mem_addr[`PER_MSB+1:1] : eu_mab[`PER_MSB:0];$/;"	n
per_din	.\dma_decode_16b.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\dma_tfbuffer.v	/^ input          [15:0]      per_din;$/;"	p
per_din	.\omsp_clock_module.v	/^input        [15:0] per_din;          \/\/ Peripheral data input$/;"	p
per_din	.\omsp_gpio.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\omsp_mem_backbone.v	/^output        [15:0] per_din;           \/\/ Peripheral data input$/;"	p
per_din	.\omsp_mem_backbone.v	/^wire        [15:0] per_din       =  ext_per_en ? ext_mem_dout               : eu_mdb_out;$/;"	n
per_din	.\omsp_multiplier.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\omsp_sfr.v	/^input        [15:0] per_din;      \/\/ Peripheral data input$/;"	p
per_din	.\omsp_timerA.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\omsp_watchdog.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\openMSP430.v	/^output        [15:0] per_din;                \/\/ Peripheral data input$/;"	p
per_din	.\openMSP430_fpga.v	/^wire        [15:0] per_din;$/;"	n
per_din	.\template_periph_16b.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din	.\template_periph_8b.v	/^input       [15:0] per_din;         \/\/ Peripheral data input$/;"	p
per_din	.\uart_top.v	/^input        [15:0] per_din;        \/\/ Peripheral data input$/;"	p
per_din_msk	.\omsp_multiplier.v	/^wire       [15:0] per_din_msk =  per_din & {{8{per_we[1]}}, 8'hff};$/;"	n
per_dout	.\dma_decode_16b.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\dma_decode_16b.v	/^wire [15:0] per_dout   =  dma_ctl0_rd  |$/;"	n
per_dout	.\dma_tfbuffer.v	/^ output         [15:0]      per_dout;$/;"	p
per_dout	.\dma_tfbuffer.v	/^wire [15:0] per_dout  =  decoder_buffer_dout_rd           |$/;"	n
per_dout	.\omsp_clock_module.v	/^output       [15:0] per_dout;         \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_clock_module.v	/^wire [15:0] per_dout =  bcsctl1_rd   |$/;"	n
per_dout	.\omsp_gpio.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_gpio.v	/^wire [15:0] per_dout  =  p1in_rd   |$/;"	n
per_dout	.\omsp_mem_backbone.v	/^input         [15:0] per_dout;          \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_multiplier.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_multiplier.v	/^wire [15:0] per_dout   = op1_mux    |$/;"	n
per_dout	.\omsp_sfr.v	/^output       [15:0] per_dout;     \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_sfr.v	/^wire [15:0] per_dout =  ie1_rd       |$/;"	n
per_dout	.\omsp_timerA.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_timerA.v	/^wire [15:0] per_dout   =  tactl_rd   |$/;"	n
per_dout	.\omsp_watchdog.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\omsp_watchdog.v	/^wire [15:0] per_dout   =  wdtctl_rd;$/;"	n
per_dout	.\openMSP430.v	/^input         [15:0] per_dout;               \/\/ Peripheral data output$/;"	p
per_dout	.\openMSP430_fpga.v	/^wire        [15:0] per_dout;$/;"	n
per_dout	.\template_periph_16b.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout	.\template_periph_16b.v	/^wire [15:0] per_dout   =  cntrl1_rd  |$/;"	n
per_dout	.\template_periph_8b.v	/^output      [15:0] per_dout;        \/\/ Peripheral data output$/;"	p
per_dout	.\template_periph_8b.v	/^wire [15:0] per_dout  =  cntrl1_rd  |$/;"	n
per_dout	.\uart_top.v	/^output       [15:0] per_dout;       \/\/ Peripheral data output$/;"	p
per_dout_clk	.\openMSP430.v	/^wire          [15:0] per_dout_clk;$/;"	n
per_dout_d2v	.\openMSP430_fpga.v	/^wire    [15:0]     per_dout_d2v;$/;"	n
per_dout_dio	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_dio;$/;"	n
per_dout_dma	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_dma;$/;"	n
per_dout_mpy	.\openMSP430.v	/^wire          [15:0] per_dout_mpy;$/;"	n
per_dout_or	.\openMSP430.v	/^wire          [15:0] per_dout_or;$/;"	n
per_dout_sfr	.\openMSP430.v	/^wire          [15:0] per_dout_sfr;$/;"	n
per_dout_temp_16b	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_temp_16b;$/;"	n
per_dout_temp_8b	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_temp_8b;$/;"	n
per_dout_timerA	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_timerA;$/;"	n
per_dout_uart	.\openMSP430_fpga.v	/^wire        [15:0] per_dout_uart;$/;"	n
per_dout_val	.\omsp_mem_backbone.v	/^reg   [15:0] per_dout_val;$/;"	r
per_dout_wdog	.\openMSP430.v	/^wire          [15:0] per_dout_wdog;$/;"	n
per_en	.\dma_decode_16b.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\dma_tfbuffer.v	/^ input                      per_en;$/;"	p
per_en	.\omsp_clock_module.v	/^input               per_en;           \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_gpio.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_mem_backbone.v	/^output               per_en;            \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_mem_backbone.v	/^wire               per_en        =  ext_per_en | eu_per_en;$/;"	n
per_en	.\omsp_multiplier.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_sfr.v	/^input               per_en;       \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_timerA.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\omsp_watchdog.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\openMSP430.v	/^output               per_en;                 \/\/ Peripheral enable (high active)$/;"	p
per_en	.\openMSP430_fpga.v	/^wire               per_en;$/;"	n
per_en	.\template_periph_16b.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_en	.\template_periph_8b.v	/^input              per_en;          \/\/ Peripheral enable (high active)$/;"	p
per_en	.\uart_top.v	/^input               per_en;         \/\/ Peripheral enable (high active)$/;"	p
per_space	.\omsp_sfr.v	/^wire  [6:0] per_space    = (`PER_SIZE  >> 9);  \/\/ cpu_id_per  *  512 = peripheral space size$/;"	n
per_we	.\dma_decode_16b.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\dma_tfbuffer.v	/^ input          [1:0]       per_we;$/;"	p
per_we	.\omsp_clock_module.v	/^input         [1:0] per_we;           \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_gpio.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_mem_backbone.v	/^output         [1:0] per_we;            \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_mem_backbone.v	/^wire         [1:0] per_we        =  ext_per_en ? ext_mem_wr                 : eu_mb_wr;$/;"	n
per_we	.\omsp_multiplier.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_sfr.v	/^input         [1:0] per_we;       \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_timerA.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\omsp_watchdog.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\openMSP430.v	/^output         [1:0] per_we;                 \/\/ Peripheral write byte enable (high active)$/;"	p
per_we	.\openMSP430_fpga.v	/^wire         [1:0] per_we;$/;"	n
per_we	.\template_periph_16b.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\template_periph_8b.v	/^input        [1:0] per_we;          \/\/ Peripheral write enable (high active)$/;"	p
per_we	.\uart_top.v	/^input         [1:0] per_we;         \/\/ Peripheral write enable (high active)$/;"	p
pfd_freq	.\altera_mf.v	/^        integer pfd_freq;$/;"	r
pfd_locked	.\altera_mf.v	/^    reg pfd_locked;$/;"	r
pfd_max	.\altera_mf.v	/^    parameter pfd_max                              = 0;$/;"	c
pfd_max	.\altera_mf.v	/^    parameter pfd_max = 0;$/;"	c
pfd_max	.\altera_mf.v	/^parameter   pfd_max             = 0;$/;"	c
pfd_min	.\altera_mf.v	/^    parameter pfd_min                              = 0;$/;"	c
pfd_min	.\altera_mf.v	/^    parameter pfd_min = 0;$/;"	c
pfd_min	.\altera_mf.v	/^parameter   pfd_min             = 0;$/;"	c
pfdena	.\altera_mf.v	/^    input pfdena;$/;"	p
pfdena	.\altera_mf.v	/^input       pfdena;$/;"	p
pfdena_ipd	.\altera_mf.v	/^    wire pfdena_ipd;$/;"	n
pfdena_ipd_last_value	.\altera_mf.v	/^    reg pfdena_ipd_last_value;$/;"	r
pfdena_last_value	.\altera_mf.v	/^    reg pfdena_last_value;$/;"	r
pfdena_pullup	.\altera_mf.v	/^tri1 pfdena_pullup;$/;"	n
pfdena_wire	.\altera_mf.v	/^    wire pfdena_wire;$/;"	n
pfl_clk	.\altera_mf.v	/^    input    pfl_clk;$/;"	p
pfl_flash_access_granted	.\altera_mf.v	/^    input    pfl_flash_access_granted;$/;"	p
pfl_flash_access_request	.\altera_mf.v	/^    output    pfl_flash_access_request;$/;"	p
pfl_nreconfigure	.\altera_mf.v	/^    input    pfl_nreconfigure;$/;"	p
pfl_nreset	.\altera_mf.v	/^    input    pfl_nreset;$/;"	p
pfl_reset_watchdog	.\altera_mf.v	/^    input    pfl_reset_watchdog;$/;"	p
pfl_rsu_watchdog_enabled	.\altera_mf.v	/^    parameter    pfl_rsu_watchdog_enabled    =    0;$/;"	c
pfl_watchdog_error	.\altera_mf.v	/^    output    pfl_watchdog_error;$/;"	p
ph_base	.\altera_mf.v	/^    input tap_phase, ph_base;$/;"	p
ph_base	.\altera_mf.v	/^    integer tap_phase, ph_base;$/;"	r
ph_tap	.\altera_mf.v	/^    input [31:0] ph_tap;$/;"	p
phase	.\altera_mf.v	/^    integer m,n, phase;$/;"	r
phase	.\altera_mf.v	/^    integer tap_phase, m, n, phase;$/;"	r
phase_adjust_was_scheduled	.\altera_mf.v	/^    reg phase_adjust_was_scheduled;$/;"	r
phase_counter_select_width	.\altera_mf.v	/^    parameter phase_counter_select_width = 3;$/;"	c
phase_counter_select_width	.\altera_mf.v	/^    parameter phase_counter_select_width = 4;$/;"	c
phase_shift	.\altera_mf.v	/^    input phase_shift;$/;"	p
phase_shift	.\altera_mf.v	/^    integer phase_shift, result;$/;"	r
phase_shift	.\altera_mf.v	/^    integer phase_shift[0:7];$/;"	r
phase_shift	.\altera_mf.v	/^    time phase_shift[0:7];$/;"	r
phase_shift_txdata	.\altera_mf.v	/^    reg [9 : 0] phase_shift_txdata;$/;"	r
phasecounterselect	.\altera_mf.v	/^    input [phase_counter_select_width - 1:0] phasecounterselect;$/;"	p
phasecounterselect	.\altera_mf.v	/^input       [width_phasecounterselect-1:0] phasecounterselect;$/;"	p
phasecounterselect_ipd	.\altera_mf.v	/^    wire [phase_counter_select_width - 1:0] phasecounterselect_ipd;$/;"	n
phasecounterselect_pulldown	.\altera_mf.v	/^tri0 [3:0] phasecounterselect_pulldown;$/;"	n
phasecounterselect_reg	.\altera_mf.v	/^    reg [2:0] phasecounterselect_reg;$/;"	r
phasecounterselect_reg	.\altera_mf.v	/^    reg [3:0] phasecounterselect_reg;$/;"	r
phasedone	.\altera_mf.v	/^    output phasedone;$/;"	p
phasedone	.\altera_mf.v	/^output        phasedone;$/;"	p
phasedone_wire	.\altera_mf.v	/^wire phasedone_wire;$/;"	n
phasestep	.\altera_mf.v	/^    input phasestep;$/;"	p
phasestep	.\altera_mf.v	/^input       phasestep;$/;"	p
phasestep_high_count	.\altera_mf.v	/^    integer phasestep_high_count;$/;"	r
phasestep_ipd	.\altera_mf.v	/^    wire phasestep_ipd;$/;"	n
phasestep_pulldown	.\altera_mf.v	/^tri0 phasestep_pulldown;$/;"	n
phasestep_reg	.\altera_mf.v	/^    reg phasestep_reg;$/;"	r
phaseupdown	.\altera_mf.v	/^    input phaseupdown;$/;"	p
phaseupdown	.\altera_mf.v	/^input       phaseupdown;$/;"	p
phaseupdown_ipd	.\altera_mf.v	/^    wire phaseupdown_ipd;$/;"	n
phaseupdown_pulldown	.\altera_mf.v	/^tri0 phaseupdown_pulldown;$/;"	n
phaseupdown_reg	.\altera_mf.v	/^    reg phaseupdown_reg;$/;"	r
pipe_ptr	.\altera_mf.v	/^    integer pipe_ptr;$/;"	r
pipeline	.\altera_mf.v	/^    parameter pipeline = 0;     \/\/ The latency for the output$/;"	c
pipeline	.\altera_mf.v	/^    parameter pipeline = 0;$/;"	c
pipeline	.\altera_mf.v	/^    parameter pipeline = 5;$/;"	c
place	.\altera_mf.v	/^    integer place;$/;"	r
pll_about_to_lock	.\altera_mf.v	/^    reg pll_about_to_lock;$/;"	r
pll_areset	.\altera_mf.v	/^    input pll_areset;$/;"	p
pll_areset	.\altera_mf.v	/^    tri0 pll_areset;$/;"	n
pll_compensation_delay	.\altera_mf.v	/^    parameter pll_compensation_delay = 0;$/;"	c
pll_compensation_mode	.\altera_mf.v	/^    parameter pll_compensation_mode = "AUTO";$/;"	c
pll_duty_cycle	.\altera_mf.v	/^real pll_duty_cycle;$/;"	r
pll_has_just_been_reconfigured	.\altera_mf.v	/^    reg pll_has_just_been_reconfigured;$/;"	r
pll_in_quiet_period	.\altera_mf.v	/^    reg pll_in_quiet_period;$/;"	r
pll_in_test_mode	.\altera_mf.v	/^    reg pll_in_test_mode;$/;"	r
pll_iobuf	.\altera_mf.v	/^module pll_iobuf (i, oe, io, o);$/;"	m
pll_iobuf	.\work\pll_iobuf\_primary.vhd	/^entity pll_iobuf is$/;"	e
pll_is_disabled	.\altera_mf.v	/^    reg pll_is_disabled;$/;"	r
pll_is_in_reset	.\altera_mf.v	/^    reg pll_is_in_reset;$/;"	r
pll_is_locked	.\altera_mf.v	/^    reg pll_is_locked;$/;"	r
pll_last_falling_edge	.\altera_mf.v	/^real pll_last_falling_edge;$/;"	r
pll_last_rising_edge	.\altera_mf.v	/^real pll_last_rising_edge;$/;"	r
pll_lock	.\altera_mf.v	/^reg pll_lock;$/;"	r
pll_lock	.\altera_mf.v	/^wire pll_lock;$/;"	n
pll_lock_sync	.\altera_mf.v	/^    reg pll_lock_sync;$/;"	r
pll_lock_sync	.\altera_mf.v	/^reg pll_lock_sync;$/;"	r
pll_locked	.\altera_mf.v	/^    wire pll_locked;$/;"	n
pll_operation_mode	.\altera_mf.v	/^    parameter pll_operation_mode = "NORMAL";$/;"	c
pll_outclock	.\altera_mf.v	/^    input pll_outclock;$/;"	p
pll_phasecounterselect	.\altera_mf.v	/^    output [3: 0] pll_phasecounterselect;$/;"	p
pll_phasedone	.\altera_mf.v	/^    input pll_phasedone;$/;"	p
pll_phasedone	.\altera_mf.v	/^    tri1 pll_phasedone;$/;"	n
pll_phasestep	.\altera_mf.v	/^    output pll_phasestep;$/;"	p
pll_phaseupdown	.\altera_mf.v	/^    output pll_phaseupdown;$/;"	p
pll_reconfig_display_full_setting	.\altera_mf.v	/^    reg pll_reconfig_display_full_setting;$/;"	r
pll_rising_edge_count	.\altera_mf.v	/^integer pll_rising_edge_count;$/;"	r
pll_scanclk	.\altera_mf.v	/^    output pll_scanclk;$/;"	p
pll_self_reset_on_loss_lock	.\altera_mf.v	/^    parameter pll_self_reset_on_loss_lock = "OFF";$/;"	c
pll_type	.\altera_mf.v	/^    parameter pll_type                             = "auto"; \/\/ auto,fast(left_right),enhanced(top_bottom)$/;"	c
pll_type	.\altera_mf.v	/^    parameter pll_type                             = "auto";$/;"	c
pll_type	.\altera_mf.v	/^    parameter pll_type = "auto";$/;"	c
pll_type	.\altera_mf.v	/^parameter   pll_type                  = "AUTO" ;$/;"	c
pllena	.\altera_mf.v	/^input       pllena;$/;"	p
pllena_reg	.\altera_mf.v	/^    wire pllena_reg;$/;"	n
pma_base_address	.\altera_mf.v	/^        parameter pma_base_address = 12'h0;$/;"	c
pmem_addr	.\omsp_mem_backbone.v	/^output [`PMEM_MSB:0] pmem_addr;         \/\/ Program Memory address$/;"	p
pmem_addr	.\omsp_mem_backbone.v	/^wire [`PMEM_MSB:0] pmem_addr     =  ext_pmem_en ?  ext_pmem_addr[`PMEM_MSB:0] :$/;"	n
pmem_addr	.\openMSP430.v	/^output [`PMEM_MSB:0] pmem_addr;              \/\/ Program Memory address$/;"	p
pmem_addr	.\openMSP430_fpga.v	/^wire [`PMEM_MSB:0] pmem_addr;$/;"	n
pmem_busy	.\omsp_frontend.v	/^reg pmem_busy;$/;"	r
pmem_cen	.\omsp_mem_backbone.v	/^output               pmem_cen;          \/\/ Program Memory chip enable (low active)$/;"	p
pmem_cen	.\omsp_mem_backbone.v	/^wire               pmem_cen      = ~(fe_pmem_en | eu_pmem_en | ext_pmem_en);$/;"	n
pmem_cen	.\openMSP430.v	/^output               pmem_cen;               \/\/ Program Memory chip enable (low active)$/;"	p
pmem_cen	.\openMSP430_fpga.v	/^wire               pmem_cen;$/;"	n
pmem_din	.\omsp_mem_backbone.v	/^output        [15:0] pmem_din;          \/\/ Program Memory data input (optional)$/;"	p
pmem_din	.\omsp_mem_backbone.v	/^wire        [15:0] pmem_din      =  ext_mem_dout;$/;"	n
pmem_din	.\openMSP430.v	/^output        [15:0] pmem_din;               \/\/ Program Memory data input (optional)$/;"	p
pmem_din	.\openMSP430_fpga.v	/^wire        [15:0] pmem_din;$/;"	n
pmem_dout	.\omsp_mem_backbone.v	/^input         [15:0] pmem_dout;         \/\/ Program Memory data output$/;"	p
pmem_dout	.\openMSP430.v	/^input         [15:0] pmem_dout;              \/\/ Program Memory data output$/;"	p
pmem_dout	.\openMSP430_fpga.v	/^wire        [15:0] pmem_dout;$/;"	n
pmem_dout_bckup	.\omsp_mem_backbone.v	/^reg  [15:0] pmem_dout_bckup;$/;"	r
pmem_dout_bckup_sel	.\omsp_mem_backbone.v	/^reg         pmem_dout_bckup_sel;$/;"	r
pmem_size	.\omsp_sfr.v	/^wire  [5:0] pmem_size    = (`PMEM_SIZE >> 10); \/\/ cpu_id_pmem * 1024 = program memory size$/;"	n
pmem_wen	.\omsp_mem_backbone.v	/^output         [1:0] pmem_wen;          \/\/ Program Memory write enable (low active) (optional)$/;"	p
pmem_wen	.\omsp_mem_backbone.v	/^wire         [1:0] pmem_wen      =  ext_pmem_en ? ~ext_mem_wr                 : 2'b11;$/;"	n
pmem_wen	.\openMSP430.v	/^output         [1:0] pmem_wen;               \/\/ Program Memory write enable (low active) (optional)$/;"	p
pmem_wen	.\openMSP430_fpga.v	/^wire         [1:0] pmem_wen;$/;"	n
por	.\omsp_clock_module.v	/^output              por;              \/\/ Power-on reset$/;"	p
por	.\omsp_watchdog.v	/^input               por;            \/\/ Power-on reset$/;"	p
por	.\openMSP430.v	/^wire                 por;$/;"	n
por_a	.\omsp_clock_module.v	/^wire por_a;$/;"	n
por_noscan	.\omsp_clock_module.v	/^wire      por_noscan;$/;"	n
port_a_bit_count_high	.\altera_mf.v	/^    integer port_a_bit_count_high;$/;"	r
port_a_bit_count_low	.\altera_mf.v	/^    integer port_a_bit_count_low;$/;"	r
port_accum_is_saturated	.\altera_mf.v	/^    parameter port_accum_is_saturated = "UNUSED";$/;"	c
port_activeclock	.\altera_mf.v	/^parameter port_activeclock = "PORT_CONNECTIVITY";$/;"	c
port_addnsub	.\altera_mf.v	/^    parameter port_addnsub              = "PORT_CONNECTIVITY";$/;"	c
port_addnsub1	.\altera_mf.v	/^    parameter port_addnsub1                         = "PORT_CONNECTIVITY";$/;"	c
port_addnsub3	.\altera_mf.v	/^    parameter port_addnsub3                         = "PORT_CONNECTIVITY";$/;"	c
port_areset	.\altera_mf.v	/^parameter port_areset = "PORT_CONNECTIVITY";$/;"	c
port_b_bit_count_high	.\altera_mf.v	/^    integer port_b_bit_count_high;$/;"	r
port_b_bit_count_low	.\altera_mf.v	/^    integer port_b_bit_count_low;$/;"	r
port_chainout_sat_is_overflow	.\altera_mf.v	/^    parameter port_chainout_sat_is_overflow = "PORT_UNUSED";$/;"	c
port_clk0	.\altera_mf.v	/^parameter port_clk0 = "PORT_CONNECTIVITY";$/;"	c
port_clk1	.\altera_mf.v	/^parameter port_clk1 = "PORT_CONNECTIVITY";$/;"	c
port_clk2	.\altera_mf.v	/^parameter port_clk2 = "PORT_CONNECTIVITY";$/;"	c
port_clk3	.\altera_mf.v	/^parameter port_clk3 = "PORT_CONNECTIVITY";$/;"	c
port_clk4	.\altera_mf.v	/^parameter port_clk4 = "PORT_CONNECTIVITY";$/;"	c
port_clk5	.\altera_mf.v	/^parameter port_clk5 = "PORT_CONNECTIVITY";$/;"	c
port_clk6	.\altera_mf.v	/^parameter port_clk6 = "PORT_CONNECTIVITY";$/;"	c
port_clk7	.\altera_mf.v	/^parameter port_clk7 = "PORT_CONNECTIVITY";$/;"	c
port_clk8	.\altera_mf.v	/^parameter port_clk8 = "PORT_CONNECTIVITY";$/;"	c
port_clk9	.\altera_mf.v	/^parameter port_clk9 = "PORT_CONNECTIVITY";$/;"	c
port_clkbad0	.\altera_mf.v	/^parameter port_clkbad0 = "PORT_CONNECTIVITY";$/;"	c
port_clkbad1	.\altera_mf.v	/^parameter port_clkbad1 = "PORT_CONNECTIVITY";$/;"	c
port_clkena0	.\altera_mf.v	/^parameter port_clkena0 = "PORT_CONNECTIVITY";$/;"	c
port_clkena1	.\altera_mf.v	/^parameter port_clkena1 = "PORT_CONNECTIVITY";$/;"	c
port_clkena2	.\altera_mf.v	/^parameter port_clkena2 = "PORT_CONNECTIVITY";$/;"	c
port_clkena3	.\altera_mf.v	/^parameter port_clkena3 = "PORT_CONNECTIVITY";$/;"	c
port_clkena4	.\altera_mf.v	/^parameter port_clkena4 = "PORT_CONNECTIVITY";$/;"	c
port_clkena5	.\altera_mf.v	/^parameter port_clkena5 = "PORT_CONNECTIVITY";$/;"	c
port_clkloss	.\altera_mf.v	/^parameter port_clkloss = "PORT_CONNECTIVITY";$/;"	c
port_clkswitch	.\altera_mf.v	/^parameter port_clkswitch = "PORT_CONNECTIVITY";$/;"	c
port_configupdate	.\altera_mf.v	/^parameter port_configupdate = "PORT_CONNECTIVITY";$/;"	c
port_enable0	.\altera_mf.v	/^parameter port_enable0 = "PORT_CONNECTIVITY";$/;"	c
port_enable1	.\altera_mf.v	/^parameter port_enable1 = "PORT_CONNECTIVITY";$/;"	c
port_extclk0	.\altera_mf.v	/^parameter port_extclk0 = "PORT_CONNECTIVITY";$/;"	c
port_extclk1	.\altera_mf.v	/^parameter port_extclk1 = "PORT_CONNECTIVITY";$/;"	c
port_extclk2	.\altera_mf.v	/^parameter port_extclk2 = "PORT_CONNECTIVITY";$/;"	c
port_extclk3	.\altera_mf.v	/^parameter port_extclk3 = "PORT_CONNECTIVITY";$/;"	c
port_extclkena0	.\altera_mf.v	/^parameter port_extclkena0 = "PORT_CONNECTIVITY";$/;"	c
port_extclkena1	.\altera_mf.v	/^parameter port_extclkena1 = "PORT_CONNECTIVITY";$/;"	c
port_extclkena2	.\altera_mf.v	/^parameter port_extclkena2 = "PORT_CONNECTIVITY";$/;"	c
port_extclkena3	.\altera_mf.v	/^parameter port_extclkena3 = "PORT_CONNECTIVITY";$/;"	c
port_fbin	.\altera_mf.v	/^parameter port_fbin = "PORT_CONNECTIVITY";$/;"	c
port_fbout	.\altera_mf.v	/^parameter port_fbout = "PORT_CONNECTIVITY";$/;"	c
port_inclk0	.\altera_mf.v	/^parameter port_inclk0 = "PORT_CONNECTIVITY";$/;"	c
port_inclk1	.\altera_mf.v	/^parameter port_inclk1 = "PORT_CONNECTIVITY";$/;"	c
port_locked	.\altera_mf.v	/^parameter port_locked = "PORT_CONNECTIVITY";$/;"	c
port_mult0_is_saturated	.\altera_mf.v	/^    parameter port_mult0_is_saturated = "UNUSED";$/;"	c
port_mult1_is_saturated	.\altera_mf.v	/^    parameter port_mult1_is_saturated = "UNUSED";$/;"	c
port_mult2_is_saturated	.\altera_mf.v	/^    parameter port_mult2_is_saturated = "UNUSED";$/;"	c
port_mult3_is_saturated	.\altera_mf.v	/^    parameter port_mult3_is_saturated = "UNUSED";$/;"	c
port_mult_is_saturated	.\altera_mf.v	/^    parameter port_mult_is_saturated = "UNUSED";$/;"	c
port_output_is_overflow	.\altera_mf.v	/^    parameter port_output_is_overflow = "PORT_UNUSED";$/;"	c
port_pfdena	.\altera_mf.v	/^parameter port_pfdena = "PORT_CONNECTIVITY";$/;"	c
port_phasecounterselect	.\altera_mf.v	/^parameter port_phasecounterselect = "PORT_CONNECTIVITY";$/;"	c
port_phasedone	.\altera_mf.v	/^parameter port_phasedone = "PORT_CONNECTIVITY";$/;"	c
port_phasestep	.\altera_mf.v	/^parameter port_phasestep = "PORT_CONNECTIVITY";$/;"	c
port_phaseupdown	.\altera_mf.v	/^parameter port_phaseupdown = "PORT_CONNECTIVITY";$/;"	c
port_pllena	.\altera_mf.v	/^parameter port_pllena = "PORT_CONNECTIVITY";$/;"	c
port_rx_channel_data_align	.\altera_mf.v	/^    parameter port_rx_channel_data_align = "PORT_CONNECTIVITY";$/;"	c
port_rx_data_align	.\altera_mf.v	/^    parameter port_rx_data_align = "PORT_CONNECTIVITY";$/;"	c
port_scanaclr	.\altera_mf.v	/^parameter port_scanaclr = "PORT_CONNECTIVITY";$/;"	c
port_scanclk	.\altera_mf.v	/^parameter port_scanclk = "PORT_CONNECTIVITY";$/;"	c
port_scanclkena	.\altera_mf.v	/^parameter port_scanclkena = "PORT_CONNECTIVITY";$/;"	c
port_scandata	.\altera_mf.v	/^parameter port_scandata = "PORT_CONNECTIVITY";$/;"	c
port_scandataout	.\altera_mf.v	/^parameter port_scandataout = "PORT_CONNECTIVITY";$/;"	c
port_scandone	.\altera_mf.v	/^parameter port_scandone = "PORT_CONNECTIVITY";$/;"	c
port_scanread	.\altera_mf.v	/^parameter port_scanread = "PORT_CONNECTIVITY";$/;"	c
port_scanwrite	.\altera_mf.v	/^parameter port_scanwrite = "PORT_CONNECTIVITY";$/;"	c
port_sclkout0	.\altera_mf.v	/^parameter port_sclkout0 = "PORT_CONNECTIVITY";$/;"	c
port_sclkout1	.\altera_mf.v	/^parameter port_sclkout1 = "PORT_CONNECTIVITY";$/;"	c
port_signa	.\altera_mf.v	/^    parameter port_signa                 = "PORT_CONNECTIVITY";$/;"	c
port_signa	.\altera_mf.v	/^    parameter port_signa                = "PORT_CONNECTIVITY";$/;"	c
port_signb	.\altera_mf.v	/^    parameter port_signb                 = "PORT_CONNECTIVITY";$/;"	c
port_signb	.\altera_mf.v	/^    parameter port_signb                = "PORT_CONNECTIVITY";$/;"	c
port_vcooverrange	.\altera_mf.v	/^parameter port_vcooverrange = "PORT_CONNECTIVITY";$/;"	c
port_vcounderrange	.\altera_mf.v	/^parameter port_vcounderrange = "PORT_CONNECTIVITY";$/;"	c
pos_data_value	.\altera_mf.v	/^    reg [data_width - 1 : 0] pos_data_value;$/;"	r
power_up_high	.\altera_mf.v	/^parameter power_up_high = "OFF";$/;"	c
power_up_state	.\altera_mf.v	/^    parameter power_up_state = "CLEARED";$/;"	c
power_up_uninitialized	.\altera_mf.v	/^    parameter power_up_uninitialized             = "FALSE";$/;"	c
power_up_uninitialized	.\altera_mf.v	/^    parameter power_up_uninitialized            = "FALSE";$/;"	c
ppm_offset	.\altera_mf.v	/^    integer ppm_offset;$/;"	r
pre_m	.\altera_mf.v	/^        integer pre_m;$/;"	r
pre_n	.\altera_mf.v	/^        integer pre_n;$/;"	r
preadder0_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 1) -1 : 0] preadder0_result;$/;"	r
preadder1_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 1) -1 : 0] preadder1_result;$/;"	r
preadder2_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 1) -1 : 0] preadder2_result;$/;"	r
preadder3_result	.\altera_mf.v	/^    reg [(int_width_a + int_width_b + 1) -1 : 0] preadder3_result;$/;"	r
preadder_direction_0	.\altera_mf.v	/^   	parameter preadder_direction_0	= "ADD";$/;"	c
preadder_direction_1	.\altera_mf.v	/^	parameter preadder_direction_1	= "ADD";$/;"	c
preadder_direction_2	.\altera_mf.v	/^	parameter preadder_direction_2	= "ADD";$/;"	c
preadder_direction_3	.\altera_mf.v	/^	parameter preadder_direction_3	= "ADD";$/;"	c
preadder_mode	.\altera_mf.v	/^  	parameter preadder_mode	= "SIMPLE";$/;"	c
preadder_res_0	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] preadder_res_0;$/;"	r
preadder_res_1	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] preadder_res_1;$/;"	r
preadder_res_2	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] preadder_res_2;$/;"	r
preadder_res_3	.\altera_mf.v	/^    reg  [(int_width_a + int_width_b) -1:0] preadder_res_3;$/;"	r
preadder_res_wire	.\altera_mf.v	/^    wire  [4 * (int_width_preadder) -1:0] preadder_res_wire;$/;"	n
preadder_sum1a	.\altera_mf.v	/^    reg [2*int_width_a - 1: 0] preadder_sum1a;$/;"	r
preadder_sum2a	.\altera_mf.v	/^    reg [2*int_width_b - 1: 0] preadder_sum2a;$/;"	r
preemphasis_setting	.\altera_mf.v	/^    parameter preemphasis_setting = 0;$/;"	c
previous_read_data	.\altera_mf.v	/^    wire [width-1:0] previous_read_data;$/;"	n
prim_clk	.\altera_mf.v	/^    parameter prim_clk = "inclk0";$/;"	c
primary_clk_is_bad	.\altera_mf.v	/^    reg primary_clk_is_bad;$/;"	r
primary_clock	.\altera_mf.v	/^    parameter primary_clock = "inclk0";$/;"	c
primary_clock	.\altera_mf.v	/^parameter   primary_clock             = "inclk0";$/;"	c
primary_clock_frequency	.\altera_mf.v	/^    integer primary_clock_frequency;$/;"	r
print_task	.\print_task.v	/^module print_task();$/;"	m
print_task	.\work\print_task\_primary.vhd	/^entity print_task is$/;"	e
prn	.\altera_mf.v	/^    input prn;$/;"	p
prn	.\altera_mf.v	/^    tri1 prn, clrn, ena;$/;"	n
probe	.\altera_mf.v	/^    input    [probe_width-1:0]    probe;$/;"	p
probe_width	.\altera_mf.v	/^    parameter    probe_width    =    1;$/;"	c
product_xp	.\omsp_multiplier.v	/^wire        [31:0] product_xp = cycle[0] ? {product[23:0], 8'h00} :$/;"	n
puc_a	.\omsp_clock_module.v	/^wire puc_a = por | wdt_reset;$/;"	n
puc_a_scan	.\omsp_clock_module.v	/^wire puc_a_scan;$/;"	n
puc_lfxt_noscan_n	.\omsp_clock_module.v	/^   wire puc_lfxt_noscan_n;$/;"	n
puc_lfxt_rst	.\omsp_clock_module.v	/^   wire       puc_lfxt_rst = puc_rst;$/;"	n
puc_lfxt_rst	.\omsp_clock_module.v	/^   wire puc_lfxt_rst;$/;"	n
puc_noscan_n	.\omsp_clock_module.v	/^wire puc_noscan_n;$/;"	n
puc_pnd_set	.\omsp_clock_module.v	/^output              puc_pnd_set;      \/\/ PUC pending set for the serial debug interface$/;"	p
puc_pnd_set	.\omsp_dbg.v	/^input               puc_pnd_set;       \/\/ PUC pending set for the serial debug interface$/;"	p
puc_pnd_set	.\omsp_dbg.v	/^wire  [3:2] cpu_stat_set = {dbg_swbrk, puc_pnd_set};$/;"	n
puc_pnd_set	.\openMSP430.v	/^wire                 puc_pnd_set;$/;"	n
puc_rst	.\dma_decode_16b.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\dma_pri.v	/^input                                   puc_rst        ;$/;"	p
puc_rst	.\dma_tfbuffer.v	/^ input                      puc_rst;$/;"	p
puc_rst	.\omsp_clock_module.v	/^output              puc_rst;          \/\/ Main system reset$/;"	p
puc_rst	.\omsp_execution_unit.v	/^input               puc_rst;       \/\/ Main system reset$/;"	p
puc_rst	.\omsp_frontend.v	/^input                puc_rst;          \/\/ Main system reset$/;"	p
puc_rst	.\omsp_gpio.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\omsp_mem_backbone.v	/^input                puc_rst;           \/\/ Main system reset$/;"	p
puc_rst	.\omsp_multiplier.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\omsp_register_file.v	/^input               puc_rst;      \/\/ Main system reset$/;"	p
puc_rst	.\omsp_sfr.v	/^input               puc_rst;      \/\/ Main system reset$/;"	p
puc_rst	.\omsp_timerA.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\omsp_watchdog.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\openMSP430.v	/^output               puc_rst;                \/\/ Main system reset$/;"	p
puc_rst	.\openMSP430_fpga.v	/^wire               puc_rst;$/;"	n
puc_rst	.\template_periph_16b.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_rst	.\template_periph_8b.v	/^input              puc_rst;         \/\/ Main system reset$/;"	p
puc_rst	.\uart_top.v	/^input               puc_rst;        \/\/ Main system reset$/;"	p
puc_s	.\omsp_clock_module.v	/^wire puc_s = dbg_cpu_reset |                              \/\/ With the debug interface command$/;"	n
puc_sm_noscan_n	.\omsp_clock_module.v	/^     wire puc_sm_noscan_n;$/;"	n
puc_sm_rst	.\omsp_clock_module.v	/^      wire       puc_sm_rst   = puc_rst;$/;"	n
puc_sm_rst	.\omsp_clock_module.v	/^     wire puc_sm_rst;$/;"	n
pull_back_M	.\altera_mf.v	/^    integer pull_back_M;$/;"	r
pull_back_ext_cntr	.\altera_mf.v	/^    integer pull_back_ext_cntr;$/;"	r
pvalue	.\altera_mf.v	/^    parameter pvalue = 0;$/;"	c
q	.\altera_mf.v	/^    output [lpm_width-1:0] q;$/;"	p
q	.\altera_mf.v	/^    output [lpm_width_r-1:0] q;$/;"	p
q	.\altera_mf.v	/^    output [q_port_width - 1 : 0] q;$/;"	p
q	.\altera_mf.v	/^    output [width-1:0] q;        \/\/ Data output from the memory$/;"	p
q	.\altera_mf.v	/^    output [width-1:0] q;$/;"	p
q	.\altera_mf.v	/^    output q;$/;"	p
q	.\altera_mf.v	/^    reg [lpm_width-1:0] q;$/;"	r
q	.\altera_mf.v	/^    reg q;$/;"	r
q	.\ram16x512.v	/^	output	[15:0]  q;$/;"	p
q	.\ram16x512.v	/^	wire [15:0] q = sub_wire0[15:0];$/;"	n
q	.\rom16x2048.v	/^	output	[15:0]  q;$/;"	p
q	.\rom16x2048.v	/^	wire [15:0] q = sub_wire0[15:0];$/;"	n
q_a	.\altera_mf.v	/^    output [width_a-1:0] q_a; \/\/ Port A output$/;"	p
q_a	.\altera_mf.v	/^    output [width_a-1:0] q_a;$/;"	p
q_b	.\altera_mf.v	/^    output [width_b-1:0] q_b; \/\/ Port B output$/;"	p
q_b	.\altera_mf.v	/^    output [width_b-1:0] q_b;$/;"	p
q_index	.\altera_mf.v	/^    integer q_index;$/;"	r
q_pipeline	.\altera_mf.v	/^    reg[q_port_width - 1 : 0] q_pipeline[(pipeline +1) : 0];$/;"	r
q_port_width	.\altera_mf.v	/^    parameter q_port_width = 1; \/\/ The width of the q port$/;"	c
q_temp	.\altera_mf.v	/^    reg[q_port_width - 1 : 0] q_temp;$/;"	r
q_value_comp	.\altera_mf.v	/^    reg[r_port_width : 0]     q_value_comp;$/;"	r
q_value_temp	.\altera_mf.v	/^    reg[q_port_width - 1 : 0] q_value_temp;$/;"	r
qa	.\altera_mf.v	/^    output [width-1:0]     qa;$/;"	p
qb	.\altera_mf.v	/^    output [width-1:0]     qb;$/;"	p
qbin	.\altera_mf.v	/^    output [width-1:0] qbin;$/;"	p
qflash_fast_speed	.\altera_mf.v	/^    parameter    qflash_fast_speed    =    0;$/;"	c
qflash_mfc	.\altera_mf.v	/^    parameter    qflash_mfc    =    "ALTERA";$/;"	c
qspi_data_delay	.\altera_mf.v	/^    parameter    qspi_data_delay    =    0;$/;"	c
qspi_data_delay_count	.\altera_mf.v	/^    parameter    qspi_data_delay_count    =    1;$/;"	c
quad_addr	.\altera_mf.v	/^        output   [8:0]  quad_addr;$/;"	p
qualify_conf_done	.\altera_mf.v	/^    parameter qualify_conf_done                    = "off";$/;"	c
qualify_conf_done	.\altera_mf.v	/^    parameter qualify_conf_done = "off";$/;"	c
qualify_conf_done	.\altera_mf.v	/^parameter   qualify_conf_done         = "OFF" ;$/;"	c
quiet_period_violation	.\altera_mf.v	/^    reg quiet_period_violation;$/;"	r
quiet_time	.\altera_mf.v	/^    integer quiet_time;$/;"	r
quotient_array	.\altera_mf.v	/^        integer quotient_array[max_iter-1:0];$/;"	r
r	.\altera_mf.v	/^    integer ifp, ofp, r, r2;$/;"	r
r	.\altera_mf.v	/^    real r;$/;"	r
r0	.\omsp_register_file.v	/^wire [15:0] r0       = pc;$/;"	n
r1	.\omsp_register_file.v	/^reg [15:0] r1;$/;"	r
r10	.\omsp_register_file.v	/^reg [15:0] r10;$/;"	r
r10_en	.\omsp_register_file.v	/^wire       r10_en  = r10_wr | r10_inc;$/;"	n
r10_inc	.\omsp_register_file.v	/^wire       r10_inc = inst_src_in[10]  & reg_incr;$/;"	n
r10_wr	.\omsp_register_file.v	/^wire       r10_wr  = inst_dest[10] & reg_dest_wr;$/;"	n
r11	.\omsp_register_file.v	/^reg [15:0] r11;$/;"	r
r11_en	.\omsp_register_file.v	/^wire       r11_en  = r11_wr | r11_inc;$/;"	n
r11_inc	.\omsp_register_file.v	/^wire       r11_inc = inst_src_in[11]  & reg_incr;$/;"	n
r11_wr	.\omsp_register_file.v	/^wire       r11_wr  = inst_dest[11] & reg_dest_wr;$/;"	n
r12	.\omsp_register_file.v	/^reg [15:0] r12;$/;"	r
r12_en	.\omsp_register_file.v	/^wire       r12_en  = r12_wr | r12_inc;$/;"	n
r12_inc	.\omsp_register_file.v	/^wire       r12_inc = inst_src_in[12]  & reg_incr;$/;"	n
r12_wr	.\omsp_register_file.v	/^wire       r12_wr  = inst_dest[12] & reg_dest_wr;$/;"	n
r13	.\omsp_register_file.v	/^reg [15:0] r13;$/;"	r
r13_en	.\omsp_register_file.v	/^wire       r13_en  = r13_wr | r13_inc;$/;"	n
r13_inc	.\omsp_register_file.v	/^wire       r13_inc = inst_src_in[13]  & reg_incr;$/;"	n
r13_wr	.\omsp_register_file.v	/^wire       r13_wr  = inst_dest[13] & reg_dest_wr;$/;"	n
r14	.\omsp_register_file.v	/^reg [15:0] r14;$/;"	r
r14_en	.\omsp_register_file.v	/^wire       r14_en  = r14_wr | r14_inc;$/;"	n
r14_inc	.\omsp_register_file.v	/^wire       r14_inc = inst_src_in[14]  & reg_incr;$/;"	n
r14_wr	.\omsp_register_file.v	/^wire       r14_wr  = inst_dest[14] & reg_dest_wr;$/;"	n
r15	.\omsp_register_file.v	/^reg [15:0] r15;$/;"	r
r15_en	.\omsp_register_file.v	/^wire       r15_en  = r15_wr | r15_inc;$/;"	n
r15_inc	.\omsp_register_file.v	/^wire       r15_inc = inst_src_in[15]  & reg_incr;$/;"	n
r15_wr	.\omsp_register_file.v	/^wire       r15_wr  = inst_dest[15] & reg_dest_wr;$/;"	n
r1_en	.\omsp_register_file.v	/^wire       r1_en  = r1_wr | reg_sp_wr | r1_inc;$/;"	n
r1_inc	.\omsp_register_file.v	/^wire       r1_inc = inst_src_in[1]  & reg_incr;$/;"	n
r1_wr	.\omsp_register_file.v	/^wire       r1_wr  = inst_dest[1] & reg_dest_wr;$/;"	n
r2	.\altera_mf.v	/^    integer ifp, ofp, r, r2;$/;"	r
r2	.\omsp_register_file.v	/^reg  [15:0] r2;$/;"	r
r2_c	.\omsp_register_file.v	/^wire        r2_c   = alu_stat_wr[0] ? alu_stat[0]          : reg_dest_val_in[0]; \/\/ C$/;"	n
r2_c	.\omsp_register_file.v	/^wire        r2_c   = alu_stat_wr[0] ? alu_stat[0]          :$/;"	n
r2_en	.\omsp_register_file.v	/^wire        r2_en  = |alu_stat_wr | r2_wr | reg_sr_clr;$/;"	n
r2_mask	.\omsp_register_file.v	/^   wire [15:0] r2_mask     = cpuoff_mask | oscoff_mask | scg0_mask | scg1_mask | 16'h010f;$/;"	n
r2_n	.\omsp_register_file.v	/^wire        r2_n   = alu_stat_wr[2] ? alu_stat[2]          : reg_dest_val_in[2]; \/\/ N$/;"	n
r2_n	.\omsp_register_file.v	/^wire        r2_n   = alu_stat_wr[2] ? alu_stat[2]          :$/;"	n
r2_nxt	.\omsp_register_file.v	/^wire  [7:3] r2_nxt = r2_wr          ? reg_dest_val_in[7:3] : r2[7:3];$/;"	n
r2_v	.\omsp_register_file.v	/^wire        r2_v   = alu_stat_wr[3] ? alu_stat[3]          : reg_dest_val_in[8]; \/\/ V$/;"	n
r2_v	.\omsp_register_file.v	/^wire        r2_v   = alu_stat_wr[3] ? alu_stat[3]          :$/;"	n
r2_wr	.\omsp_register_file.v	/^wire        r2_wr  = (inst_dest[2] & reg_dest_wr) | reg_sr_wr;$/;"	n
r2_z	.\omsp_register_file.v	/^wire        r2_z   = alu_stat_wr[1] ? alu_stat[1]          : reg_dest_val_in[1]; \/\/ Z$/;"	n
r2_z	.\omsp_register_file.v	/^wire        r2_z   = alu_stat_wr[1] ? alu_stat[1]          :$/;"	n
r3	.\omsp_register_file.v	/^reg [15:0] r3;$/;"	r
r3_en	.\omsp_register_file.v	/^wire       r3_en   = r3_wr;$/;"	n
r3_wr	.\omsp_register_file.v	/^wire       r3_wr  = inst_dest[3] & reg_dest_wr;$/;"	n
r4	.\omsp_register_file.v	/^reg [15:0] r4;$/;"	r
r4_en	.\omsp_register_file.v	/^wire       r4_en  = r4_wr | r4_inc;$/;"	n
r4_inc	.\omsp_register_file.v	/^wire       r4_inc = inst_src_in[4]  & reg_incr;$/;"	n
r4_wr	.\omsp_register_file.v	/^wire       r4_wr  = inst_dest[4] & reg_dest_wr;$/;"	n
r5	.\omsp_register_file.v	/^reg [15:0] r5;$/;"	r
r5_en	.\omsp_register_file.v	/^wire       r5_en  = r5_wr | r5_inc;$/;"	n
r5_inc	.\omsp_register_file.v	/^wire       r5_inc = inst_src_in[5]  & reg_incr;$/;"	n
r5_wr	.\omsp_register_file.v	/^wire       r5_wr  = inst_dest[5] & reg_dest_wr;$/;"	n
r6	.\omsp_register_file.v	/^reg [15:0] r6;$/;"	r
r6_en	.\omsp_register_file.v	/^wire       r6_en  = r6_wr | r6_inc;$/;"	n
r6_inc	.\omsp_register_file.v	/^wire       r6_inc = inst_src_in[6]  & reg_incr;$/;"	n
r6_wr	.\omsp_register_file.v	/^wire       r6_wr  = inst_dest[6] & reg_dest_wr;$/;"	n
r7	.\omsp_register_file.v	/^reg [15:0] r7;$/;"	r
r7_en	.\omsp_register_file.v	/^wire       r7_en  = r7_wr | r7_inc;$/;"	n
r7_inc	.\omsp_register_file.v	/^wire       r7_inc = inst_src_in[7]  & reg_incr;$/;"	n
r7_wr	.\omsp_register_file.v	/^wire       r7_wr  = inst_dest[7] & reg_dest_wr;$/;"	n
r8	.\omsp_register_file.v	/^reg [15:0] r8;$/;"	r
r8_en	.\omsp_register_file.v	/^wire       r8_en  = r8_wr | r8_inc;$/;"	n
r8_inc	.\omsp_register_file.v	/^wire       r8_inc = inst_src_in[8]  & reg_incr;$/;"	n
r8_wr	.\omsp_register_file.v	/^wire       r8_wr  = inst_dest[8] & reg_dest_wr;$/;"	n
r9	.\omsp_register_file.v	/^reg [15:0] r9;$/;"	r
r9_en	.\omsp_register_file.v	/^wire       r9_en  = r9_wr | r9_inc;$/;"	n
r9_inc	.\omsp_register_file.v	/^wire       r9_inc = inst_src_in[9]  & reg_incr;$/;"	n
r9_wr	.\omsp_register_file.v	/^wire       r9_wr  = inst_dest[9] & reg_dest_wr;$/;"	n
r_int	.\altera_mf.v	/^    integer r_int;$/;"	r
r_port_width	.\altera_mf.v	/^    parameter r_port_width = 1; \/\/ The width of the remainder port$/;"	c
r_temp	.\altera_mf.v	/^    reg[r_port_width : 0]     r_temp;$/;"	r
radce_lflck	.\altera_mf.v	/^  parameter radce_lflck = 15'h0000, \/\/ settings for RADCE_LFLCK CRAM settings - get values from ICD$/;"	c
radical	.\altera_mf.v	/^    input [width - 1 : 0] radical;$/;"	p
ram	.\ram.v	/^module ram ($/;"	m
ram	.\work\ram\_primary.vhd	/^entity ram is$/;"	e
ram16x512	.\ram16x512.v	/^module ram16x512 ($/;"	m
ram16x512	.\work\ram16x512\_primary.vhd	/^entity ram16x512 is$/;"	e
ram_32_64	.\ram_32_64.vhd	/^ENTITY ram_32_64 IS$/;"	e
ram_addr	.\ram.v	/^input [ADDR_MSB:0] ram_addr;       \/\/ RAM address$/;"	p
ram_addr	.\rom.v	/^input [ADDR_MSB:0] ram_addr;       \/\/ RAM address$/;"	p
ram_addr_reg	.\ram.v	/^reg   [ADDR_MSB:0] ram_addr_reg;$/;"	r
ram_addr_reg	.\rom.v	/^reg   [ADDR_MSB:0] ram_addr_reg;$/;"	r
ram_array	.\altera_mf.v	/^    reg [(RAM_WIDTH*number_of_channels) -1 : 0] ram_array;$/;"	r
ram_array	.\altera_mf.v	/^    reg [RAM_WIDTH -1 : 0] ram_array;$/;"	r
ram_array0	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] ram_array0;$/;"	r
ram_array1	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] ram_array1;$/;"	r
ram_array2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] ram_array2;$/;"	r
ram_array3	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] ram_array3;$/;"	r
ram_block_type	.\altera_mf.v	/^    parameter ram_block_type                     = "AUTO";$/;"	c
ram_block_type	.\altera_mf.v	/^    parameter ram_block_type   = "AUTO";        \/\/ ram block type to be used$/;"	c
ram_block_type	.\altera_mf.v	/^    parameter ram_block_type = "AUTO";$/;"	c
ram_cen	.\ram.v	/^input              ram_cen;        \/\/ RAM chip enable (low active)$/;"	p
ram_cen	.\rom.v	/^input              ram_cen;        \/\/ RAM chip enable (low active)$/;"	p
ram_clk	.\ram.v	/^input              ram_clk;        \/\/ RAM clock$/;"	p
ram_clk	.\rom.v	/^input              ram_clk;        \/\/ RAM clock$/;"	p
ram_din	.\ram.v	/^input       [15:0] ram_din;        \/\/ RAM data input$/;"	p
ram_din	.\rom.v	/^input       [15:0] ram_din;        \/\/ RAM data input$/;"	p
ram_dout	.\ram.v	/^output      [15:0] ram_dout;       \/\/ RAM data output$/;"	p
ram_dout	.\rom.v	/^output      [15:0] ram_dout;       \/\/ RAM data output$/;"	p
ram_initf	.\altera_mf.v	/^    reg [8*256:1]          ram_initf;       \/\/ max RAM size 8*256=2048$/;"	r
ram_initf	.\altera_mf.v	/^    reg [8*256:1] ram_initf;$/;"	r
ram_trace_top	.\ram_trace_top.vhd	/^ENTITY ram_trace_top IS$/;"	e
ram_wen	.\ram.v	/^input        [1:0] ram_wen;        \/\/ RAM write enable (low active)$/;"	p
ram_wen	.\rom.v	/^input        [1:0] ram_wen;        \/\/ RAM write enable (low active)$/;"	p
random	.\altera_mf.v	/^    reg   random;$/;"	r
range_rd_set	.\omsp_dbg_hwbrk.v	/^                            range_rd_set & `HWBRK_RANGE,$/;"	n
range_rd_set	.\omsp_dbg_hwbrk.v	/^wire      range_rd_set;$/;"	n
range_wr_set	.\omsp_dbg_hwbrk.v	/^wire      range_wr_set;$/;"	n
raw_tck	.\altera_mf.v	/^    input    raw_tck;$/;"	p
rdPtr	.\altera_mf.v	/^    reg [2 : 0] rdPtr [number_of_channels -1 : 0];$/;"	r
rdPtr	.\altera_mf.v	/^    reg [2 : 0] rdPtr;$/;"	r
rdaddress	.\altera_mf.v	/^    input  [widthad-1:0] rdaddress; \/\/ Write address input to the memory$/;"	p
rdaddress_a	.\altera_mf.v	/^    input [widthad-1:0]    rdaddress_a;$/;"	p
rdaddress_aclr	.\altera_mf.v	/^    parameter rdaddress_aclr = "ON";$/;"	c
rdaddress_aclr_a	.\altera_mf.v	/^    parameter rdaddress_aclr_a = "ON";         \/\/ aclr affects rdaddress_a?$/;"	c
rdaddress_aclr_b	.\altera_mf.v	/^    parameter rdaddress_aclr_b = "ON";         \/\/ aclr affects rdaddress_b?$/;"	c
rdaddress_at_inclock	.\altera_mf.v	/^    reg [widthad-1:0] rdaddress_at_inclock;$/;"	r
rdaddress_at_inclock_low	.\altera_mf.v	/^    reg [widthad-1:0] rdaddress_at_inclock_low;$/;"	r
rdaddress_at_outclock	.\altera_mf.v	/^    reg [widthad-1:0] rdaddress_at_outclock;$/;"	r
rdaddress_b	.\altera_mf.v	/^    input [widthad-1:0]    rdaddress_b;$/;"	p
rdaddress_reg	.\altera_mf.v	/^    parameter rdaddress_reg = "OUTCLOCK";$/;"	c
rdaddress_reg_a	.\altera_mf.v	/^    parameter rdaddress_reg_a  = "UNREGISTERED";\/\/ clock used by readdress_a$/;"	c
rdaddress_reg_b	.\altera_mf.v	/^    parameter rdaddress_reg_b  = "UNREGISTERED";\/\/ clock used by readdress_b$/;"	c
rdaddress_tmp	.\altera_mf.v	/^    wire [widthad-1:0] rdaddress_tmp;$/;"	n
rdaddressstall	.\altera_mf.v	/^    input  rdaddressstall;              \/\/ Address stall input for read port$/;"	p
rdaddressstall	.\altera_mf.v	/^    tri0 rdaddressstall;$/;"	n
rdclk	.\altera_mf.v	/^    input rdclk;$/;"	p
rdcontrol_aclr	.\altera_mf.v	/^    parameter rdcontrol_aclr = "ON";$/;"	c
rdcontrol_aclr_a	.\altera_mf.v	/^    parameter rdcontrol_aclr_a = "ON";         \/\/ aclr affects rden_a?$/;"	c
rdcontrol_aclr_b	.\altera_mf.v	/^    parameter rdcontrol_aclr_b          = "NONE";$/;"	c
rdcontrol_aclr_b	.\altera_mf.v	/^    parameter rdcontrol_aclr_b = "ON";         \/\/ aclr affects rden_b?$/;"	c
rdcontrol_reg	.\altera_mf.v	/^    parameter rdcontrol_reg = "OUTCLOCK";$/;"	c
rdcontrol_reg_a	.\altera_mf.v	/^    parameter rdcontrol_reg_a  = "UNREGISTERED";\/\/ clock used by rden_a$/;"	c
rdcontrol_reg_b	.\altera_mf.v	/^    parameter rdcontrol_reg_b           = "CLOCK1";$/;"	c
rdcontrol_reg_b	.\altera_mf.v	/^    parameter rdcontrol_reg_b  = "UNREGISTERED";\/\/ clock used by rden_b$/;"	c
rdempty	.\altera_mf.v	/^    output rdempty;$/;"	p
rden	.\altera_mf.v	/^    input  rden;                 \/\/ Read enable input. Disable reading when low$/;"	p
rden	.\altera_mf.v	/^    tri1 rden;$/;"	n
rden_a	.\altera_mf.v	/^    input                  rden_a;$/;"	p
rden_a	.\altera_mf.v	/^    input  rden_a; \/\/ Port A read enable input$/;"	p
rden_a	.\altera_mf.v	/^    input  rden_a;$/;"	p
rden_a	.\altera_mf.v	/^    tri1                   rden_a;$/;"	n
rden_a	.\altera_mf.v	/^    tri1 rden_a;$/;"	n
rden_at_inclock	.\altera_mf.v	/^    reg rden_at_inclock;$/;"	r
rden_at_outclock	.\altera_mf.v	/^    reg rden_at_outclock;$/;"	r
rden_b	.\altera_mf.v	/^    input                  rden_b;$/;"	p
rden_b	.\altera_mf.v	/^    input  rden_b; \/\/ Port B read enable input$/;"	p
rden_b	.\altera_mf.v	/^    input  rden_b;$/;"	p
rden_b	.\altera_mf.v	/^    tri1                   rden_b;$/;"	n
rden_b	.\altera_mf.v	/^    tri1 rden_b;$/;"	n
rden_low_output_0	.\altera_mf.v	/^    reg rden_low_output_0;$/;"	r
rden_tmp	.\altera_mf.v	/^    wire rden_tmp;$/;"	n
rdfull	.\altera_mf.v	/^    output rdfull;$/;"	p
rdn	.\altera_mf.v	/^    input    rdn;$/;"	p
rdreq	.\altera_mf.v	/^    input  rdreq;$/;"	p
rdreq	.\altera_mf.v	/^    input rdreq;$/;"	p
rdsync_delaypipe	.\altera_mf.v	/^    parameter rdsync_delaypipe = 0;$/;"	c
rdusedw	.\altera_mf.v	/^    output [lpm_widthu-1:0] rdusedw;$/;"	p
rdusedw	.\altera_mf.v	/^    output [lpm_widthu_r-1:0] rdusedw;$/;"	p
read_aclr	.\altera_mf.v	/^    wire read_aclr;$/;"	n
read_aclr_synch	.\altera_mf.v	/^    parameter read_aclr_synch = "OFF";$/;"	c
read_during_write_mode_mixed_ports	.\altera_mf.v	/^	parameter read_during_write_mode_mixed_ports = "DONT_CARE";$/;"	c
read_during_write_mode_mixed_ports	.\altera_mf.v	/^    parameter read_during_write_mode_mixed_ports = "DONT_CARE";$/;"	c
read_during_write_mode_port_a	.\altera_mf.v	/^    parameter read_during_write_mode_port_a = "NEW_DATA_NO_NBE_READ";$/;"	c
read_during_write_mode_port_b	.\altera_mf.v	/^    parameter read_during_write_mode_port_b = "NEW_DATA_NO_NBE_READ";$/;"	c
read_id	.\altera_mf.v	/^    reg [lpm_widthu-1:0] read_id;$/;"	r
read_side_sync_reset	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] read_side_sync_reset;$/;"	r
read_side_sync_reset	.\altera_mf.v	/^    reg read_side_sync_reset;$/;"	r
real_lock_high	.\altera_mf.v	/^    reg [31:0] real_lock_high;$/;"	r
reconfig_clk	.\altera_mf.v	/^  input                             reconfig_clk,$/;"	p
reconfig_err	.\altera_mf.v	/^    reg reconfig_err;$/;"	r
reduced_functionality	.\altera_mf.v	/^    parameter reduced_functionality = "NO";$/;"	c
refclk	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, C6, C6_mode, C7, C7_mode, C8, C8_mode, C9, C9_mode, refclk, m_mod;$/;"	p
refclk	.\altera_mf.v	/^    input C0, C0_mode, C1, C1_mode, C2, C2_mode, C3, C3_mode, C4, C4_mode, C5, C5_mode, refclk, m_mod;$/;"	p
refclk	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
refclk	.\altera_mf.v	/^    integer refclk;$/;"	r
refclk	.\altera_mf.v	/^    wire refclk;$/;"	n
refclk_frequency	.\altera_mf.v	/^    parameter refclk_frequency = "UNUSED";$/;"	c
refclk_last_value	.\altera_mf.v	/^    reg refclk_last_value;$/;"	r
refclk_period	.\altera_mf.v	/^    integer refclk_period;$/;"	r
refclk_period	.\altera_mf.v	/^    time refclk_period;$/;"	r
refclk_time	.\altera_mf.v	/^    time    refclk_time;$/;"	r
reg	.\altera_mf.v	/^  output reg [number_of_channels-1:0] adce_standby, \/\/ put channels into standby - to RX PMA$/;"	p
reg	.\dma_decode_16b.v	/^output  reg           dma0_ctl_en;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg           dma1_ctl_en;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg           dma2_ctl_en;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma0_ctl;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma0_da ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma0_sa ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma0_sz ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma1_ctl;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma1_da ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma1_sa ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma1_sz ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma2_ctl;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma2_da ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma2_sa ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma2_sz ;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma_ctl0;$/;"	p
reg	.\dma_decode_16b.v	/^output  reg    [15:0] dma_ctl1;$/;"	p
reg_addr	.\dma_decode_16b.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\dma_tfbuffer.v	/^wire      [DEC_WD-1:0] reg_addr = {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\omsp_clock_module.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
reg_addr	.\omsp_gpio.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
reg_addr	.\omsp_multiplier.v	/^wire [DEC_WD-1:0] reg_addr    =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\omsp_sfr.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
reg_addr	.\omsp_timerA.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\omsp_watchdog.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\template_periph_16b.v	/^wire [DEC_WD-1:0] reg_addr  =  {per_addr[DEC_WD-2:0], 1'b0};$/;"	n
reg_addr	.\template_periph_8b.v	/^wire [DEC_WD-1:0] reg_addr     =  {1'b0, per_addr[DEC_WD-2:0]};$/;"	n
reg_chaddress	.\altera_mf.v	/^  reg [ireg_chaddr_width-1:0] reg_chaddress, reg_chaddress0q;$/;"	r
reg_chaddress0q	.\altera_mf.v	/^  reg [ireg_chaddr_width-1:0] reg_chaddress, reg_chaddress0q;$/;"	r
reg_ctrlstatus	.\altera_mf.v	/^  reg [ireg_data_width-1:0] reg_ctrlstatus, reg_ctrlstatus0q;$/;"	r
reg_ctrlstatus0q	.\altera_mf.v	/^  reg [ireg_data_width-1:0] reg_ctrlstatus, reg_ctrlstatus0q;$/;"	r
reg_data	.\altera_mf.v	/^  reg [ireg_data_width-1:0] reg_data, reg_data0q;$/;"	r
reg_data0q	.\altera_mf.v	/^  reg [ireg_data_width-1:0] reg_data, reg_data0q;$/;"	r
reg_dec	.\dma_decode_16b.v	/^wire [DEC_SZ-1:0] reg_dec   =  (DMACTL0_D   &  {DEC_SZ{(reg_addr == DMACTL0  )}})  |$/;"	n
reg_dec	.\dma_tfbuffer.v	/^wire      [DEC_SZ-1:0] reg_dec  = (ENCODER_BUFFERIN_D         & {DEC_SZ{(reg_addr == ENCODER_BUFFERIN)}})|       \/\/00           >>1 == 00$/;"	n
reg_dec	.\omsp_clock_module.v	/^wire [DEC_SZ-1:0] reg_dec      = (BCSCTL1_D  &  {DEC_SZ{(reg_addr==(BCSCTL1 >>1))}}) |$/;"	n
reg_dec	.\omsp_dbg.v	/^reg  [NR_REG-1:0]  reg_dec;$/;"	r
reg_dec	.\omsp_gpio.v	/^wire [DEC_SZ-1:0] reg_dec      =  (P1IN_D   &  {DEC_SZ{(reg_addr==(P1IN  >>1))  &  P1_EN[0]}})  |$/;"	n
reg_dec	.\omsp_multiplier.v	/^wire [DEC_SZ-1:0] reg_dec     =  (OP1_MPY_D   &  {DEC_SZ{(reg_addr == OP1_MPY  )}})  |$/;"	n
reg_dec	.\omsp_sfr.v	/^wire [DEC_SZ-1:0] reg_dec      = (IE1_D        &  {DEC_SZ{(reg_addr==(IE1       >>1))}})  |$/;"	n
reg_dec	.\omsp_timerA.v	/^wire [DEC_SZ-1:0] reg_dec   =  (TACTL_D    &  {DEC_SZ{(reg_addr == TACTL   )}})  |$/;"	n
reg_dec	.\omsp_watchdog.v	/^wire [DEC_SZ-1:0] reg_dec   =  (WDTCTL_D & {DEC_SZ{(reg_addr==WDTCTL)}});$/;"	n
reg_dec	.\template_periph_16b.v	/^wire [DEC_SZ-1:0] reg_dec   =  (CNTRL1_D  &  {DEC_SZ{(reg_addr == CNTRL1 )}})  |$/;"	n
reg_dec	.\template_periph_8b.v	/^wire [DEC_SZ-1:0] reg_dec      = (CNTRL1_D  &  {DEC_SZ{(reg_addr==(CNTRL1 >>1))}}) |$/;"	n
reg_dest	.\omsp_execution_unit.v	/^wire         [15:0] reg_dest;$/;"	n
reg_dest	.\omsp_register_file.v	/^output       [15:0] reg_dest;     \/\/ Selected register destination content$/;"	p
reg_dest_val	.\omsp_register_file.v	/^input        [15:0] reg_dest_val; \/\/ Selected register destination value$/;"	p
reg_dest_val	.\omsp_register_file.v	/^wire [15:0] reg_dest_val_in = inst_bw ? {8'h00,reg_dest_val[7:0]} : reg_dest_val;$/;"	n
reg_dest_val_in	.\omsp_register_file.v	/^wire [15:0] reg_dest_val_in = inst_bw ? {8'h00,reg_dest_val[7:0]} : reg_dest_val;$/;"	n
reg_dest_wr	.\omsp_execution_unit.v	/^wire reg_dest_wr  = ((e_state==`E_EXEC) & ($/;"	n
reg_dest_wr	.\omsp_register_file.v	/^input               reg_dest_wr;  \/\/ Write selected register destination$/;"	p
reg_hi_wr	.\omsp_clock_module.v	/^wire [DEC_SZ-1:0] reg_hi_wr    = reg_dec & {DEC_SZ{reg_hi_write}};$/;"	n
reg_hi_wr	.\omsp_gpio.v	/^wire [DEC_SZ-1:0] reg_hi_wr    = reg_dec & {DEC_SZ{reg_hi_write}};$/;"	n
reg_hi_wr	.\omsp_sfr.v	/^wire [DEC_SZ-1:0] reg_hi_wr    = reg_dec & {DEC_SZ{reg_hi_write}};$/;"	n
reg_hi_wr	.\template_periph_8b.v	/^wire [DEC_SZ-1:0] reg_hi_wr    = reg_dec & {DEC_SZ{reg_hi_write}};$/;"	n
reg_hi_write	.\omsp_clock_module.v	/^wire              reg_hi_write =  per_we[1] & reg_sel;$/;"	n
reg_hi_write	.\omsp_gpio.v	/^wire              reg_hi_write =  per_we[1] & reg_sel;$/;"	n
reg_hi_write	.\omsp_sfr.v	/^wire              reg_hi_write =  per_we[1] & reg_sel;$/;"	n
reg_hi_write	.\template_periph_8b.v	/^wire              reg_hi_write =  per_we[1] & reg_sel;$/;"	n
reg_incr	.\omsp_execution_unit.v	/^wire reg_incr     =  (exec_done          & inst_as[`INDIR_I]) |$/;"	n
reg_incr	.\omsp_register_file.v	/^input               reg_incr;     \/\/ Increment source register$/;"	p
reg_incr_val	.\omsp_register_file.v	/^wire [15:0] reg_incr_val    = reg_src+incr_op;$/;"	n
reg_lo_wr	.\omsp_clock_module.v	/^wire [DEC_SZ-1:0] reg_lo_wr    = reg_dec & {DEC_SZ{reg_lo_write}};$/;"	n
reg_lo_wr	.\omsp_gpio.v	/^wire [DEC_SZ-1:0] reg_lo_wr    = reg_dec & {DEC_SZ{reg_lo_write}};$/;"	n
reg_lo_wr	.\omsp_sfr.v	/^wire [DEC_SZ-1:0] reg_lo_wr    = reg_dec & {DEC_SZ{reg_lo_write}};$/;"	n
reg_lo_wr	.\template_periph_8b.v	/^wire [DEC_SZ-1:0] reg_lo_wr    = reg_dec & {DEC_SZ{reg_lo_write}};$/;"	n
reg_lo_write	.\omsp_clock_module.v	/^wire              reg_lo_write =  per_we[0] & reg_sel;$/;"	n
reg_lo_write	.\omsp_gpio.v	/^wire              reg_lo_write =  per_we[0] & reg_sel;$/;"	n
reg_lo_write	.\omsp_sfr.v	/^wire              reg_lo_write =  per_we[0] & reg_sel;$/;"	n
reg_lo_write	.\template_periph_8b.v	/^wire              reg_lo_write =  per_we[0] & reg_sel;$/;"	n
reg_pc_call	.\omsp_execution_unit.v	/^wire reg_pc_call  = ((e_state==`E_EXEC)   & inst_so[`CALL]) |$/;"	n
reg_pc_call	.\omsp_register_file.v	/^input               reg_pc_call;  \/\/ Trigger PC update for a CALL instruction$/;"	p
reg_rd	.\dma_decode_16b.v	/^wire [DEC_SZ-1:0] reg_rd    = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\dma_tfbuffer.v	/^wire [DEC_SZ-1:0] reg_rd    = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\omsp_clock_module.v	/^wire [DEC_SZ-1:0] reg_rd       = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK0_ADDR0],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK0_CTL]};$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK0_STAT],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK1_ADDR0],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK1_CTL]};$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK1_STAT],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK2_ADDR0],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK2_CTL]};$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK2_STAT],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK3_ADDR0],$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK3_CTL]};$/;"	n
reg_rd	.\omsp_dbg.v	/^                          reg_rd[BRK3_STAT],$/;"	n
reg_rd	.\omsp_dbg.v	/^wire  [NR_REG-1:0] reg_rd    = reg_dec & {NR_REG{reg_read}};$/;"	n
reg_rd	.\omsp_gpio.v	/^wire [DEC_SZ-1:0] reg_rd       = reg_dec & {DEC_SZ{reg_read}}; $/;"	n
reg_rd	.\omsp_multiplier.v	/^wire [DEC_SZ-1:0] reg_rd      = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\omsp_sfr.v	/^wire [DEC_SZ-1:0] reg_rd       = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\omsp_timerA.v	/^wire [DEC_SZ-1:0] reg_rd    = reg_dec & {512{reg_read}};$/;"	n
reg_rd	.\omsp_watchdog.v	/^wire [DEC_SZ-1:0] reg_rd    = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\template_periph_16b.v	/^wire [DEC_SZ-1:0] reg_rd    = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_rd	.\template_periph_8b.v	/^wire [DEC_SZ-1:0] reg_rd       = reg_dec & {DEC_SZ{reg_read}};$/;"	n
reg_read	.\altera_mf.v	/^  reg        reg_read, reg_write;$/;"	r
reg_read	.\dma_decode_16b.v	/^wire              reg_read  = ~|per_we & reg_sel;$/;"	n
reg_read	.\dma_tfbuffer.v	/^wire              reg_read  = ~|per_we & reg_sel;$/;"	n
reg_read	.\omsp_clock_module.v	/^wire              reg_read     = ~|per_we   & reg_sel;$/;"	n
reg_read	.\omsp_dbg.v	/^wire               reg_read  =  1'b1;$/;"	n
reg_read	.\omsp_gpio.v	/^wire              reg_read     = ~|per_we   & reg_sel;$/;"	n
reg_read	.\omsp_multiplier.v	/^wire              reg_read    = ~|per_we & reg_sel;$/;"	n
reg_read	.\omsp_sfr.v	/^wire              reg_read     = ~|per_we   & reg_sel;$/;"	n
reg_read	.\omsp_timerA.v	/^wire              reg_read  = ~|per_we & reg_sel;$/;"	n
reg_read	.\omsp_watchdog.v	/^wire              reg_read  = ~|per_we & reg_sel;$/;"	n
reg_read	.\template_periph_16b.v	/^wire              reg_read  = ~|per_we & reg_sel;$/;"	n
reg_read	.\template_periph_8b.v	/^wire              reg_read     = ~|per_we   & reg_sel;$/;"	n
reg_s	.\altera_mf.v	/^        reg [8*16:1] reg_s;$/;"	r
reg_s	.\altera_mf.v	/^    reg [8*16:1] reg_s;$/;"	r
reg_s	.\altera_mf.v	/^reg [8*16:1] reg_s;$/;"	r
reg_sel	.\dma_decode_16b.v	/^wire              reg_sel   =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\dma_tfbuffer.v	/^wire           reg_sel          = per_en & (per_addr [13:DEC_WD-1] == BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_clock_module.v	/^wire              reg_sel      =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_gpio.v	/^wire              reg_sel      =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_multiplier.v	/^wire              reg_sel     =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_sfr.v	/^wire              reg_sel      =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_timerA.v	/^wire              reg_sel   =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\omsp_watchdog.v	/^wire              reg_sel   =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\template_periph_16b.v	/^wire              reg_sel   =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sel	.\template_periph_8b.v	/^wire              reg_sel      =  per_en & (per_addr[13:DEC_WD-1]==BASE_ADDR[14:DEC_WD]);$/;"	n
reg_sp_val	.\omsp_register_file.v	/^input        [15:0] reg_sp_val;   \/\/ Stack Pointer next value$/;"	p
reg_sp_wr	.\omsp_execution_unit.v	/^wire reg_sp_wr    = (((e_state==`E_IRQ_1) | (e_state==`E_IRQ_3)) & ~inst_irq_rst) |$/;"	n
reg_sp_wr	.\omsp_register_file.v	/^input               reg_sp_wr;    \/\/ Stack Pointer write$/;"	p
reg_sr_clr	.\omsp_execution_unit.v	/^wire reg_sr_clr   =  (e_state==`E_IRQ_2);$/;"	n
reg_sr_clr	.\omsp_register_file.v	/^input               reg_sr_clr;   \/\/ Status register clear for interrupts$/;"	p
reg_sr_wr	.\omsp_execution_unit.v	/^wire reg_sr_wr    =  (e_state==`E_DST_RD) & inst_so[`RETI];$/;"	n
reg_sr_wr	.\omsp_register_file.v	/^input               reg_sr_wr;    \/\/ Status register update for RETI instruction$/;"	p
reg_src	.\omsp_execution_unit.v	/^wire         [15:0] reg_src;$/;"	n
reg_src	.\omsp_register_file.v	/^output       [15:0] reg_src;      \/\/ Selected register source content$/;"	p
reg_string	.\altera_mf.v	/^    reg [8*200:1] reg_string; \/\/ to store the value of the given string$/;"	r
reg_string	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] reg_string;$/;"	r
reg_string	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] reg_string;$/;"	r
reg_string	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] reg_string;$/;"	r
reg_string	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] reg_string;$/;"	r
reg_string	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] reg_string;$/;"	r
reg_string	.\altera_mf.v	/^reg [8*`STR_LENGTH:1] reg_string;$/;"	r
reg_wdaddress	.\altera_mf.v	/^  reg [ireg_wdaddr_width-1:0] reg_wdaddress, reg_wdaddress0q;$/;"	r
reg_wdaddress0q	.\altera_mf.v	/^  reg [ireg_wdaddr_width-1:0] reg_wdaddress, reg_wdaddress0q;$/;"	r
reg_wr	.\dma_decode_16b.v	/^wire [DEC_SZ-1:0] reg_wr    = reg_dec & {DEC_SZ{reg_write}};$/;"	n
reg_wr	.\dma_tfbuffer.v	/^wire [DEC_SZ-1:0] reg_wr    = reg_dec & {DEC_SZ{reg_write}};$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK0_ADDR0],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK0_CTL]};$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK0_STAT],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK1_ADDR0],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK1_CTL]};$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK1_STAT],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK2_ADDR0],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK2_CTL]};$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK2_STAT],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK3_ADDR0],$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK3_CTL]};$/;"	n
reg_wr	.\omsp_dbg.v	/^                          reg_wr[BRK3_STAT],$/;"	n
reg_wr	.\omsp_dbg.v	/^wire  [NR_REG-1:0] reg_wr    = reg_dec & {NR_REG{reg_write}};$/;"	n
reg_wr	.\omsp_multiplier.v	/^wire [DEC_SZ-1:0] reg_wr      = reg_dec & {DEC_SZ{reg_write}};$/;"	n
reg_wr	.\omsp_timerA.v	/^wire [DEC_SZ-1:0] reg_wr    = reg_dec & {512{reg_write}};$/;"	n
reg_wr	.\omsp_watchdog.v	/^wire [DEC_SZ-1:0] reg_wr    = reg_dec & {DEC_SZ{reg_write}};$/;"	n
reg_wr	.\template_periph_16b.v	/^wire [DEC_SZ-1:0] reg_wr    = reg_dec & {DEC_SZ{reg_write}};$/;"	n
reg_write	.\altera_mf.v	/^  reg        reg_read, reg_write;$/;"	r
reg_write	.\dma_decode_16b.v	/^wire              reg_write =  |per_we & reg_sel;$/;"	n
reg_write	.\dma_tfbuffer.v	/^wire              reg_write =  per_we  & reg_sel;$/;"	n
reg_write	.\omsp_dbg.v	/^wire               reg_write =  dbg_wr;$/;"	n
reg_write	.\omsp_multiplier.v	/^wire              reg_write   =  |per_we & reg_sel;$/;"	n
reg_write	.\omsp_timerA.v	/^wire              reg_write =  |per_we & reg_sel;$/;"	n
reg_write	.\omsp_watchdog.v	/^wire              reg_write =  |per_we & reg_sel;$/;"	n
reg_write	.\template_periph_16b.v	/^wire              reg_write =  |per_we & reg_sel;$/;"	n
registered_data_align_input	.\altera_mf.v	/^    parameter registered_data_align_input = "OFF";$/;"	c
registered_data_align_input	.\altera_mf.v	/^    parameter registered_data_align_input = "ON";$/;"	c
registered_input	.\altera_mf.v	/^    parameter registered_input = "ON";$/;"	c
registered_output	.\altera_mf.v	/^    parameter registered_output = "ON";$/;"	c
rem	.\altera_mf.v	/^    integer rem;$/;"	r
rem0	.\altera_mf.v	/^integer rem0;$/;"	r
rem1	.\altera_mf.v	/^integer rem1;$/;"	r
rem2	.\altera_mf.v	/^integer rem2;$/;"	r
rem_ext	.\altera_mf.v	/^integer rem_ext;$/;"	r
remainder	.\altera_mf.v	/^    output [r_port_width - 1 : 0] remainder;$/;"	p
remainder_pipeline	.\altera_mf.v	/^    reg[r_port_width - 1 : 0] remainder_pipeline[(pipeline +1) : 0];$/;"	r
remap_addr	.\altera_mf.v	/^        input   [11:0]  remap_addr;$/;"	p
remap_address	.\altera_mf.v	/^  input                      [11:0] remap_address,$/;"	p
representation	.\altera_mf.v	/^    parameter representation = "UNSIGNED";$/;"	c
representation_a	.\altera_mf.v	/^    parameter representation_a           = "UNSIGNED";$/;"	c
representation_a	.\altera_mf.v	/^    parameter representation_a          = "UNSIGNED";$/;"	c
representation_b	.\altera_mf.v	/^    parameter representation_b           = "UNSIGNED";$/;"	c
representation_b	.\altera_mf.v	/^    parameter representation_b          = "UNSIGNED";$/;"	c
reset	.\altera_mf.v	/^        input   reset;$/;"	p
reset	.\altera_mf.v	/^    input reset;$/;"	p
reset	.\omsp_clock_mux.v	/^input          reset;          \/\/ Reset$/;"	p
reset_fifo	.\altera_mf.v	/^    reg reset_fifo;$/;"	r
reset_fifo_at_first_lock	.\altera_mf.v	/^    parameter reset_fifo_at_first_lock = "ON";$/;"	c
reset_fifo_at_first_lock	.\altera_mf.v	/^    parameter reset_fifo_at_first_lock ="ON" ;$/;"	c
reset_jtag	.\altera_mf.v	/^    task reset_jtag;    $/;"	t
reset_n	.\altera_mf.v	/^    input   reset_n;    $/;"	p
reset_n	.\altera_mf.v	/^    input reset_n;$/;"	p
reset_n	.\omsp_clock_module.v	/^input               reset_n;          \/\/ Reset Pin (low active, asynchronous)$/;"	p
reset_n	.\openMSP430.v	/^input                reset_n;                \/\/ Reset Pin (active low, asynchronous and non-glitchy)$/;"	p
reset_n	.\openMSP430_fpga.v	/^input  reset_n;$/;"	p
reset_n	.\tb_openMSP430_fpga.v	/^reg reset_n;$/;"	r
reset_self	.\altera_mf.v	/^    wire reset_self;$/;"	n
reshi	.\omsp_multiplier.v	/^reg  [15:0] reshi;$/;"	r
reshi_en	.\omsp_multiplier.v	/^wire        reshi_en = reshi_wr | result_clr | result_wr;$/;"	n
reshi_mux	.\omsp_multiplier.v	/^wire [15:0] reshi_mux  = reshi_rd   & {16{reg_rd[RESHI]}};$/;"	n
reshi_nxt	.\omsp_multiplier.v	/^wire [15:0] reshi_nxt;$/;"	n
reshi_rd	.\omsp_multiplier.v	/^wire [15:0] reshi_rd = early_read ? reshi_nxt  : reshi;$/;"	n
reshi_wr	.\omsp_multiplier.v	/^wire        reshi_wr = reg_wr[RESHI];$/;"	n
reslo	.\omsp_multiplier.v	/^reg  [15:0] reslo;$/;"	r
reslo	.\omsp_multiplier.v	/^wire [31:0] result     = {reshi, reslo};$/;"	n
reslo_en	.\omsp_multiplier.v	/^wire        reslo_en = reslo_wr | result_clr | result_wr;$/;"	n
reslo_mux	.\omsp_multiplier.v	/^wire [15:0] reslo_mux  = reslo_rd   & {16{reg_rd[RESLO]}};$/;"	n
reslo_nxt	.\omsp_multiplier.v	/^wire [15:0] reslo_nxt;$/;"	n
reslo_rd	.\omsp_multiplier.v	/^wire [15:0] reslo_rd = early_read ? reslo_nxt : reslo;$/;"	n
reslo_wr	.\omsp_multiplier.v	/^wire        reslo_wr = reg_wr[RESLO];$/;"	n
result	.\altera_mf.v	/^    integer count, result;$/;"	r
result	.\altera_mf.v	/^    integer phase_shift, result;$/;"	r
result	.\altera_mf.v	/^    output [WIDTH_MAN_EXP : 0] result;$/;"	p
result	.\altera_mf.v	/^    output [result_width - 1 : 0] result;$/;"	p
result	.\altera_mf.v	/^    output [width_out-1:0] result;  \/\/Required port$/;"	p
result	.\altera_mf.v	/^    output [width_result -1 : 0] result;$/;"	p
result	.\altera_mf.v	/^    output [widthr-1:0] result;  \/\/Required port$/;"	p
result	.\altera_mf.v	/^    reg [width_result -1 : 0] result;$/;"	r
result	.\omsp_multiplier.v	/^wire [31:0] result     = {reshi, reslo};$/;"	n
result	.\omsp_multiplier.v	/^wire [32:0] result_nxt  = {1'b0, result} + {1'b0, product_xp[31:0]};$/;"	n
result	.\omsp_multiplier.v	/^wire [32:0] result_nxt = {1'b0, result} + {1'b0, product[31:0]};$/;"	n
result_alignment	.\altera_mf.v	/^    parameter result_alignment = "LSB"; \/\/ or "MSB"$/;"	c
result_alignment	.\altera_mf.v	/^    parameter result_alignment = "LSB";$/;"	c
result_clr	.\omsp_multiplier.v	/^wire  result_clr;$/;"	n
result_ext	.\altera_mf.v	/^    wire  [width_result - 1 : 0] result_ext; $/;"	n
result_full	.\altera_mf.v	/^    reg [width_out+1:0] result_full;$/;"	r
result_full	.\altera_mf.v	/^    reg [width_result + 1 : 0] result_full ;$/;"	r
result_full2	.\altera_mf.v	/^    reg [width_out+1:0] result_full2;$/;"	r
result_int	.\altera_mf.v	/^    reg [int_width_result - 1 : 0] result_int;$/;"	r
result_int	.\altera_mf.v	/^    reg [width_out+1:0] result_int;$/;"	r
result_int_wire	.\altera_mf.v	/^    wire [width_out+1:0] result_int_wire;$/;"	n
result_msb	.\altera_mf.v	/^    parameter result_msb = (width_a + width_b - 1); $/;"	c
result_msb_stxiii	.\altera_mf.v	/^    parameter result_msb_stxiii = ((number_of_multipliers == 1) && (width_result > width_a + width_b))? $/;"	c
result_nxt	.\omsp_multiplier.v	/^wire [32:0] result_nxt  = {1'b0, result} + {1'b0, product_xp[31:0]};$/;"	n
result_nxt	.\omsp_multiplier.v	/^wire [32:0] result_nxt = {1'b0, result} + {1'b0, product[31:0]};$/;"	n
result_pad	.\altera_mf.v	/^    parameter result_pad = ((width_result - 1 + int_mult_diff_bit) > int_width_result)? (width_result + 1 + int_mult_diff_bit - int_width_result) :$/;"	c
result_pipe	.\altera_mf.v	/^    reg [(2*int_width_result - 1): 0] result_pipe [extra_latency : 0];$/;"	r
result_pipe	.\altera_mf.v	/^    reg [width_out+1:0] result_pipe [extra_latency:0];$/;"	r
result_pipe	.\altera_mf.v	/^    reg [width_result + 1 : 0] result_pipe [extra_accumulator_latency : 0];$/;"	r
result_pipe	.\altera_mf.v	/^    reg[WIDTH_MAN_EXP : 0] result_pipe[LATENCY : 0];$/;"	r
result_pipe1	.\altera_mf.v	/^    reg [(2*int_width_result - 1): 0] result_pipe1 [extra_latency : 0];$/;"	r
result_stxii_ext	.\altera_mf.v	/^    wire  [width_result - 1 : 0] result_stxii_ext;$/;"	n
result_stxii_ext_temp	.\altera_mf.v	/^    wire [result_pad + int_width_result - 1 - int_mult_diff_bit : 0] result_stxii_ext_temp;$/;"	n
result_stxii_ext_temp2	.\altera_mf.v	/^    wire [result_pad + int_width_result - 1 - int_mult_diff_bit : 0] result_stxii_ext_temp2;$/;"	n
result_stxiii	.\altera_mf.v	/^    wire [width_result - 1 : 0] result_stxiii;$/;"	n
result_stxiii_ext	.\altera_mf.v	/^    wire [width_result - 1 : 0] result_stxiii_ext;$/;"	n
result_stxiii_pad	.\altera_mf.v	/^    parameter result_stxiii_pad = (width_result > width_a + width_b)? $/;"	c
result_stxiii_temp	.\altera_mf.v	/^    wire [result_pad + int_width_result + 1 - int_mult_diff_bit : 0] result_stxiii_temp;$/;"	n
result_stxiii_temp2	.\altera_mf.v	/^    wire [result_pad + int_width_result - int_mult_diff_bit : 0] result_stxiii_temp2;$/;"	n
result_stxiii_temp3	.\altera_mf.v	/^    wire [result_pad + int_width_result - int_mult_diff_bit : 0] result_stxiii_temp3;$/;"	n
result_width	.\altera_mf.v	/^    parameter result_width = 1;$/;"	c
result_wr	.\omsp_multiplier.v	/^wire  result_wr;$/;"	n
resultpipe	.\altera_mf.v	/^    reg [widthr-1:0] resultpipe [(pipeline +1):0];$/;"	r
retain_addr	.\altera_mf.v	/^        output   [0:0]  retain_addr;$/;"	p
retime_data	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] retime_data;$/;"	r
retime_data	.\altera_mf.v	/^    wire retime_data;$/;"	n
return_string	.\altera_mf.v	/^    reg [8*`CYCIIIGL_PLL_WORD_LENGTH:1] return_string;$/;"	r
return_string	.\altera_mf.v	/^    reg [8*`CYCIII_PLL_WORD_LENGTH:1] return_string;$/;"	r
return_string	.\altera_mf.v	/^    reg [8*`STXIII_PLL_WORD_LENGTH:1] return_string;$/;"	r
return_string	.\altera_mf.v	/^    reg [8*`STXII_PLL_WORD_LENGTH:1] return_string;$/;"	r
return_string	.\altera_mf.v	/^    reg [8*`STX_PLL_WORD_LENGTH:1] return_string;$/;"	r
return_string	.\altera_mf.v	/^reg [8*`STR_LENGTH:1] return_string;$/;"	r
rnd_bit_cnt	.\altera_mf.v	/^    integer rnd_bit_cnt;$/;"	r
rom	.\rom.v	/^module rom ($/;"	m
rom16x2048	.\rom16x2048.v	/^module rom16x2048 ($/;"	m
rom16x2048	.\work\rom16x2048\_primary.vhd	/^entity rom16x2048 is$/;"	e
rotate	.\altera_mf.v	/^    input rotate;$/;"	p
rotate_aclr	.\altera_mf.v	/^    parameter rotate_aclr = "NONE";$/;"	c
rotate_int	.\altera_mf.v	/^    tri0 rotate_int;$/;"	n
rotate_out_reg	.\altera_mf.v	/^    reg rotate_out_reg;$/;"	r
rotate_out_reg_wire_clk	.\altera_mf.v	/^    wire rotate_out_reg_wire_clk;$/;"	n
rotate_out_reg_wire_clr	.\altera_mf.v	/^    tri0 rotate_out_reg_wire_clr;$/;"	n
rotate_out_reg_wire_en	.\altera_mf.v	/^    tri1 rotate_out_reg_wire_en;$/;"	n
rotate_out_wire	.\altera_mf.v	/^    wire rotate_out_wire;$/;"	n
rotate_output_aclr	.\altera_mf.v	/^    parameter rotate_output_aclr = "NONE";$/;"	c
rotate_output_register	.\altera_mf.v	/^    parameter rotate_output_register = "UNREGISTERED";$/;"	c
rotate_pipe_reg	.\altera_mf.v	/^    reg rotate_pipe_reg;$/;"	r
rotate_pipe_wire	.\altera_mf.v	/^    wire rotate_pipe_wire;$/;"	n
rotate_pipe_wire_clk	.\altera_mf.v	/^    wire rotate_pipe_wire_clk;$/;"	n
rotate_pipe_wire_clr	.\altera_mf.v	/^    tri0 rotate_pipe_wire_clr;$/;"	n
rotate_pipe_wire_en	.\altera_mf.v	/^    tri1 rotate_pipe_wire_en;$/;"	n
rotate_pipeline_aclr	.\altera_mf.v	/^    parameter rotate_pipeline_aclr = "NONE";$/;"	c
rotate_pipeline_register	.\altera_mf.v	/^    parameter rotate_pipeline_register = "UNREGISTERED";$/;"	c
rotate_reg	.\altera_mf.v	/^    reg rotate_reg;$/;"	r
rotate_reg_wire_clk	.\altera_mf.v	/^    wire rotate_reg_wire_clk;$/;"	n
rotate_reg_wire_clr	.\altera_mf.v	/^    tri0 rotate_reg_wire_clr;$/;"	n
rotate_reg_wire_en	.\altera_mf.v	/^    tri1 rotate_reg_wire_en;$/;"	n
rotate_register	.\altera_mf.v	/^    parameter rotate_register = "UNREGISTERED";$/;"	c
rotate_wire	.\altera_mf.v	/^    wire rotate_wire;$/;"	n
round_bit	.\altera_mf.v	/^    reg round_bit;$/;"	r
round_block_result	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] round_block_result;$/;"	r
round_checking	.\altera_mf.v	/^    reg round_checking;$/;"	r
round_happen	.\altera_mf.v	/^    reg round_happen;$/;"	r
round_position	.\altera_mf.v	/^    parameter round_position = ((output_rounding != "NO") || (output_saturate_type == "SYMMETRIC")) ?$/;"	c
round_sat_blk_res	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] round_sat_blk_res;$/;"	r
round_sat_in_reg	.\altera_mf.v	/^    reg  [2*int_width_result - 1: 0] round_sat_in_reg;$/;"	r
round_sat_in_result	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] round_sat_in_result;$/;"	r
rreq	.\altera_mf.v	/^    input wreq, rreq;$/;"	p
rs232_rx	.\uart_rx.v	/^input rs232_rx;$/;"	p
rs232_rx	.\uart_top.v	/^input               rs232_rx;$/;"	p
rs232_rx0	.\uart_rx.v	/^reg rs232_rx0,rs232_rx1,rs232_rx2,rs232_rx3;$/;"	r
rs232_rx1	.\uart_rx.v	/^reg rs232_rx0,rs232_rx1,rs232_rx2,rs232_rx3;$/;"	r
rs232_rx2	.\uart_rx.v	/^reg rs232_rx0,rs232_rx1,rs232_rx2,rs232_rx3;$/;"	r
rs232_rx3	.\uart_rx.v	/^reg rs232_rx0,rs232_rx1,rs232_rx2,rs232_rx3;$/;"	r
rs232_tx	.\uart_top.v	/^output              rs232_tx;$/;"	p
rs232_tx	.\uart_tx.v	/^output rs232_tx;$/;"	p
rs232_tx_r	.\uart_tx.v	/^reg rs232_tx_r;$/;"	r
rst	.\omsp_sync_cell.v	/^input               rst;          \/\/ Receiving reset (active high)$/;"	p
rst_a	.\omsp_sync_reset.v	/^input               rst_a;        \/\/ Asynchronous reset$/;"	p
rst_n	.\uart_rx.v	/^input rst_n;$/;"	p
rst_n	.\uart_speed_select.v	/^input rst_n;    \/\/低电平复位信号$/;"	p
rst_n	.\uart_tx.v	/^input rst_n;$/;"	p
rst_s	.\omsp_sync_reset.v	/^output              rst_s;        \/\/ Synchronized reset$/;"	p
rsu_watchdog_counter	.\altera_mf.v	/^    parameter    rsu_watchdog_counter    =    100000000;$/;"	c
run_cpu	.\omsp_dbg.v	/^wire        run_cpu  = cpu_ctl_wr & dbg_din[`RUN]   &  dbg_halt_st;$/;"	n
rup	.\altera_mf.v	/^    input    rup;$/;"	p
rx_active	.\omsp_dbg_uart.v	/^wire rx_active = (uart_state==RX_DATA1) | (uart_state==RX_DATA2) | (uart_state==RX_CMD);$/;"	n
rx_align_data_reg	.\altera_mf.v	/^    parameter rx_align_data_reg = "RISING_EDGE";$/;"	c
rx_bps	.\tb_openMSP430_fpga.v	/^integer rx_bps;$/;"	r
rx_cda_max	.\altera_mf.v	/^    output [number_of_channels -1: 0] rx_cda_max;$/;"	p
rx_cda_max	.\altera_mf.v	/^    output rx_cda_max;$/;"	p
rx_cda_max	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] rx_cda_max;$/;"	r
rx_cda_max	.\altera_mf.v	/^    reg rx_cda_max;$/;"	r
rx_cda_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0]  rx_cda_reset;$/;"	p
rx_cda_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_cda_reset;$/;"	p
rx_cda_reset	.\altera_mf.v	/^    input rx_cda_reset;$/;"	p
rx_cda_reset	.\altera_mf.v	/^    tri0 rx_cda_reset;$/;"	n
rx_cda_reset	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_cda_reset;$/;"	n
rx_channel_data_align	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_channel_data_align;$/;"	p
rx_channel_data_align	.\altera_mf.v	/^    input rx_channel_data_align;$/;"	p
rx_channel_data_align	.\altera_mf.v	/^    tri0 rx_channel_data_align;$/;"	n
rx_channel_data_align	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_channel_data_align;$/;"	n
rx_channel_data_align_int	.\altera_mf.v	/^    wire[number_of_channels -1 :0] rx_channel_data_align_int;$/;"	n
rx_channel_data_align_pre	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] rx_channel_data_align_pre;$/;"	r
rx_channel_data_align_pre	.\altera_mf.v	/^    reg rx_channel_data_align_pre;$/;"	r
rx_coreclk	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_coreclk;$/;"	p
rx_coreclk	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_coreclk;$/;"	n
rx_data	.\uart_rx.v	/^output[7:0] rx_data;$/;"	p
rx_data	.\uart_top.v	/^wire          [7:0] rx_data;$/;"	n
rx_data	.\uart_tx.v	/^input[7:0] rx_data;$/;"	p
rx_data_align	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_data_align;$/;"	p
rx_data_align	.\altera_mf.v	/^    input rx_data_align;$/;"	p
rx_data_align_clk	.\altera_mf.v	/^    wire rx_data_align_clk;$/;"	n
rx_data_align_int	.\altera_mf.v	/^    wire [number_of_channels -1 :0] rx_data_align_int;$/;"	n
rx_data_align_int	.\altera_mf.v	/^    wire rx_data_align_int;$/;"	n
rx_data_align_pulldown	.\altera_mf.v	/^    wire rx_data_align_pulldown;$/;"	n
rx_data_align_reg	.\altera_mf.v	/^    reg [number_of_channels -1 :0] rx_data_align_reg;$/;"	r
rx_data_align_reg	.\altera_mf.v	/^    reg rx_data_align_reg;$/;"	r
rx_data_align_reset	.\altera_mf.v	/^    input rx_data_align_reset;$/;"	p
rx_data_align_reset	.\altera_mf.v	/^    tri0 rx_data_align_reset;$/;"	n
rx_data_r	.\uart_rx.v	/^reg[7:0] rx_data_r;     \/\/串口接收数据寄存器，保存直至下一个数据来到$/;"	r
rx_data_reset	.\altera_mf.v	/^    input rx_data_reset;$/;"	p
rx_ddio_in	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_ddio_in;$/;"	r
rx_deskew	.\altera_mf.v	/^    input rx_deskew;$/;"	p
rx_deskew	.\altera_mf.v	/^    tri0 rx_deskew;$/;"	n
rx_divfwdclk	.\altera_mf.v	/^    output [number_of_channels -1: 0] rx_divfwdclk;$/;"	p
rx_divfwdclk	.\altera_mf.v	/^    output rx_divfwdclk;$/;"	p
rx_divfwdclk_int	.\altera_mf.v	/^    reg rx_divfwdclk_int;$/;"	r
rx_dpa_clk	.\altera_mf.v	/^    output rx_dpa_clk;$/;"	p
rx_dpa_clk	.\altera_mf.v	/^    reg rx_dpa_clk;$/;"	r
rx_dpa_hold	.\altera_mf.v	/^    input rx_dpa_hold;$/;"	p
rx_dpa_loaden	.\altera_mf.v	/^    output rx_dpa_loaden;$/;"	p
rx_dpa_lock_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_dpa_lock_reset;$/;"	p
rx_dpa_lock_reset	.\altera_mf.v	/^    input rx_dpa_lock_reset;$/;"	p
rx_dpa_lock_reset	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_dpa_lock_reset;$/;"	n
rx_dpa_locked	.\altera_mf.v	/^    output [number_of_channels -1: 0] rx_dpa_locked;$/;"	p
rx_dpa_locked	.\altera_mf.v	/^    output rx_dpa_locked;$/;"	p
rx_dpa_locked	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] rx_dpa_locked;$/;"	r
rx_dpa_locked	.\altera_mf.v	/^    reg rx_dpa_locked;$/;"	r
rx_dpa_locked	.\altera_mf.v	/^    wire rx_dpa_locked;$/;"	n
rx_dpa_reset	.\altera_mf.v	/^    input rx_dpa_reset;$/;"	p
rx_dpa_sync_reg	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] rx_dpa_sync_reg;$/;"	r
rx_dpa_sync_reg_clk	.\altera_mf.v	/^    wire rx_dpa_sync_reg_clk;$/;"	n
rx_dpaclock	.\altera_mf.v	/^    input rx_dpaclock;$/;"	p
rx_dpaclock_wire	.\altera_mf.v	/^    wire rx_dpaclock_wire;$/;"	n
rx_dpll_enable	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_dpll_enable;$/;"	p
rx_dpll_enable	.\altera_mf.v	/^    input rx_dpll_enable;$/;"	p
rx_dpll_enable	.\altera_mf.v	/^    tri1 rx_dpll_enable;$/;"	n
rx_dpll_enable	.\altera_mf.v	/^    tri1[number_of_channels -1 :0] rx_dpll_enable;$/;"	n
rx_dpll_hold	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_dpll_hold;$/;"	p
rx_dpll_hold	.\altera_mf.v	/^    input rx_dpll_hold;$/;"	p
rx_dpll_hold	.\altera_mf.v	/^    tri0 rx_dpll_hold;$/;"	n
rx_dpll_hold	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_dpll_hold;$/;"	n
rx_dpll_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_dpll_reset;$/;"	p
rx_dpll_reset	.\altera_mf.v	/^    input rx_dpll_reset;$/;"	p
rx_dpll_reset	.\altera_mf.v	/^    tri0 rx_dpll_reset;$/;"	n
rx_dpll_reset	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_dpll_reset;$/;"	n
rx_enable	.\altera_mf.v	/^    input rx_enable;$/;"	p
rx_enable0	.\altera_mf.v	/^    input rx_enable0;$/;"	p
rx_enable1	.\altera_mf.v	/^    input rx_enable1;$/;"	p
rx_enable_dly	.\altera_mf.v	/^    reg rx_enable_dly;$/;"	r
rx_fastclk	.\altera_mf.v	/^    input rx_fastclk;$/;"	p
rx_fastclk_dly	.\altera_mf.v	/^    reg rx_fastclk_dly;$/;"	r
rx_fastclk_dly2	.\altera_mf.v	/^    reg rx_fastclk_dly2;$/;"	r
rx_fastclk_dly3	.\altera_mf.v	/^    reg rx_fastclk_dly3;$/;"	r
rx_fifo_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_fifo_reset;$/;"	p
rx_fifo_reset	.\altera_mf.v	/^    input rx_fifo_reset;$/;"	p
rx_fifo_reset	.\altera_mf.v	/^    tri0 rx_fifo_reset;$/;"	n
rx_fifo_reset	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_fifo_reset;$/;"	n
rx_flag	.\tb_openMSP430_fpga.v	/^reg rx_flag;$/;"	r
rx_hi_valid	.\omsp_dbg_i2c.v	/^wire rx_hi_valid = (dbg_state==RX_BYTE_HI) & shift_rx_data_done;$/;"	n
rx_hold_clk	.\altera_mf.v	/^    wire rx_hold_clk;$/;"	n
rx_in	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_in;$/;"	p
rx_in	.\altera_mf.v	/^    input rx_in;$/;"	p
rx_in_int	.\altera_mf.v	/^    reg rx_in_int;$/;"	r
rx_in_latched	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] rx_in_latched;$/;"	r
rx_in_reg	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] rx_in_reg;$/;"	r
rx_in_reg0	.\altera_mf.v	/^    reg rx_in_reg0;$/;"	r
rx_in_reg1	.\altera_mf.v	/^    reg rx_in_reg1;$/;"	r
rx_in_reg_neg	.\altera_mf.v	/^    reg rx_in_reg_neg;$/;"	r
rx_in_reg_pos	.\altera_mf.v	/^    reg rx_in_reg_pos;$/;"	r
rx_in_wire	.\altera_mf.v	/^    wire rx_in_wire;$/;"	n
rx_inclock	.\altera_mf.v	/^    input rx_inclock;$/;"	p
rx_int	.\uart_rx.v	/^output rx_int;$/;"	p
rx_int	.\uart_rx.v	/^reg rx_int;$/;"	r
rx_int	.\uart_top.v	/^wire                rx_int;$/;"	n
rx_int	.\uart_tx.v	/^input rx_int;$/;"	p
rx_int0	.\uart_tx.v	/^reg rx_int0,rx_int1,rx_int2;    \/\/rx_int信号寄存器，捕捉下降沿滤波用$/;"	r
rx_int1	.\uart_tx.v	/^reg rx_int0,rx_int1,rx_int2;    \/\/rx_int信号寄存器，捕捉下降沿滤波用$/;"	r
rx_int2	.\uart_tx.v	/^reg rx_int0,rx_int1,rx_int2;    \/\/rx_int信号寄存器，捕捉下降沿滤波用$/;"	r
rx_lo_valid	.\omsp_dbg_i2c.v	/^wire rx_lo_valid = (dbg_state==RX_BYTE_LO) & shift_rx_data_done;$/;"	n
rx_locked	.\altera_mf.v	/^    input rx_locked;$/;"	p
rx_locked	.\altera_mf.v	/^    output rx_locked;$/;"	p
rx_locked_int	.\altera_mf.v	/^    wire rx_locked_int;$/;"	n
rx_out	.\altera_mf.v	/^    output [REGISTER_WIDTH -1: 0] rx_out;$/;"	p
rx_out	.\altera_mf.v	/^    output [deserialization_factor -1: 0] rx_out;$/;"	p
rx_out	.\altera_mf.v	/^    output rx_out;$/;"	p
rx_out	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_out;$/;"	r
rx_out	.\altera_mf.v	/^    reg rx_out;$/;"	r
rx_out	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] rx_out;$/;"	n
rx_out_hold	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_out_hold;$/;"	r
rx_out_int	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] rx_out_int;$/;"	r
rx_out_int	.\altera_mf.v	/^    reg rx_out_int;$/;"	r
rx_out_int	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] rx_out_int;$/;"	n
rx_out_odd	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_out_odd;$/;"	r
rx_out_odd_mode	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_out_odd_mode;$/;"	r
rx_out_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_out_reg;$/;"	r
rx_out_reg	.\altera_mf.v	/^    reg [deserialization_factor -1: 0]  rx_out_reg;$/;"	r
rx_outclk_int	.\altera_mf.v	/^    wire rx_outclk_int;$/;"	n
rx_outclock	.\altera_mf.v	/^    output rx_outclock;$/;"	p
rx_outclock_resource	.\altera_mf.v	/^    parameter rx_outclock_resource = "auto";$/;"	c
rx_parallel_load_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_parallel_load_reg;$/;"	r
rx_pll_enable	.\altera_mf.v	/^    input rx_pll_enable;$/;"	p
rx_pll_enable	.\altera_mf.v	/^    tri1 rx_pll_enable;$/;"	n
rx_readclock	.\altera_mf.v	/^    input rx_readclock;$/;"	p
rx_reg_clk	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] rx_reg_clk;$/;"	n
rx_reg_clk	.\altera_mf.v	/^    wire rx_reg_clk;$/;"	n
rx_reset	.\altera_mf.v	/^    input [number_of_channels -1 :0] rx_reset;$/;"	p
rx_reset	.\altera_mf.v	/^    input rx_reset;$/;"	p
rx_reset	.\altera_mf.v	/^    tri0 rx_reset;$/;"	n
rx_reset	.\altera_mf.v	/^    tri0[number_of_channels -1 :0] rx_reset;$/;"	n
rx_shift_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_shift_reg;$/;"	r
rx_shift_reg	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] rx_shift_reg;$/;"	r
rx_shift_reg1	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_shift_reg1;$/;"	r
rx_shift_reg2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_shift_reg2;$/;"	r
rx_slowclk	.\altera_mf.v	/^    input rx_slowclk;$/;"	p
rx_slowclk	.\altera_mf.v	/^    wire rx_slowclk;$/;"	n
rx_slowclk_pre	.\altera_mf.v	/^    reg rx_slowclk_pre;$/;"	r
rx_sync_reg1	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg1;$/;"	r
rx_sync_reg1_buf1	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg1_buf1;$/;"	r
rx_sync_reg1_buf1_pipe	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg1_buf1_pipe;$/;"	r
rx_sync_reg1_buf2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg1_buf2;$/;"	r
rx_sync_reg1_buf2_pipe	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg1_buf2_pipe;$/;"	r
rx_sync_reg2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg2;$/;"	r
rx_sync_reg2_buf1	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg2_buf1;$/;"	r
rx_sync_reg2_buf2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rx_sync_reg2_buf2;$/;"	r
rx_syncclk	.\altera_mf.v	/^    input rx_syncclk;$/;"	p
rx_syncclock	.\altera_mf.v	/^    input rx_syncclock;$/;"	p
rx_temp_data	.\uart_rx.v	/^reg[7:0] rx_temp_data;  \/\/当前接收数据寄存器$/;"	r
rxd_buf	.\omsp_dbg_uart.v	/^reg  [1:0] rxd_buf;$/;"	r
rxd_edge	.\omsp_dbg_uart.v	/^wire rxd_edge =  rxd_maj ^  rxd_maj_nxt;$/;"	n
rxd_fe	.\omsp_dbg_uart.v	/^wire rxd_fe   =  rxd_maj & ~rxd_maj_nxt;$/;"	n
rxd_maj	.\omsp_dbg_uart.v	/^reg        rxd_maj;$/;"	r
rxd_maj_nxt	.\omsp_dbg_uart.v	/^wire       rxd_maj_nxt = (uart_rxd   & rxd_buf[0]) |$/;"	n
rxd_re	.\omsp_dbg_uart.v	/^wire rxd_re   = ~rxd_maj &  rxd_maj_nxt;$/;"	n
rxd_s	.\omsp_dbg_uart.v	/^wire rxd_s    =  rxd_maj;$/;"	n
rxd_start	.\omsp_dbg_uart.v	/^wire       rxd_start    = (xfer_bit==4'h0) & rxd_fe & ((uart_state!=RX_SYNC));$/;"	n
rxpdat1	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] rxpdat1;$/;"	n
rxpdat2	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rxpdat2;$/;"	r
rxpdat3	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rxpdat3;$/;"	r
rxpdatout	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] rxpdatout;$/;"	r
s	.\altera_mf.v	/^        input [8*16:1] s;$/;"	p
s	.\altera_mf.v	/^    input [8*16:1] s;$/;"	p
s	.\altera_mf.v	/^input [8*16:1] s;$/;"	p
s3_address_aclr_a	.\altera_mf.v	/^   parameter s3_address_aclr_a =  ((family_has_stratixv_style_ram || family_stratixiii) && (is_lutram != 1) && (outdata_reg_a != "CLOCK0") && (outdata_reg_a != "CLOCK1")) ? 1 : 0;$/;"	c
s3_address_aclr_a	.\altera_mf.v	/^   parameter s3_address_aclr_a =  ((is_lutram != 1) && (outdata_reg_a != "CLOCK0") && (outdata_reg_a != "CLOCK1")) ? 1 : 0;$/;"	c
s3_address_aclr_b	.\altera_mf.v	/^   parameter s3_address_aclr_b =  ((family_has_stratixv_style_ram || family_stratixiii) && (is_lutram != 1) && (outdata_reg_b != "CLOCK0") && (outdata_reg_b != "CLOCK1")) ? 1 : 0;$/;"	c
s3_address_aclr_b	.\altera_mf.v	/^   parameter s3_address_aclr_b =  ((is_lutram != 1) && (outdata_reg_b != "CLOCK0") && (outdata_reg_b != "CLOCK1")) ? 1 : 0;$/;"	c
safe_mode_halt	.\altera_mf.v	/^    parameter    safe_mode_halt    =    0;$/;"	c
safe_mode_retry	.\altera_mf.v	/^    parameter    safe_mode_retry    =    1;$/;"	c
safe_mode_revert	.\altera_mf.v	/^    parameter    safe_mode_revert    =    0;$/;"	c
safe_mode_revert_addr	.\altera_mf.v	/^    parameter    safe_mode_revert_addr    =    0;$/;"	c
same_clock_pulse0	.\altera_mf.v	/^    reg same_clock_pulse0;$/;"	r
same_clock_pulse1	.\altera_mf.v	/^    reg same_clock_pulse1;$/;"	r
sample_length	.\altera_mf.v	/^	parameter sample_length		= 8'd0;$/;"	c
sample_length	.\altera_mf.v	/^        parameter sample_length = 8'd100;$/;"	c
sample_tb	.\altera_mf.v	/^	parameter sample_tb		= 5'd9;$/;"	c
sat_all_bit_cnt	.\altera_mf.v	/^    integer sat_all_bit_cnt;$/;"	r
sat_bit_cnt	.\altera_mf.v	/^    integer sat_bit_cnt;$/;"	r
sat_bits_or	.\altera_mf.v	/^    reg sat_bits_or;$/;"	r
sat_block_result	.\altera_mf.v	/^    reg [2*int_width_result - 1: 0] sat_block_result;$/;"	r
sat_for_ini	.\altera_mf.v	/^    parameter sat_for_ini = ((multiplier_saturation == "NO") && (accumulator_saturation == "NO")) ? 0 : (int_width_a + int_width_b - 34);$/;"	c
sat_ini_value	.\altera_mf.v	/^    parameter sat_ini_value = (((multiplier01_saturation == "NO") && (multiplier23_saturation == "NO"))? 3:$/;"	c
sat_msb	.\altera_mf.v	/^    parameter sat_msb = (int_width_a + int_width_b - 1);$/;"	c
saturation_position	.\altera_mf.v	/^    parameter saturation_position = (output_saturation != "NO") ? (chainout_saturation == "NO")?  $/;"	c
scan_chain	.\altera_mf.v	/^    input L0, L0_mode, L1, L1_mode, G0, G0_mode, G1, G1_mode, G2, G2_mode, G3, G3_mode, E0, E0_mode, E1, E1_mode, E2, E2_mode, E3, E3_mode, scan_chain, refclk, m_mod;$/;"	p
scan_chain	.\altera_mf.v	/^    parameter scan_chain = "long";$/;"	c
scan_chain	.\altera_mf.v	/^    reg [8*5:1] scan_chain;$/;"	r
scan_chain	.\altera_mf.v	/^parameter   scan_chain                = "LONG";$/;"	c
scan_chain_length	.\altera_mf.v	/^    integer scan_chain_length;$/;"	r
scan_chain_mif_file	.\altera_mf.v	/^    parameter scan_chain_mif_file = "";$/;"	c
scan_chain_mif_file	.\altera_mf.v	/^parameter scan_chain_mif_file = ""; $/;"	c
scan_chain_mif_file	.\altera_mf.v	/^parameter scan_chain_mif_file = "UNUSED";$/;"	c
scan_clk	.\omsp_wakeup_cell.v	/^input          scan_clk;       \/\/ Scan clock$/;"	p
scan_data	.\altera_mf.v	/^    reg [-1:142]  scan_data;$/;"	r
scan_data	.\altera_mf.v	/^    reg [-1:232] scan_data;$/;"	r
scan_data	.\altera_mf.v	/^    reg [173:0] scan_data;$/;"	r
scan_data	.\altera_mf.v	/^    reg [288:0] scan_data;$/;"	r
scan_enable	.\omsp_clock_gate.v	/^input          scan_enable;    \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_clock_module.v	/^input               scan_enable;      \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_execution_unit.v	/^input               scan_enable;   \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_frontend.v	/^input                scan_enable;      \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_mem_backbone.v	/^input                scan_enable;       \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_multiplier.v	/^input               scan_enable;    \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_register_file.v	/^input               scan_enable;  \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\omsp_watchdog.v	/^input               scan_enable;    \/\/ Scan enable (active during scan shifting)$/;"	p
scan_enable	.\openMSP430.v	/^input                scan_enable;            \/\/ ASIC ONLY: Scan enable (active during scan shifting)$/;"	p
scan_length	.\altera_mf.v	/^    reg [ `DEFAULT_SCAN_LENGTH - 1 : 0 ]    scan_length;$/;"	r
scan_mode	.\omsp_clock_module.v	/^input               scan_mode;        \/\/ Scan mode$/;"	p
scan_mode	.\omsp_clock_mux.v	/^input          scan_mode;      \/\/ Scan mode (clk_in0 is selected in scan mode)$/;"	p
scan_mode	.\omsp_scan_mux.v	/^input               scan_mode;     \/\/ Scan mode$/;"	p
scan_mode	.\omsp_sfr.v	/^input               scan_mode;    \/\/ Scan mode$/;"	p
scan_mode	.\omsp_wakeup_cell.v	/^input          scan_mode;      \/\/ Scan mode$/;"	p
scan_mode	.\omsp_watchdog.v	/^input               scan_mode;      \/\/ Scan mode$/;"	p
scan_mode	.\openMSP430.v	/^input                scan_mode;              \/\/ ASIC ONLY: Scan mode$/;"	p
scan_rst	.\omsp_wakeup_cell.v	/^input          scan_rst;       \/\/ Scan reset$/;"	p
scan_time	.\altera_mf.v	/^    reg [ `DEFAULT_SCAN_LENGTH - 1 : 0 ]    scan_time;$/;"	r
scan_type	.\altera_mf.v	/^    reg [ `TYPE_SCAN_LENGTH : 0 ]           scan_type;$/;"	r
scan_values	.\altera_mf.v	/^    reg [ sld_node_total_length  - 1 : 0 ]  scan_values;$/;"	r
scanaclr	.\altera_mf.v	/^    input scanaclr;$/;"	p
scanaclr	.\altera_mf.v	/^input       scanaclr;$/;"	p
scanaclr_falling_time	.\altera_mf.v	/^    time    scanaclr_falling_time;$/;"	r
scanaclr_ipd	.\altera_mf.v	/^    wire scanaclr_ipd;$/;"	n
scanaclr_last_value	.\altera_mf.v	/^    reg scanaclr_last_value;$/;"	r
scanaclr_rising_time	.\altera_mf.v	/^    time    scanaclr_rising_time;$/;"	r
scanclk	.\altera_mf.v	/^    input scanclk;$/;"	p
scanclk	.\altera_mf.v	/^input       scanclk;$/;"	p
scanclk_cycles	.\altera_mf.v	/^    integer scanclk_cycles;$/;"	r
scanclk_ipd	.\altera_mf.v	/^    wire scanclk_ipd;$/;"	n
scanclk_last_rising_edge	.\altera_mf.v	/^    time    scanclk_last_rising_edge;$/;"	r
scanclk_last_value	.\altera_mf.v	/^    reg scanclk_last_value;$/;"	r
scanclk_period	.\altera_mf.v	/^    integer scanclk_period;$/;"	r
scanclk_pulldown	.\altera_mf.v	/^tri0 scanclk_pulldown;$/;"	n
scanclkena	.\altera_mf.v	/^    input scanclkena;$/;"	p
scanclkena	.\altera_mf.v	/^input       scanclkena;$/;"	p
scanclkena_ipd	.\altera_mf.v	/^    wire scanclkena_ipd;$/;"	n
scanclkena_pullup	.\altera_mf.v	/^tri1 scanclkena_pullup;$/;"	n
scanclkena_reg	.\altera_mf.v	/^    reg scanclkena_reg; \/\/ register scanclkena on negative edge of scanclk$/;"	r
scanclr_clk_violation	.\altera_mf.v	/^    reg scanclr_clk_violation;$/;"	r
scanclr_pulldown	.\altera_mf.v	/^tri0 scanclr_pulldown;$/;"	n
scanclr_violation	.\altera_mf.v	/^    reg scanclr_violation;$/;"	r
scandata	.\altera_mf.v	/^    input scandata;$/;"	p
scandata	.\altera_mf.v	/^input       scandata;$/;"	p
scandata_in	.\altera_mf.v	/^    reg scandata_in, scandata_out; \/\/ hold scan data in negative-edge triggered ff (on either side on chain)$/;"	r
scandata_ipd	.\altera_mf.v	/^    wire scandata_ipd;$/;"	n
scandata_out	.\altera_mf.v	/^    reg scandata_in, scandata_out; \/\/ hold scan data in negative-edge triggered ff (on either side on chain)$/;"	r
scandata_pulldown	.\altera_mf.v	/^tri0 scandata_pulldown;$/;"	n
scandataout	.\altera_mf.v	/^    output scandataout;$/;"	p
scandataout	.\altera_mf.v	/^output        scandataout;$/;"	p
scandataout_tmp	.\altera_mf.v	/^    reg scandataout_tmp;$/;"	r
scandataout_tmp	.\altera_mf.v	/^    wire scandataout_tmp;$/;"	n
scandataout_trigger	.\altera_mf.v	/^    reg scandataout_trigger;$/;"	r
scandataout_wire	.\altera_mf.v	/^wire scandataout_wire;$/;"	n
scandone	.\altera_mf.v	/^    output scandone;$/;"	p
scandone	.\altera_mf.v	/^output        scandone;$/;"	p
scandone_tmp	.\altera_mf.v	/^    reg scandone_tmp;$/;"	r
scandone_tmp_last_value	.\altera_mf.v	/^    reg scandone_tmp_last_value;$/;"	r
scandone_wire	.\altera_mf.v	/^wire scandone_wire;$/;"	n
scanina	.\altera_mf.v	/^    input [width_a -1 : 0] scanina;$/;"	p
scanina	.\altera_mf.v	/^    tri0 [width_a -1 : 0] scanina;$/;"	n
scanina_z	.\altera_mf.v	/^    tri0  [int_width_a - 1 : 0] scanina_z;$/;"	n
scaninb	.\altera_mf.v	/^    input [width_b -1 : 0] scaninb;$/;"	p
scaninb	.\altera_mf.v	/^    tri0 [width_b -1 : 0] scaninb;$/;"	n
scaninb_z	.\altera_mf.v	/^    tri0  [int_width_b - 1 : 0] scaninb_z;$/;"	n
scanouta	.\altera_mf.v	/^    output [width_a -1 : 0] scanouta;$/;"	p
scanouta	.\altera_mf.v	/^    wire [int_width_a -1 : 0] scanouta;$/;"	n
scanouta	.\altera_mf.v	/^    wire [width_a -1 : 0] scanouta;$/;"	n
scanouta_aclr	.\altera_mf.v	/^    parameter scanouta_aclr = "NONE";$/;"	c
scanouta_reg	.\altera_mf.v	/^    reg [int_width_a -1 : 0] scanouta_reg;$/;"	r
scanouta_reg_wire_clk	.\altera_mf.v	/^    wire scanouta_reg_wire_clk;$/;"	n
scanouta_reg_wire_clr	.\altera_mf.v	/^    tri0 scanouta_reg_wire_clr;$/;"	n
scanouta_reg_wire_en	.\altera_mf.v	/^    tri1 scanouta_reg_wire_en;$/;"	n
scanouta_register	.\altera_mf.v	/^    parameter scanouta_register = "UNREGISTERED";$/;"	c
scanouta_wire	.\altera_mf.v	/^    wire [int_width_a -1 : 0] scanouta_wire;$/;"	n
scanoutb	.\altera_mf.v	/^    output [width_b -1 : 0] scanoutb;$/;"	p
scanoutb	.\altera_mf.v	/^    wire [int_width_b -1 : 0] scanoutb; $/;"	n
scanoutb	.\altera_mf.v	/^    wire [width_b -1 : 0] scanoutb;$/;"	n
scanread	.\altera_mf.v	/^    input scanread;$/;"	p
scanread	.\altera_mf.v	/^input       scanread;$/;"	p
scanread_active_edge	.\altera_mf.v	/^    time    scanread_active_edge;$/;"	r
scanread_ipd	.\altera_mf.v	/^    wire scanread_ipd;$/;"	n
scanread_pulldown	.\altera_mf.v	/^tri0 scanread_pulldown;$/;"	n
scanread_reg	.\altera_mf.v	/^    reg scanread_reg;$/;"	r
scanread_setup_violation	.\altera_mf.v	/^    reg scanread_setup_violation;$/;"	r
scanwrite	.\altera_mf.v	/^    input scanwrite;$/;"	p
scanwrite	.\altera_mf.v	/^input       scanwrite;$/;"	p
scanwrite_enabled	.\altera_mf.v	/^    reg scanwrite_enabled;$/;"	r
scanwrite_ipd	.\altera_mf.v	/^    wire scanwrite_ipd;$/;"	n
scanwrite_last_value	.\altera_mf.v	/^    reg scanwrite_last_value;$/;"	r
scanwrite_pulldown	.\altera_mf.v	/^tri0 scanwrite_pulldown;$/;"	n
scanwrite_reg	.\altera_mf.v	/^    reg scanwrite_reg;$/;"	r
scci0	.\omsp_timerA.v	/^reg         scci0;$/;"	r
scci0	.\omsp_timerA.v	/^wire [15:0] tacctl0_full = tacctl0 | {5'h00, scci0, 6'h00, cci0_s, 3'h0};$/;"	n
scci1	.\omsp_timerA.v	/^reg         scci1;$/;"	r
scci1	.\omsp_timerA.v	/^wire [15:0] tacctl1_full = tacctl1 | {5'h00, scci1, 6'h00, cci1_s, 3'h0};$/;"	n
scci2	.\omsp_timerA.v	/^reg         scci2;$/;"	r
scci2	.\omsp_timerA.v	/^wire [15:0] tacctl2_full = tacctl2 | {5'h00, scci2, 6'h00, cci2_s, 3'h0};$/;"	n
scein	.\altera_mf.v	/^    input    [ncso_width-1:0]    scein;$/;"	p
scfifo	.\altera_mf.v	/^module scfifo ( data, $/;"	m
scfifo	.\work\scfifo\_primary.vhd	/^entity scfifo is$/;"	e
scg0	.\omsp_clock_module.v	/^input               scg0;             \/\/ System clock generator 1. Turns off the DCO$/;"	p
scg0	.\omsp_execution_unit.v	/^output              scg0;          \/\/ System clock generator 1. Turns off the DCO$/;"	p
scg0	.\omsp_register_file.v	/^output              scg0;         \/\/ System clock generator 1. Turns off the DCO$/;"	p
scg0	.\openMSP430.v	/^wire                 scg0;$/;"	n
scg0_and_mclk_dma_enable	.\omsp_clock_module.v	/^   wire scg0_and_mclk_dma_enable;$/;"	n
scg0_and_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire scg0_and_mclk_dma_wkup;$/;"	n
scg0_mask	.\omsp_register_file.v	/^   wire [15:0] scg0_mask   = 16'h0000; \/\/                       - the SCG0 is not supported$/;"	n
scg0_mask	.\omsp_register_file.v	/^   wire [15:0] scg0_mask   = 16'h0000;$/;"	n
scg0_mask	.\omsp_register_file.v	/^   wire [15:0] scg0_mask   = 16'h0040;$/;"	n
scg1	.\omsp_clock_module.v	/^input               scg1;             \/\/ System clock generator 1. Turns off the SMCLK$/;"	p
scg1	.\omsp_execution_unit.v	/^output              scg1;          \/\/ System clock generator 1. Turns off the SMCLK$/;"	p
scg1	.\omsp_register_file.v	/^output              scg1;         \/\/ System clock generator 1. Turns off the SMCLK$/;"	p
scg1	.\openMSP430.v	/^wire                 scg1;$/;"	n
scg1_and_mclk_dma_enable	.\omsp_clock_module.v	/^   wire scg1_and_mclk_dma_enable;$/;"	n
scg1_and_mclk_dma_enable_s	.\omsp_clock_module.v	/^   wire scg1_and_mclk_dma_enable_s;$/;"	n
scg1_and_mclk_dma_wkup	.\omsp_clock_module.v	/^   wire scg1_and_mclk_dma_wkup;$/;"	n
scg1_and_mclk_dma_wkup_s	.\omsp_clock_module.v	/^           wire scg1_and_mclk_dma_wkup_s;$/;"	n
scg1_mask	.\omsp_register_file.v	/^   wire [15:0] scg1_mask   = 16'h0000;$/;"	n
scg1_mask	.\omsp_register_file.v	/^   wire [15:0] scg1_mask   = 16'h0080; \/\/                       - the SCG1 mode is emulated$/;"	n
scg1_mask	.\omsp_register_file.v	/^   wire [15:0] scg1_mask   = 16'h0080;$/;"	n
scg1_s	.\omsp_clock_module.v	/^      wire       scg1_s       = scg1;$/;"	n
scg1_s	.\omsp_clock_module.v	/^     wire scg1_s;$/;"	n
sched_time	.\altera_mf.v	/^    integer sched_time;$/;"	r
sched_time	.\altera_mf.v	/^    time sched_time;$/;"	r
sched_time0	.\altera_mf.v	/^time sched_time0;$/;"	r
sched_time1	.\altera_mf.v	/^time sched_time1;$/;"	r
sched_time2	.\altera_mf.v	/^time sched_time2;$/;"	r
sched_time_ext	.\altera_mf.v	/^time sched_time_ext;$/;"	r
schedule_clk0	.\altera_mf.v	/^reg schedule_clk0;$/;"	r
schedule_clk1	.\altera_mf.v	/^reg schedule_clk1;$/;"	r
schedule_clk2	.\altera_mf.v	/^reg schedule_clk2;$/;"	r
schedule_extclk	.\altera_mf.v	/^reg schedule_extclk;$/;"	r
schedule_offset	.\altera_mf.v	/^    reg schedule_offset;$/;"	r
schedule_vco	.\altera_mf.v	/^    reg schedule_vco;$/;"	r
schedule_vco_last_value	.\altera_mf.v	/^    reg schedule_vco_last_value;$/;"	r
scl	.\omsp_dbg_i2c.v	/^wire scl         =  (scl_sync      & scl_buf[0])    |$/;"	n
scl_buf	.\omsp_dbg_i2c.v	/^reg  [1:0] scl_buf;$/;"	r
scl_dly	.\omsp_dbg_i2c.v	/^reg        scl_dly;$/;"	r
scl_edge	.\omsp_dbg_i2c.v	/^wire scl_edge    =  scl_dly    ^  scl;$/;"	n
scl_fe	.\omsp_dbg_i2c.v	/^wire scl_fe      =  scl_dly    & ~scl;$/;"	n
scl_re	.\omsp_dbg_i2c.v	/^wire scl_re      = ~scl_dly    &  scl;$/;"	n
scl_re_dly	.\omsp_dbg_i2c.v	/^reg  [1:0] scl_re_dly;$/;"	r
scl_sample	.\omsp_dbg_i2c.v	/^wire scl_sample  =  scl_re_dly[1];$/;"	n
scl_sync	.\omsp_dbg_i2c.v	/^wire scl_sync = ~scl_sync_n;$/;"	n
scl_sync_n	.\omsp_dbg_i2c.v	/^wire scl_sync_n;$/;"	n
sclkout	.\altera_mf.v	/^    output [1:0] sclkout;$/;"	p
sclkout0	.\altera_mf.v	/^    wire sclkout0;$/;"	n
sclkout0	.\altera_mf.v	/^output        sclkout0;$/;"	p
sclkout0_phase_shift	.\altera_mf.v	/^    parameter sclkout0_phase_shift = "0";$/;"	c
sclkout0_phase_shift	.\altera_mf.v	/^parameter sclkout0_phase_shift = "0";$/;"	c
sclkout0_tmp	.\altera_mf.v	/^    reg sclkout0_tmp;$/;"	r
sclkout0_wire	.\altera_mf.v	/^wire sclkout0_wire;$/;"	n
sclkout1	.\altera_mf.v	/^    wire sclkout1;$/;"	n
sclkout1	.\altera_mf.v	/^output        sclkout1;$/;"	p
sclkout1_phase_shift	.\altera_mf.v	/^    parameter sclkout1_phase_shift = "0";$/;"	c
sclkout1_phase_shift	.\altera_mf.v	/^parameter sclkout1_phase_shift = "0";$/;"	c
sclkout1_tmp	.\altera_mf.v	/^    reg sclkout1_tmp;$/;"	r
sclkout1_wire	.\altera_mf.v	/^wire sclkout1_wire;$/;"	n
sclr	.\altera_mf.v	/^    input  sclr;$/;"	p
sclr	.\altera_mf.v	/^    tri0 sclr;$/;"	n
sclr	.\altera_mf.v	/^input sclr;$/;"	p
sclr	.\altera_mf.v	/^tri0 sclr; \/\/ default sclr to 0$/;"	n
sclr	.\altera_mf.v	/^tri0 sclr;$/;"	n
sconst_nxt	.\omsp_frontend.v	/^reg [15:0] sconst_nxt;$/;"	r
sda_in	.\omsp_dbg_i2c.v	/^wire sda_in      =  (sda_in_sync   & sda_in_buf[0]) |$/;"	n
sda_in_buf	.\omsp_dbg_i2c.v	/^reg  [1:0] sda_in_buf;$/;"	r
sda_in_dly	.\omsp_dbg_i2c.v	/^reg        sda_in_dly;$/;"	r
sda_in_edge	.\omsp_dbg_i2c.v	/^wire sda_in_edge =  sda_in_dly ^  sda_in;$/;"	n
sda_in_fe	.\omsp_dbg_i2c.v	/^wire sda_in_fe   =  sda_in_dly & ~sda_in;$/;"	n
sda_in_re	.\omsp_dbg_i2c.v	/^wire sda_in_re   = ~sda_in_dly &  sda_in;$/;"	n
sda_in_sync	.\omsp_dbg_i2c.v	/^wire sda_in_sync = ~sda_in_sync_n;$/;"	n
sda_in_sync_n	.\omsp_dbg_i2c.v	/^wire sda_in_sync_n;$/;"	n
sdoin	.\altera_mf.v	/^    input    sdoin;$/;"	p
sel_clk	.\omsp_timerA.v	/^wire sel_clk = (tactl[`TASSELx]==2'b00) ? taclk_en :$/;"	n
select_bit	.\altera_mf.v	/^    reg select_bit;$/;"	r
select_counter	.\altera_mf.v	/^    integer select_counter;$/;"	r
select_in	.\omsp_clock_mux.v	/^input          select_in;      \/\/ Clock selection$/;"	p
self_reset_on_gated_loss_lock	.\altera_mf.v	/^    parameter self_reset_on_gated_loss_lock        = "off";$/;"	c
self_reset_on_gated_loss_lock	.\altera_mf.v	/^parameter   self_reset_on_gated_loss_lock = "OFF";$/;"	c
self_reset_on_loss_lock	.\altera_mf.v	/^    parameter self_reset_on_loss_lock        = "off";$/;"	c
self_reset_on_loss_lock	.\altera_mf.v	/^parameter   self_reset_on_loss_lock = "OFF";$/;"	c
selmx_mask	.\omsp_clock_module.v	/^wire [7:0] selmx_mask = 8'h00;$/;"	n
selmx_mask	.\omsp_clock_module.v	/^wire [7:0] selmx_mask = 8'h80;$/;"	n
sels_mask	.\omsp_clock_module.v	/^wire [7:0] sels_mask  = 8'h00;$/;"	n
sels_mask	.\omsp_clock_module.v	/^wire [7:0] sels_mask  = 8'h08;$/;"	n
send_force_ir_capture	.\altera_mf.v	/^    task send_force_ir_capture;$/;"	t
serdes_data_out	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] serdes_data_out;$/;"	n
set_q_to_x	.\altera_mf.v	/^    reg set_q_to_x;$/;"	r
set_q_to_x_by_empty	.\altera_mf.v	/^    reg set_q_to_x_by_empty;$/;"	r
shift	.\altera_mf.v	/^    parameter shift = 0;$/;"	c
shift_buf	.\omsp_dbg_i2c.v	/^reg   [8:0] shift_buf;$/;"	r
shift_buf_nxt	.\omsp_dbg_i2c.v	/^wire [8:0] shift_buf_nxt     = shift_buf_rx_init  ? 9'h001                   : \/\/ RX Init$/;"	n
shift_buf_rx_en	.\omsp_dbg_i2c.v	/^wire       shift_buf_rx_en   = shift_rx_en     & scl_sample;$/;"	n
shift_buf_rx_init	.\omsp_dbg_i2c.v	/^wire       shift_buf_rx_init = i2c_init | ((i2c_state==RX_ADDR_ACK) & scl_fe & ~shift_buf[0]) |$/;"	n
shift_buf_tx_en	.\omsp_dbg_i2c.v	/^wire       shift_buf_tx_en   = shift_tx_en_pre & scl_fe & (shift_buf!=9'h100);$/;"	n
shift_buf_tx_init	.\omsp_dbg_i2c.v	/^wire       shift_buf_tx_init =            ((i2c_state==RX_ADDR_ACK) & scl_re &  shift_buf[0]) |$/;"	n
shift_data	.\altera_mf.v	/^    integer shift_data;$/;"	r
shift_mode	.\altera_mf.v	/^    parameter shift_mode = "NO";$/;"	c
shift_msb	.\altera_mf.v	/^    parameter shift_msb = (shift_mode == "NO") ? 1 : (int_width_result - 1);$/;"	c
shift_partition	.\altera_mf.v	/^    parameter shift_partition = (shift_mode == "NO") ? 1 : (int_width_result \/ 2);$/;"	c
shift_reg_chain	.\altera_mf.v	/^    reg [(MUX_WIDTH*number_of_channels) -1 : 0] shift_reg_chain;$/;"	r
shift_reg_chain	.\altera_mf.v	/^    reg [MUX_WIDTH -1 : 0] shift_reg_chain;$/;"	r
shift_right	.\altera_mf.v	/^    input shift_right;$/;"	p
shift_right_aclr	.\altera_mf.v	/^    parameter shift_right_aclr = "NONE";$/;"	c
shift_right_output_aclr	.\altera_mf.v	/^    parameter shift_right_output_aclr = "NONE";$/;"	c
shift_right_output_register	.\altera_mf.v	/^    parameter shift_right_output_register = "UNREGISTERED";$/;"	c
shift_right_pipeline_aclr	.\altera_mf.v	/^    parameter shift_right_pipeline_aclr = "NONE";$/;"	c
shift_right_pipeline_register	.\altera_mf.v	/^    parameter shift_right_pipeline_register = "UNREGISTERED";$/;"	c
shift_right_register	.\altera_mf.v	/^    parameter shift_right_register = "UNREGISTERED";$/;"	c
shift_rot_blk_in_wire	.\altera_mf.v	/^    wire [int_width_result: 0] shift_rot_blk_in_wire;$/;"	n
shift_rot_result	.\altera_mf.v	/^    reg [int_width_result : 0] shift_rot_result;$/;"	r
shift_rx_data_done	.\omsp_dbg_i2c.v	/^wire        shift_rx_data_done = shift_rx_done & (i2c_state==RX_DATA);$/;"	n
shift_rx_done	.\omsp_dbg_i2c.v	/^wire        shift_rx_done;$/;"	n
shift_rx_en	.\omsp_dbg_i2c.v	/^wire       shift_rx_en       = ((i2c_state==RX_ADDR) | (i2c_state    ==RX_DATA) | (i2c_state    ==RX_DATA_ACK));$/;"	n
shift_tx_data_done	.\omsp_dbg_i2c.v	/^wire        shift_tx_data_done = shift_tx_done;$/;"	n
shift_tx_done	.\omsp_dbg_i2c.v	/^wire        shift_tx_done;$/;"	n
shift_tx_en	.\omsp_dbg_i2c.v	/^wire       shift_tx_en       =                         (i2c_state    ==TX_DATA) | (i2c_state    ==TX_DATA_ACK);$/;"	n
shift_tx_en_pre	.\omsp_dbg_i2c.v	/^wire       shift_tx_en_pre   =                         (i2c_state_nxt==TX_DATA) | (i2c_state_nxt==TX_DATA_ACK);$/;"	n
shift_tx_val	.\omsp_dbg_i2c.v	/^wire [7:0] shift_tx_val;$/;"	n
shiftin	.\altera_mf.v	/^    input [width-1:0] shiftin;      \/\/ Data input to the shifter$/;"	p
shiftout	.\altera_mf.v	/^    output [width-1:0] shiftout;    \/\/ Output from the end of the shift$/;"	p
shiftout	.\altera_mf.v	/^    reg [width-1:0] shiftout;$/;"	r
shiftout_tmp	.\altera_mf.v	/^    reg [width-1:0] shiftout_tmp;$/;"	r
shiftr_int	.\altera_mf.v	/^    tri0 shiftr_int;$/;"	n
shiftr_out_reg	.\altera_mf.v	/^    reg shiftr_out_reg;$/;"	r
shiftr_out_reg_wire_clk	.\altera_mf.v	/^    wire shiftr_out_reg_wire_clk;    $/;"	n
shiftr_out_reg_wire_clr	.\altera_mf.v	/^    tri0 shiftr_out_reg_wire_clr;$/;"	n
shiftr_out_reg_wire_en	.\altera_mf.v	/^    tri1 shiftr_out_reg_wire_en;$/;"	n
shiftr_out_wire	.\altera_mf.v	/^    wire shiftr_out_wire;$/;"	n
shiftr_pipe_reg	.\altera_mf.v	/^    reg shiftr_pipe_reg;$/;"	r
shiftr_pipe_wire	.\altera_mf.v	/^    wire shiftr_pipe_wire;$/;"	n
shiftr_pipe_wire_clk	.\altera_mf.v	/^    wire shiftr_pipe_wire_clk;$/;"	n
shiftr_pipe_wire_clr	.\altera_mf.v	/^    tri0 shiftr_pipe_wire_clr;$/;"	n
shiftr_pipe_wire_en	.\altera_mf.v	/^    tri1 shiftr_pipe_wire_en;$/;"	n
shiftr_reg	.\altera_mf.v	/^    reg shiftr_reg;$/;"	r
shiftr_reg_wire_clk	.\altera_mf.v	/^    wire shiftr_reg_wire_clk;$/;"	n
shiftr_reg_wire_clr	.\altera_mf.v	/^    tri0 shiftr_reg_wire_clr;$/;"	n
shiftr_reg_wire_en	.\altera_mf.v	/^    tri1 shiftr_reg_wire_en;$/;"	n
shiftr_wire	.\altera_mf.v	/^    wire shiftr_wire;$/;"	n
show_errors	.\altera_mf.v	/^  parameter show_errors = "NO",  \/\/ "YES" = show errors; anything else = do not show errors$/;"	c
show_warning	.\altera_mf.v	/^    parameter show_warning = "OFF";$/;"	c
showahead_area	.\altera_mf.v	/^    parameter showahead_area          = ((lpm_showahead == "ON")  && (add_ram_output_register == "OFF"));$/;"	c
showahead_speed	.\altera_mf.v	/^    parameter showahead_speed         = ((lpm_showahead == "ON")  && (add_ram_output_register == "ON"));$/;"	c
sign	.\altera_mf.v	/^    integer sign;$/;"	r
sign	.\altera_mf.v	/^integer sign;$/;"	r
sign_a_int	.\altera_mf.v	/^    wire sign_a_int;$/;"	n
sign_a_pipe_reg	.\altera_mf.v	/^    reg sign_a_pipe_reg;$/;"	r
sign_a_pipe_wire	.\altera_mf.v	/^    wire sign_a_pipe_wire;$/;"	n
sign_a_reg	.\altera_mf.v	/^    reg sign_a_reg;$/;"	r
sign_a_reg_int	.\altera_mf.v	/^    wire sign_a_reg_int;$/;"	n
sign_a_wire	.\altera_mf.v	/^    wire sign_a_wire;$/;"	n
sign_a_wire_clk	.\altera_mf.v	/^    wire sign_a_wire_clk;$/;"	n
sign_a_wire_clr	.\altera_mf.v	/^    tri0 sign_a_wire_clr;$/;"	n
sign_a_wire_en	.\altera_mf.v	/^    tri1 sign_a_wire_en;$/;"	n
sign_aclr_a	.\altera_mf.v	/^    parameter sign_aclr_a               = "ACLR3";$/;"	c
sign_aclr_b	.\altera_mf.v	/^    parameter sign_aclr_b               = "ACLR3";$/;"	c
sign_b_int	.\altera_mf.v	/^    wire sign_b_int;$/;"	n
sign_b_pipe_reg	.\altera_mf.v	/^    reg sign_b_pipe_reg;$/;"	r
sign_b_pipe_wire	.\altera_mf.v	/^    wire sign_b_pipe_wire;$/;"	n
sign_b_reg	.\altera_mf.v	/^    reg sign_b_reg;$/;"	r
sign_b_reg_int	.\altera_mf.v	/^    wire sign_b_reg_int;$/;"	n
sign_b_wire	.\altera_mf.v	/^    wire sign_b_wire;$/;"	n
sign_b_wire_clk	.\altera_mf.v	/^    wire sign_b_wire_clk;$/;"	n
sign_b_wire_clr	.\altera_mf.v	/^    tri0 sign_b_wire_clr;$/;"	n
sign_b_wire_en	.\altera_mf.v	/^    tri1 sign_b_wire_en;$/;"	n
sign_data	.\altera_mf.v	/^    input sign_data;            \/\/ Default = 0$/;"	p
sign_data_int	.\altera_mf.v	/^    tri0 sign_data_int;$/;"	n
sign_pipe_a_wire_clk	.\altera_mf.v	/^    wire sign_pipe_a_wire_clk;$/;"	n
sign_pipe_a_wire_clr	.\altera_mf.v	/^    tri0 sign_pipe_a_wire_clr;$/;"	n
sign_pipe_a_wire_en	.\altera_mf.v	/^    tri1 sign_pipe_a_wire_en;$/;"	n
sign_pipe_b_wire_clk	.\altera_mf.v	/^    wire sign_pipe_b_wire_clk;$/;"	n
sign_pipe_b_wire_clr	.\altera_mf.v	/^    tri0 sign_pipe_b_wire_clr;$/;"	n
sign_pipe_b_wire_en	.\altera_mf.v	/^    tri1 sign_pipe_b_wire_en;$/;"	n
sign_pipeline_aclr_a	.\altera_mf.v	/^    parameter sign_pipeline_aclr_a      = "ACLR3";$/;"	c
sign_pipeline_aclr_b	.\altera_mf.v	/^    parameter sign_pipeline_aclr_b      = "ACLR3";$/;"	c
sign_pipeline_reg_a	.\altera_mf.v	/^    parameter sign_pipeline_reg_a       = "CLOCK0";$/;"	c
sign_pipeline_reg_b	.\altera_mf.v	/^    parameter sign_pipeline_reg_b       = "CLOCK0";$/;"	c
sign_reg_a	.\altera_mf.v	/^    parameter sign_reg_a                = "CLOCK0";$/;"	c
sign_reg_a_wire_clk	.\altera_mf.v	/^    wire sign_reg_a_wire_clk;$/;"	n
sign_reg_a_wire_clr	.\altera_mf.v	/^    tri0 sign_reg_a_wire_clr;$/;"	n
sign_reg_a_wire_en	.\altera_mf.v	/^    tri1 sign_reg_a_wire_en;$/;"	n
sign_reg_b	.\altera_mf.v	/^    parameter sign_reg_b                = "CLOCK0";$/;"	c
sign_reg_b_wire_clk	.\altera_mf.v	/^    wire sign_reg_b_wire_clk;$/;"	n
sign_reg_b_wire_clr	.\altera_mf.v	/^    tri0 sign_reg_b_wire_clr;$/;"	n
sign_reg_b_wire_en	.\altera_mf.v	/^    tri1 sign_reg_b_wire_en;$/;"	n
sign_sel	.\omsp_multiplier.v	/^reg sign_sel;$/;"	r
signa	.\altera_mf.v	/^    input signa;$/;"	p
signa_latent	.\altera_mf.v	/^    wire signa_latent;$/;"	n
signa_wire	.\altera_mf.v	/^        input signa_wire;$/;"	p
signa_z	.\altera_mf.v	/^    tri0 signa_z;$/;"	n
signal_gen	.\altera_mf.v	/^module signal_gen (tck,tms,tdi,jtag_usr1,tdo);$/;"	m
signal_gen	.\work\signal_gen\_primary.vhd	/^entity signal_gen is$/;"	e
signb	.\altera_mf.v	/^    input signb;$/;"	p
signb_latent	.\altera_mf.v	/^    wire signb_latent;$/;"	n
signb_wire	.\altera_mf.v	/^        input signb_wire;$/;"	p
signb_z	.\altera_mf.v	/^    tri0 signb_z;  $/;"	n
signed	.\omsp_multiplier.v	/^wire signed  [8:0] op2_hi_xp = {sign_sel & op2[15], op2[15:8]};$/;"	n
signed	.\omsp_multiplier.v	/^wire signed  [8:0] op2_lo_xp = {              1'b0, op2[7:0]};$/;"	n
signed	.\omsp_multiplier.v	/^wire signed  [8:0] op2_xp    = cycle[0] ? op2_hi_xp : op2_lo_xp;$/;"	n
signed	.\omsp_multiplier.v	/^wire signed [16:0] op1_xp    = {sign_sel & op1[15], op1};$/;"	n
signed	.\omsp_multiplier.v	/^wire signed [16:0] op1_xp = {sign_sel & op1[15], op1};$/;"	n
signed	.\omsp_multiplier.v	/^wire signed [16:0] op2_xp = {sign_sel & op2[15], op2};$/;"	n
signed	.\omsp_multiplier.v	/^wire signed [25:0] product    = op1_xp * op2_xp;$/;"	n
signed	.\omsp_multiplier.v	/^wire signed [33:0] product = op1_xp * op2_xp;$/;"	n
signed_aclr_a	.\altera_mf.v	/^    parameter signed_aclr_a              = "ACLR3";$/;"	c
signed_aclr_b	.\altera_mf.v	/^    parameter signed_aclr_b              = "ACLR3";$/;"	c
signed_pipeline_aclr_a	.\altera_mf.v	/^    parameter signed_pipeline_aclr_a     = "ACLR3";$/;"	c
signed_pipeline_aclr_b	.\altera_mf.v	/^    parameter signed_pipeline_aclr_b     = "ACLR3";$/;"	c
signed_pipeline_register_a	.\altera_mf.v	/^    parameter signed_pipeline_register_a = "CLOCK0";$/;"	c
signed_pipeline_register_b	.\altera_mf.v	/^    parameter signed_pipeline_register_b = "CLOCK0";$/;"	c
signed_register_a	.\altera_mf.v	/^    parameter signed_register_a          = "CLOCK0";$/;"	c
signed_register_b	.\altera_mf.v	/^    parameter signed_register_b          = "CLOCK0";$/;"	c
sim_activator	.\altera_mf.v	/^        wire  [0:0]  sim_activator;$/;"	n
sim_counter_and	.\altera_mf.v	/^        wire  [0:0]  sim_counter_and;$/;"	n
sim_counter_next	.\altera_mf.v	/^        wire  [3:0]  sim_counter_next;$/;"	n
sim_counter_next	.\altera_mf.v	/^        wire  [COUNTER_WIDTH-1:0]  sim_counter_next;$/;"	n
sim_counter_or	.\altera_mf.v	/^        wire  [0:0]  sim_counter_or;$/;"	n
sim_counter_reg	.\altera_mf.v	/^        reg     [3:0]   sim_counter_reg;$/;"	r
sim_counter_reg	.\altera_mf.v	/^        reg     [COUNTER_WIDTH-1:0]   sim_counter_reg;$/;"	r
sim_dpa_is_negative_ppm_drift	.\altera_mf.v	/^    parameter sim_dpa_is_negative_ppm_drift = "OFF";$/;"	c
sim_dpa_net_ppm_variation	.\altera_mf.v	/^    parameter sim_dpa_net_ppm_variation = 0;$/;"	c
sim_dpa_output_clock_phase_shift	.\altera_mf.v	/^    parameter sim_dpa_output_clock_phase_shift = 0;$/;"	c
sim_gate_lock_device_behavior	.\altera_mf.v	/^    parameter sim_gate_lock_device_behavior        = "off";$/;"	c
sim_gate_lock_device_behavior	.\altera_mf.v	/^parameter   sim_gate_lock_device_behavior = "OFF";$/;"	c
sim_model_mode	.\altera_mf.v	/^        parameter sim_model_mode = "TRUE";$/;"	c
sim_show_memory_data_in_port_b_layout	.\altera_mf.v	/^    parameter sim_show_memory_data_in_port_b_layout  = "OFF";$/;"	c
simulation_type	.\altera_mf.v	/^    parameter simulation_type = "functional";$/;"	c
simulation_type	.\altera_mf.v	/^    parameter simulation_type = "timing";$/;"	c
simulation_type	.\altera_mf.v	/^parameter   simulation_type           = "functional";$/;"	c
size	.\altera_mf.v	/^    parameter size = 2;         \/\/ Required$/;"	c
skip_vco	.\altera_mf.v	/^    parameter skip_vco = "off";$/;"	c
skip_vco	.\altera_mf.v	/^parameter   skip_vco                    = "off";$/;"	c
sld_auto_instance_index	.\altera_mf.v	/^    parameter    sld_auto_instance_index    =    "NO";$/;"	c
sld_auto_instance_index	.\altera_mf.v	/^    parameter    sld_auto_instance_index    =    "YES";$/;"	c
sld_auto_instance_index	.\altera_mf.v	/^    parameter sld_auto_instance_index = "NO"; \/\/Yes if auto index is desired and no otherwise$/;"	c
sld_instance_index	.\altera_mf.v	/^    parameter    sld_instance_index    =    0;$/;"	c
sld_instance_index	.\altera_mf.v	/^    parameter sld_instance_index = 0; \/\/ index to be used if SLD_AUTO_INDEX is no$/;"	c
sld_ir_width	.\altera_mf.v	/^    parameter    sld_ir_width    =    1;$/;"	c
sld_ir_width	.\altera_mf.v	/^    parameter    sld_ir_width    =    4;$/;"	c
sld_ir_width	.\altera_mf.v	/^    parameter sld_ir_width = 1; \/\/the width of the IR register$/;"	c
sld_mfg_id	.\altera_mf.v	/^    parameter    sld_mfg_id    =    0;$/;"	c
sld_node_ir_width	.\altera_mf.v	/^    parameter sld_node_ir_width = 16;$/;"	c
sld_node_ir_width	.\altera_mf.v	/^    parameter sld_node_ir_width = 1;$/;"	c
sld_node_n_scan	.\altera_mf.v	/^    parameter sld_node_n_scan = 0;$/;"	c
sld_node_sim_action	.\altera_mf.v	/^    parameter sld_node_sim_action = "()";$/;"	c
sld_node_total_length	.\altera_mf.v	/^    parameter sld_node_total_length = 0;$/;"	c
sld_signaltap	.\altera_mf.v	/^module    sld_signaltap    ($/;"	m
sld_signaltap	.\work\sld_signaltap\_primary.vhd	/^entity sld_signaltap is$/;"	e
sld_sim_action	.\altera_mf.v	/^    parameter    sld_sim_action    =    "UNUSED";$/;"	c
sld_sim_action	.\altera_mf.v	/^    parameter sld_sim_action = ""; \/\/ the actions to be simulated$/;"	c
sld_sim_n_scan	.\altera_mf.v	/^    parameter    sld_sim_n_scan    =    0;$/;"	c
sld_sim_n_scan	.\altera_mf.v	/^    parameter sld_sim_n_scan = 0; \/\/ the number of scans in the simulatiom parameters$/;"	c
sld_sim_total_length	.\altera_mf.v	/^    parameter    sld_sim_total_length    =    0;$/;"	c
sld_sim_total_length	.\altera_mf.v	/^    parameter sld_sim_total_length = 0; \/\/ The total bit width of all scan values$/;"	c
sld_type_id	.\altera_mf.v	/^    parameter    sld_type_id    =    0;$/;"	c
sld_version	.\altera_mf.v	/^    parameter    sld_version    =    0;$/;"	c
sld_virtual_jtag	.\altera_mf.v	/^module sld_virtual_jtag (tdo,ir_out,tck,tdi,ir_in,virtual_state_cdr,virtual_state_sdr,$/;"	m
sld_virtual_jtag	.\work\sld_virtual_jtag\_primary.vhd	/^entity sld_virtual_jtag is$/;"	e
sld_virtual_jtag_basic	.\altera_mf.v	/^module    sld_virtual_jtag_basic    ($/;"	m
sld_virtual_jtag_basic	.\work\sld_virtual_jtag_basic\_primary.vhd	/^entity sld_virtual_jtag_basic is$/;"	e
sload	.\altera_mf.v	/^    input sload;                \/\/ Default = 0$/;"	p
sload_for_limit	.\altera_mf.v	/^    parameter sload_for_limit = (width_result < width_upper_data)? width_result + int_extra_width : width_upper_data ;$/;"	c
sload_int	.\altera_mf.v	/^    tri0 sload_int;$/;"	n
sload_upper_data_latent	.\altera_mf.v	/^    wire [width_upper_data - 1 : 0] sload_upper_data_latent;$/;"	n
sload_upper_data_pipe_reg	.\altera_mf.v	/^    reg [width_upper_data - 1 : 0] sload_upper_data_pipe_reg;$/;"	r
sload_upper_data_pipe_wire	.\altera_mf.v	/^    reg [int_width_result - 1 : 0] sload_upper_data_pipe_wire;$/;"	r
sload_upper_data_reg	.\altera_mf.v	/^    reg [width_upper_data - 1 : 0] sload_upper_data_reg;$/;"	r
sload_upper_data_wire	.\altera_mf.v	/^    wire [width_upper_data - 1 : 0] sload_upper_data_wire;$/;"	n
slowest_clk_new	.\altera_mf.v	/^    integer slowest_clk_new;$/;"	r
slowest_clk_old	.\altera_mf.v	/^    integer slowest_clk_old;$/;"	r
sm_empty	.\altera_mf.v	/^    reg [1:0] sm_empty;$/;"	r
sm_p2s	.\altera_mf.v	/^    integer sm_p2s;$/;"	r
smaller	.\compare.vhd	/^FUNCTION smaller(a,b,c,d: STD_LOGIC_VECTOR;state_in0,state_in1,state_in2,state_in3 : INTEGER) RETURN STD_LOGIC_VECTOR IS$/;"	f
smclk	.\omsp_clock_module.v	/^output              smclk;            \/\/ SMCLK$/;"	p
smclk	.\omsp_clock_module.v	/^wire  smclk  = nodiv_mclk;$/;"	n
smclk	.\omsp_watchdog.v	/^input               smclk;          \/\/ SMCLK$/;"	p
smclk	.\openMSP430.v	/^output               smclk;                  \/\/ ASIC ONLY: SMCLK$/;"	p
smclk	.\openMSP430_fpga.v	/^wire               smclk;$/;"	n
smclk_active	.\omsp_clock_module.v	/^   wire smclk_active  =  cpu_en_sm_s & (~scg1_s | scg1_and_mclk_dma_enable_s);$/;"	n
smclk_active	.\omsp_clock_module.v	/^   wire smclk_active  =  cpu_en_sm_s;$/;"	n
smclk_div	.\omsp_clock_module.v	/^   reg [2:0] smclk_div;$/;"	r
smclk_div	.\omsp_clock_module.v	/^reg [2:0] smclk_div;$/;"	r
smclk_div_en	.\omsp_clock_module.v	/^   wire  smclk_div_en  = smclk_active & smclk_div_sel;$/;"	n
smclk_div_en	.\omsp_clock_module.v	/^   wire  smclk_div_en  = smclk_active;$/;"	n
smclk_div_sel	.\omsp_clock_module.v	/^   wire  smclk_div_sel = ((divsx_ss==2'b00) ?  1'b1           :$/;"	n
smclk_en	.\omsp_clock_module.v	/^output              smclk_en;         \/\/ SMCLK enable$/;"	p
smclk_en	.\omsp_clock_module.v	/^reg       smclk_en;$/;"	r
smclk_en	.\omsp_timerA.v	/^input               smclk_en;       \/\/ SMCLK enable (from CPU)$/;"	p
smclk_en	.\omsp_watchdog.v	/^input               smclk_en;       \/\/ SMCLK enable$/;"	p
smclk_en	.\openMSP430.v	/^output               smclk_en;               \/\/ FPGA ONLY: SMCLK enable$/;"	p
smclk_en	.\openMSP430_fpga.v	/^wire               smclk_en;$/;"	n
smclk_en_nxt	.\omsp_clock_module.v	/^wire      smclk_en_nxt = smclk_in & ((bcsctl2[`DIVSx]==2'b00) ?  1'b1           :$/;"	n
smclk_in	.\omsp_clock_module.v	/^wire      smclk_in     = (scg1 & ~(mclk_dma_enable & bcsctl1[`DMA_SCG1])) ? 1'b0        :$/;"	n
source	.\altera_mf.v	/^    output    [source_width-1:0]    source;$/;"	p
source_clk	.\altera_mf.v	/^    input    source_clk;$/;"	p
source_ena	.\altera_mf.v	/^    input    source_ena;$/;"	p
source_initial_value	.\altera_mf.v	/^    parameter    source_initial_value    =    "0";$/;"	c
source_is_pll	.\altera_mf.v	/^parameter   source_is_pll             = "off";$/;"	c
source_width	.\altera_mf.v	/^    parameter    source_width    =    1;$/;"	c
sourcea	.\altera_mf.v	/^    input [number_of_multipliers -1 : 0] sourcea;$/;"	p
sourcea	.\altera_mf.v	/^    input sourcea;$/;"	p
sourcea	.\altera_mf.v	/^    tri0 sourcea;$/;"	n
sourcea_wire	.\altera_mf.v	/^    tri0 [3 : 0] sourcea_wire;$/;"	n
sourceb	.\altera_mf.v	/^    input [number_of_multipliers -1 : 0] sourceb;$/;"	p
sourceb	.\altera_mf.v	/^    input sourceb;$/;"	p
sourceb	.\altera_mf.v	/^    tri0 sourceb;$/;"	n
sourceb_wire	.\altera_mf.v	/^    tri0 [3 : 0] sourceb_wire;$/;"	n
spread_frequency	.\altera_mf.v	/^    parameter spread_frequency                     = 0;$/;"	c
spread_frequency	.\altera_mf.v	/^    parameter spread_frequency = 0;$/;"	c
spread_frequency	.\altera_mf.v	/^parameter   spread_frequency          = 0;$/;"	c
src_acalc_pre	.\omsp_frontend.v	/^wire src_acalc_pre =  inst_as_nxt[`IDX]   | inst_as_nxt[`SYMB]    | inst_as_nxt[`ABS];$/;"	n
src_inst_dext_sel	.\omsp_execution_unit.v	/^wire src_inst_dext_sel =  ((e_state==`E_DST_RD) & ~(inst_so[`PUSH] | inst_so[`CALL])) |$/;"	n
src_inst_sext_sel	.\omsp_execution_unit.v	/^wire src_inst_sext_sel =  ((e_state==`E_EXEC)   &  (inst_type[`INST_JMP] | inst_as[`IMM] |$/;"	n
src_mdb_in_val_sel	.\omsp_execution_unit.v	/^wire src_mdb_in_val_sel = ((e_state==`E_DST_RD) &  inst_so[`RETI])                     |$/;"	n
src_rd_pre	.\omsp_frontend.v	/^wire src_rd_pre    =  inst_as_nxt[`INDIR] | inst_as_nxt[`INDIR_I] | inst_as_nxt[`IMM]  | inst_so_nxt[`RETI];$/;"	n
src_reg	.\omsp_frontend.v	/^wire [3:0] src_reg = inst_type_nxt[`INST_SO] ? ir[3:0] : ir[11:8];$/;"	n
src_reg_dest_sel	.\omsp_execution_unit.v	/^wire src_reg_dest_sel   =  (e_state==`E_IRQ_1)                    |$/;"	n
src_reg_src_sel	.\omsp_execution_unit.v	/^wire src_reg_src_sel    =  (e_state==`E_IRQ_0)                    |$/;"	n
ss	.\altera_mf.v	/^    parameter ss = 0;$/;"	c
ss	.\altera_mf.v	/^parameter   ss                  = 0;$/;"	c
sset	.\altera_mf.v	/^input sset;$/;"	p
sset	.\altera_mf.v	/^tri0 sset; \/\/ default sset to 0$/;"	n
sset	.\altera_mf.v	/^tri0 sset;$/;"	n
stage1_a	.\altera_mf.v	/^    reg [(number_of_channels*2) -1:0] stage1_a;$/;"	r
stage1_b	.\altera_mf.v	/^    reg [(number_of_channels*2) -1:0] stage1_b;$/;"	r
stage2	.\altera_mf.v	/^    reg [(number_of_channels*2) -1:0] stage2;$/;"	r
stage_values	.\altera_mf.v	/^    reg [result_width - 1 : 0]stage_values[pipeline+1 : 0];$/;"	r
start	.\altera_mf.v	/^        input   start;$/;"	p
start_address	.\altera_mf.v	/^    integer start_address, end_address;$/;"	r
start_corrupt_bits	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] start_corrupt_bits;$/;"	r
start_corrupt_bits	.\altera_mf.v	/^    reg start_corrupt_bits;$/;"	r
start_counter	.\altera_mf.v	/^    reg start_counter;$/;"	r
start_detect	.\omsp_dbg_i2c.v	/^wire start_detect = sda_in_fe & scl;$/;"	n
start_lock_count	.\altera_mf.v	/^integer start_lock_count;$/;"	r
start_outclk	.\altera_mf.v	/^reg start_outclk;$/;"	r
start_quiet_time	.\altera_mf.v	/^    time start_quiet_time;$/;"	r
start_sm_p2s	.\altera_mf.v	/^    reg start_sm_p2s;$/;"	r
state	.\altera_mf.v	/^  reg [1:0]  state, state0q;$/;"	r
state0q	.\altera_mf.v	/^  reg [1:0]  state, state0q;$/;"	r
status	.\omsp_alu.v	/^input         [3:0] status;        \/\/ R2 Status {V,N,Z,C}$/;"	p
status	.\omsp_alu.v	/^wire  [4:0] alu_dadd0      = bcd_add(op_src_in[3:0],   op_dst_in[3:0],  status[0]);$/;"	n
status	.\omsp_execution_unit.v	/^wire          [3:0] status;$/;"	n
status	.\omsp_register_file.v	/^output        [3:0] status;       \/\/ R2 Status {V,N,Z,C}$/;"	p
stick_bits_or	.\altera_mf.v	/^    reg stick_bits_or;$/;"	r
sticky_bit	.\altera_mf.v	/^    reg sticky_bit;$/;"	r
stop_detect	.\omsp_dbg_i2c.v	/^ wire stop_detect = sda_in_re & scl;$/;"	n
stop_lock_count	.\altera_mf.v	/^integer stop_lock_count;$/;"	r
stop_vco	.\altera_mf.v	/^    reg stop_vco;$/;"	r
storage_enable	.\altera_mf.v	/^    input    storage_enable;$/;"	p
stratix3_activeclock	.\altera_mf.v	/^wire stratix3_activeclock;$/;"	n
stratix3_areset	.\altera_mf.v	/^wire stratix3_areset;$/;"	n
stratix3_clk	.\altera_mf.v	/^wire [9:0] stratix3_clk;$/;"	n
stratix3_clkbad	.\altera_mf.v	/^wire [1:0] stratix3_clkbad;$/;"	n
stratix3_clkswitch	.\altera_mf.v	/^wire stratix3_clkswitch;$/;"	n
stratix3_fbin	.\altera_mf.v	/^wire stratix3_fbin;$/;"	n
stratix3_fbout	.\altera_mf.v	/^wire stratix3_fbout;$/;"	n
stratix3_inclk	.\altera_mf.v	/^wire [1:0] stratix3_inclk;$/;"	n
stratix3_locked	.\altera_mf.v	/^wire stratix3_locked;$/;"	n
stratix3_pfdena	.\altera_mf.v	/^wire stratix3_pfdena;$/;"	n
stratix3_phasecounterselect	.\altera_mf.v	/^wire [3:0] stratix3_phasecounterselect;$/;"	n
stratix3_phasedone	.\altera_mf.v	/^wire stratix3_phasedone;$/;"	n
stratix3_scanclk	.\altera_mf.v	/^wire stratix3_scanclk;$/;"	n
stratix3_scandataout	.\altera_mf.v	/^wire stratix3_scandataout;$/;"	n
stratix3_scandone	.\altera_mf.v	/^wire stratix3_scandone;$/;"	n
stratix3_vcooverrange	.\altera_mf.v	/^wire stratix3_vcooverrange;$/;"	n
stratix3_vcounderrange	.\altera_mf.v	/^wire stratix3_vcounderrange;$/;"	n
stratix_activeclock	.\altera_mf.v	/^wire stratix_activeclock;$/;"	n
stratix_areset	.\altera_mf.v	/^wire stratix_areset;$/;"	n
stratix_clk	.\altera_mf.v	/^wire [5:0] stratix_clk;$/;"	n
stratix_clkbad	.\altera_mf.v	/^wire [1:0] stratix_clkbad;$/;"	n
stratix_clkena	.\altera_mf.v	/^wire [5:0] stratix_clkena;$/;"	n
stratix_clkloss	.\altera_mf.v	/^wire stratix_clkloss;$/;"	n
stratix_clkswitch	.\altera_mf.v	/^wire stratix_clkswitch;$/;"	n
stratix_dataout	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] stratix_dataout;$/;"	n
stratix_ena	.\altera_mf.v	/^wire stratix_ena;$/;"	n
stratix_enable	.\altera_mf.v	/^    wire stratix_enable;$/;"	n
stratix_enable0	.\altera_mf.v	/^    wire stratix_enable0;$/;"	n
stratix_enable0	.\altera_mf.v	/^wire stratix_enable0;$/;"	n
stratix_enable1	.\altera_mf.v	/^    wire stratix_enable1;$/;"	n
stratix_enable1	.\altera_mf.v	/^wire stratix_enable1;$/;"	n
stratix_extclk	.\altera_mf.v	/^wire [3:0] stratix_extclk;$/;"	n
stratix_extclkena	.\altera_mf.v	/^wire [3:0] stratix_extclkena;$/;"	n
stratix_family	.\altera_mf.v	/^    reg stratix_family;$/;"	r
stratix_fastclk	.\altera_mf.v	/^    wire stratix_fastclk;$/;"	n
stratix_fbin	.\altera_mf.v	/^wire stratix_fbin;$/;"	n
stratix_inclk	.\altera_mf.v	/^wire [1:0] stratix_inclk;$/;"	n
stratix_inclock	.\altera_mf.v	/^    wire stratix_inclock;$/;"	n
stratix_locked	.\altera_mf.v	/^    wire stratix_locked;$/;"	n
stratix_locked	.\altera_mf.v	/^wire stratix_locked;$/;"	n
stratix_lvds_rx	.\altera_mf.v	/^module stratix_lvds_rx ($/;"	m
stratix_lvds_rx	.\work\stratix_lvds_rx\_primary.vhd	/^entity stratix_lvds_rx is$/;"	e
stratix_oe	.\altera_mf.v	/^wire stratix_oe;$/;"	n
stratix_outclock	.\altera_mf.v	/^    wire stratix_outclock;$/;"	n
stratix_pfdena	.\altera_mf.v	/^wire stratix_pfdena;$/;"	n
stratix_pll_areset	.\altera_mf.v	/^    wire stratix_pll_areset;$/;"	n
stratix_pll_enable	.\altera_mf.v	/^    wire stratix_pll_enable;$/;"	n
stratix_pll_inclock	.\altera_mf.v	/^    wire [1:0] stratix_pll_inclock;$/;"	n
stratix_pll_inclock	.\altera_mf.v	/^    wire[1:0] stratix_pll_inclock;$/;"	n
stratix_pll_outclock	.\altera_mf.v	/^    wire [5:0] stratix_pll_outclock;$/;"	n
stratix_pll_outclock	.\altera_mf.v	/^    wire[5:0] stratix_pll_outclock;$/;"	n
stratix_scanclk	.\altera_mf.v	/^wire stratix_scanclk;$/;"	n
stratix_scanclr	.\altera_mf.v	/^wire stratix_scanclr;$/;"	n
stratix_scandata	.\altera_mf.v	/^wire stratix_scandata;$/;"	n
stratix_scandataout	.\altera_mf.v	/^wire stratix_scandataout;$/;"	n
stratix_slowclk	.\altera_mf.v	/^    wire stratix_slowclk;$/;"	n
stratix_tx_outclk	.\altera_mf.v	/^module stratix_tx_outclk ($/;"	m
stratix_tx_outclk	.\work\stratix_tx_outclk\_primary.vhd	/^entity stratix_tx_outclk is$/;"	e
stratixgx_coreclk	.\altera_mf.v	/^    wire[number_of_channels -1 :0] stratixgx_coreclk;$/;"	n
stratixgx_dataout	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] stratixgx_dataout;$/;"	n
stratixgx_dpa_locked	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixgx_dpa_locked;$/;"	n
stratixgx_dpa_lvds_rx	.\altera_mf.v	/^module stratixgx_dpa_lvds_rx ($/;"	m
stratixgx_dpa_lvds_rx	.\work\stratixgx_dpa_lvds_rx\_primary.vhd	/^entity stratixgx_dpa_lvds_rx is$/;"	e
stratixgx_fastclk	.\altera_mf.v	/^    wire stratixgx_fastclk;$/;"	n
stratixgx_slowclk	.\altera_mf.v	/^    wire stratixgx_slowclk;$/;"	n
stratixii_activeclock	.\altera_mf.v	/^wire stratixii_activeclock;$/;"	n
stratixii_areset	.\altera_mf.v	/^wire stratixii_areset;$/;"	n
stratixii_block	.\altera_mf.v	/^    wire stratixii_block;$/;"	n
stratixii_cda_max	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixii_cda_max;$/;"	n
stratixii_clk	.\altera_mf.v	/^wire [5:0] stratixii_clk;$/;"	n
stratixii_clkbad	.\altera_mf.v	/^wire [1:0] stratixii_clkbad;$/;"	n
stratixii_clkloss	.\altera_mf.v	/^wire stratixii_clkloss;$/;"	n
stratixii_clkswitch	.\altera_mf.v	/^wire stratixii_clkswitch;$/;"	n
stratixii_dataout	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] stratixii_dataout;$/;"	n
stratixii_dpa_locked	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixii_dpa_locked;$/;"	n
stratixii_ena	.\altera_mf.v	/^wire stratixii_ena;$/;"	n
stratixii_enable	.\altera_mf.v	/^    wire stratixii_enable;$/;"	n
stratixii_enable0	.\altera_mf.v	/^    wire stratixii_enable0;$/;"	n
stratixii_enable0	.\altera_mf.v	/^wire stratixii_enable0;$/;"	n
stratixii_enable1	.\altera_mf.v	/^    wire stratixii_enable1;$/;"	n
stratixii_enable1	.\altera_mf.v	/^wire stratixii_enable1;$/;"	n
stratixii_fastclk	.\altera_mf.v	/^    wire stratixii_fastclk;$/;"	n
stratixii_fbin	.\altera_mf.v	/^wire stratixii_fbin;$/;"	n
stratixii_inclk	.\altera_mf.v	/^wire [1:0] stratixii_inclk;$/;"	n
stratixii_inclock	.\altera_mf.v	/^    wire stratixii_inclock;$/;"	n
stratixii_locked	.\altera_mf.v	/^    wire stratixii_locked;$/;"	n
stratixii_locked	.\altera_mf.v	/^wire stratixii_locked;$/;"	n
stratixii_lvds_rx	.\altera_mf.v	/^module stratixii_lvds_rx ($/;"	m
stratixii_lvds_rx	.\work\stratixii_lvds_rx\_primary.vhd	/^entity stratixii_lvds_rx is$/;"	e
stratixii_outclock	.\altera_mf.v	/^    wire stratixii_outclock;$/;"	n
stratixii_pfdena	.\altera_mf.v	/^wire stratixii_pfdena;$/;"	n
stratixii_pll_areset	.\altera_mf.v	/^    wire stratixii_pll_areset;$/;"	n
stratixii_pll_enable	.\altera_mf.v	/^    wire stratixii_pll_enable;$/;"	n
stratixii_pll_inclock	.\altera_mf.v	/^    wire [1:0] stratixii_pll_inclock;$/;"	n
stratixii_pll_inclock	.\altera_mf.v	/^    wire[1:0] stratixii_pll_inclock;$/;"	n
stratixii_pll_outclock	.\altera_mf.v	/^    wire [5:0] stratixii_pll_outclock;$/;"	n
stratixii_pll_outclock	.\altera_mf.v	/^    wire[5:0] stratixii_pll_outclock;$/;"	n
stratixii_scanclk	.\altera_mf.v	/^wire stratixii_scanclk;$/;"	n
stratixii_scandata	.\altera_mf.v	/^wire stratixii_scandata;$/;"	n
stratixii_scandataout	.\altera_mf.v	/^wire stratixii_scandataout;$/;"	n
stratixii_scandone	.\altera_mf.v	/^wire stratixii_scandone;$/;"	n
stratixii_scanread	.\altera_mf.v	/^wire stratixii_scanread;$/;"	n
stratixii_scanwrite	.\altera_mf.v	/^wire stratixii_scanwrite;$/;"	n
stratixii_sclkout0	.\altera_mf.v	/^    wire stratixii_sclkout0;$/;"	n
stratixii_sclkout0	.\altera_mf.v	/^wire stratixii_sclkout0;$/;"	n
stratixii_sclkout1	.\altera_mf.v	/^    wire stratixii_sclkout1;$/;"	n
stratixii_sclkout1	.\altera_mf.v	/^wire stratixii_sclkout1;$/;"	n
stratixii_tx_outclk	.\altera_mf.v	/^module stratixii_tx_outclk ($/;"	m
stratixii_tx_outclk	.\work\stratixii_tx_outclk\_primary.vhd	/^entity stratixii_tx_outclk is$/;"	e
stratixiii_block	.\altera_mf.v	/^    wire stratixiii_block;$/;"	n
stratixiii_cda_max	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixiii_cda_max;$/;"	n
stratixiii_dataout	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] stratixiii_dataout;$/;"	n
stratixiii_divfwdclk	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixiii_divfwdclk;$/;"	n
stratixiii_dpa_locked	.\altera_mf.v	/^    wire [number_of_channels -1 : 0] stratixiii_dpa_locked;$/;"	n
stratixiii_enable	.\altera_mf.v	/^    wire stratixiii_enable;$/;"	n
stratixiii_enable0	.\altera_mf.v	/^    wire stratixiii_enable0;$/;"	n
stratixiii_enable0_dly	.\altera_mf.v	/^    reg stratixiii_enable0_dly;$/;"	r
stratixiii_enable1	.\altera_mf.v	/^    wire stratixiii_enable1;$/;"	n
stratixiii_enable1_dly	.\altera_mf.v	/^    reg stratixiii_enable1_dly;$/;"	r
stratixiii_fastclk	.\altera_mf.v	/^    wire stratixiii_fastclk;$/;"	n
stratixiii_locked	.\altera_mf.v	/^    wire stratixiii_locked;$/;"	n
stratixiii_lvds_rx	.\altera_mf.v	/^module stratixiii_lvds_rx ($/;"	m
stratixiii_lvds_rx	.\work\stratixiii_lvds_rx\_primary.vhd	/^entity stratixiii_lvds_rx is$/;"	e
stratixiii_lvds_rx_channel	.\altera_mf.v	/^module stratixiii_lvds_rx_channel ($/;"	m
stratixiii_lvds_rx_channel	.\work\stratixiii_lvds_rx_channel\_primary.vhd	/^entity stratixiii_lvds_rx_channel is$/;"	e
stratixiii_lvds_rx_dpa	.\altera_mf.v	/^module stratixiii_lvds_rx_dpa ($/;"	m
stratixiii_lvds_rx_dpa	.\work\stratixiii_lvds_rx_dpa\_primary.vhd	/^entity stratixiii_lvds_rx_dpa is$/;"	e
stratixiii_pll_areset	.\altera_mf.v	/^    wire stratixiii_pll_areset;$/;"	n
stratixiii_pll_inclock	.\altera_mf.v	/^    wire [1:0] stratixiii_pll_inclock;$/;"	n
stratixiii_pll_inclock	.\altera_mf.v	/^    wire[1:0] stratixiii_pll_inclock;$/;"	n
stratixiii_pll_outclock	.\altera_mf.v	/^    wire [9:0] stratixiii_pll_outclock;$/;"	n
stratixiii_pll_outclock	.\altera_mf.v	/^    wire[9:0] stratixiii_pll_outclock;$/;"	n
stratixiii_slowclk	.\altera_mf.v	/^    wire stratixiii_slowclk;$/;"	n
stratixv_block	.\altera_mf.v	/^	wire stratixv_block;$/;"	n
stratixv_local_clk_divider	.\altera_mf.v	/^module stratixv_local_clk_divider ($/;"	m
stratixv_local_clk_divider	.\work\stratixv_local_clk_divider\_primary.vhd	/^entity stratixv_local_clk_divider is$/;"	e
stx_m_cntr	.\altera_mf.v	/^module stx_m_cntr  (clk,$/;"	m
stx_m_cntr	.\work\stx_m_cntr\_primary.vhd	/^entity stx_m_cntr is$/;"	e
stx_n_cntr	.\altera_mf.v	/^module stx_n_cntr  (clk,$/;"	m
stx_n_cntr	.\work\stx_n_cntr\_primary.vhd	/^entity stx_n_cntr is$/;"	e
stx_phase_shift_txdata	.\altera_mf.v	/^    reg [9 : 0] stx_phase_shift_txdata;$/;"	r
stx_scale_cntr	.\altera_mf.v	/^module stx_scale_cntr  (clk,$/;"	m
stx_scale_cntr	.\work\stx_scale_cntr\_primary.vhd	/^entity stx_scale_cntr is$/;"	e
sub_wire0	.\ram16x512.v	/^	wire [15:0] sub_wire0;$/;"	n
sub_wire0	.\rom16x2048.v	/^	wire [15:0] sub_wire0;$/;"	n
sum	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
sum	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
sumext	.\omsp_multiplier.v	/^wire [15:0] sumext     = {{14{sumext_s[1]}},     sumext_s};$/;"	n
sumext_mux	.\omsp_multiplier.v	/^wire [15:0] sumext_mux = sumext_rd  & {16{reg_rd[SUMEXT]}};$/;"	n
sumext_nxt	.\omsp_multiplier.v	/^wire [15:0] sumext_nxt = {{14{sumext_s_nxt[1]}}, sumext_s_nxt};$/;"	n
sumext_rd	.\omsp_multiplier.v	/^wire [15:0] sumext_rd  = early_read ? sumext_nxt : sumext;$/;"	n
sumext_s	.\omsp_multiplier.v	/^reg  [1:0] sumext_s;$/;"	r
sumext_s	.\omsp_multiplier.v	/^wire [15:0] sumext     = {{14{sumext_s[1]}},     sumext_s};$/;"	n
sumext_s_nxt	.\omsp_multiplier.v	/^wire [15:0] sumext_nxt = {{14{sumext_s_nxt[1]}}, sumext_s_nxt};$/;"	n
sumext_s_nxt	.\omsp_multiplier.v	/^wire [1:0] sumext_s_nxt;$/;"	n
swap	.\altera_mf.v	/^        integer swap;$/;"	r
switch_clock	.\altera_mf.v	/^    reg switch_clock;$/;"	r
switch_over_count	.\altera_mf.v	/^    integer switch_over_count;$/;"	r
switch_over_counter	.\altera_mf.v	/^    parameter switch_over_counter                  = 1;$/;"	c
switch_over_counter	.\altera_mf.v	/^    parameter switch_over_counter = 1;$/;"	c
switch_over_counter	.\altera_mf.v	/^parameter   switch_over_counter       = 0;$/;"	c
switch_over_on_gated_lock	.\altera_mf.v	/^    parameter switch_over_on_gated_lock            = "off";$/;"	c
switch_over_on_gated_lock	.\altera_mf.v	/^    parameter switch_over_on_gated_lock = "off";$/;"	c
switch_over_on_gated_lock	.\altera_mf.v	/^parameter   switch_over_on_gated_lock = "OFF" ;$/;"	c
switch_over_on_lossclk	.\altera_mf.v	/^    parameter switch_over_on_lossclk               = "off";$/;"	c
switch_over_on_lossclk	.\altera_mf.v	/^    parameter switch_over_on_lossclk = "off";$/;"	c
switch_over_on_lossclk	.\altera_mf.v	/^parameter   switch_over_on_lossclk    = "OFF" ;$/;"	c
switch_over_type	.\altera_mf.v	/^    parameter switch_over_type                     = "auto";$/;"	c
switch_over_type	.\altera_mf.v	/^parameter   switch_over_type          = "AUTO";$/;"	c
sync_b_reg	.\altera_mf.v	/^    reg [(REGISTER_WIDTH*2) -1 :0] sync_b_reg;$/;"	r
sync_busy	.\omsp_dbg_uart.v	/^reg        sync_busy;$/;"	r
sync_clock	.\altera_mf.v	/^    reg sync_clock;$/;"	r
sync_cnt	.\omsp_dbg_uart.v	/^reg [`DBG_UART_XFER_CNT_W+2:0] sync_cnt;$/;"	r
sync_dffe	.\altera_mf.v	/^    reg sync_dffe;$/;"	r
sync_done	.\omsp_dbg_uart.v	/^wire        sync_done;$/;"	n
sync_inclock	.\altera_mf.v	/^    input sync_inclock;$/;"	p
sync_inclock	.\altera_mf.v	/^    tri0 sync_inclock;$/;"	n
sync_rdaclr	.\altera_mf.v	/^    reg sync_rdaclr;$/;"	r
sync_rdaclr_pre	.\altera_mf.v	/^    reg sync_rdaclr_pre;$/;"	r
sync_reset	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] sync_reset;$/;"	r
sync_wraclr	.\altera_mf.v	/^    reg sync_wraclr;$/;"	r
sync_wraclr_pre	.\altera_mf.v	/^    reg sync_wraclr_pre;$/;"	r
systolic1_reg_wire_clk	.\altera_mf.v	/^    wire systolic1_reg_wire_clk, systolic3_reg_wire_clk;$/;"	n
systolic1_reg_wire_clr	.\altera_mf.v	/^    wire systolic1_reg_wire_clr, systolic3_reg_wire_clr;$/;"	n
systolic1_reg_wire_en	.\altera_mf.v	/^    wire systolic1_reg_wire_en, systolic3_reg_wire_en;$/;"	n
systolic3_reg_wire_clk	.\altera_mf.v	/^    wire systolic1_reg_wire_clk, systolic3_reg_wire_clk;$/;"	n
systolic3_reg_wire_clr	.\altera_mf.v	/^    wire systolic1_reg_wire_clr, systolic3_reg_wire_clr;$/;"	n
systolic3_reg_wire_en	.\altera_mf.v	/^    wire systolic1_reg_wire_en, systolic3_reg_wire_en;$/;"	n
systolic_aclr1	.\altera_mf.v	/^	parameter systolic_aclr1 = "NONE";$/;"	c
systolic_aclr3	.\altera_mf.v	/^	parameter systolic_aclr3 = "NONE";$/;"	c
systolic_delay1	.\altera_mf.v	/^	parameter systolic_delay1 = "UNREGISTERED";$/;"	c
systolic_delay3	.\altera_mf.v	/^	parameter systolic_delay3 = "UNREGISTERED";$/;"	c
systolic_register1	.\altera_mf.v	/^    wire  [(int_width_a + int_width_b) -1:0] systolic_register1;$/;"	n
systolic_register3	.\altera_mf.v	/^    wire  [(int_width_a + int_width_b) -1:0] systolic_register3;$/;"	n
t1	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t1	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t10	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t10	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t2	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t2	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t3	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t3	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t4	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t4	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t5	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t5	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t6	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t6	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t7	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t7	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t8	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t8	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
t9	.\altera_mf.v	/^    input t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	p
t9	.\altera_mf.v	/^    integer t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;$/;"	r
ta_cci0a	.\omsp_timerA.v	/^input               ta_cci0a;       \/\/ Timer A capture 0 input A$/;"	p
ta_cci0a	.\openMSP430_fpga.v	/^wire               ta_cci0a;$/;"	n
ta_cci0b	.\omsp_timerA.v	/^input               ta_cci0b;       \/\/ Timer A capture 0 input B$/;"	p
ta_cci0b	.\openMSP430_fpga.v	/^wire               ta_cci0b;$/;"	n
ta_cci1a	.\omsp_timerA.v	/^input               ta_cci1a;       \/\/ Timer A capture 1 input A$/;"	p
ta_cci1a	.\openMSP430_fpga.v	/^wire               ta_cci1a;$/;"	n
ta_cci1b	.\omsp_timerA.v	/^input               ta_cci1b;       \/\/ Timer A capture 1 input B$/;"	p
ta_cci1b	.\openMSP430_fpga.v	/^wire               ta_cci1b;$/;"	n
ta_cci2a	.\omsp_timerA.v	/^input               ta_cci2a;       \/\/ Timer A capture 2 input A$/;"	p
ta_cci2a	.\openMSP430_fpga.v	/^wire               ta_cci2a;$/;"	n
ta_cci2b	.\omsp_timerA.v	/^input               ta_cci2b;       \/\/ Timer A capture 2 input B$/;"	p
ta_cci2b	.\openMSP430_fpga.v	/^wire               ta_cci2b;$/;"	n
ta_out0	.\omsp_timerA.v	/^output              ta_out0;        \/\/ Timer A output 0$/;"	p
ta_out0	.\omsp_timerA.v	/^reg  ta_out0;$/;"	r
ta_out0	.\openMSP430_fpga.v	/^wire               ta_out0;$/;"	n
ta_out0_en	.\omsp_timerA.v	/^output              ta_out0_en;     \/\/ Timer A output 0 enable$/;"	p
ta_out0_en	.\openMSP430_fpga.v	/^wire               ta_out0_en;$/;"	n
ta_out0_mode0	.\omsp_timerA.v	/^wire ta_out0_mode0 = tacctl0[`TAOUT];                \/\/ Output$/;"	n
ta_out0_mode1	.\omsp_timerA.v	/^wire ta_out0_mode1 = equ0 ?  1'b1    : ta_out0;      \/\/ Set$/;"	n
ta_out0_mode2	.\omsp_timerA.v	/^wire ta_out0_mode2 = equ0 ? ~ta_out0 :               \/\/ Toggle\/Reset$/;"	n
ta_out0_mode3	.\omsp_timerA.v	/^wire ta_out0_mode3 = equ0 ?  1'b1    :               \/\/ Set\/Reset$/;"	n
ta_out0_mode4	.\omsp_timerA.v	/^wire ta_out0_mode4 = equ0 ? ~ta_out0 : ta_out0;      \/\/ Toggle$/;"	n
ta_out0_mode5	.\omsp_timerA.v	/^wire ta_out0_mode5 = equ0 ?  1'b0    : ta_out0;      \/\/ Reset$/;"	n
ta_out0_mode6	.\omsp_timerA.v	/^wire ta_out0_mode6 = equ0 ? ~ta_out0 :               \/\/ Toggle\/Set$/;"	n
ta_out0_mode7	.\omsp_timerA.v	/^wire ta_out0_mode7 = equ0 ?  1'b0    :               \/\/ Reset\/Set$/;"	n
ta_out0_nxt	.\omsp_timerA.v	/^wire ta_out0_nxt   = (tacctl0[`TAOUTMODx]==3'b000) ? ta_out0_mode0 :$/;"	n
ta_out1	.\omsp_timerA.v	/^output              ta_out1;        \/\/ Timer A output 1$/;"	p
ta_out1	.\omsp_timerA.v	/^reg  ta_out1;$/;"	r
ta_out1	.\openMSP430_fpga.v	/^wire               ta_out1;$/;"	n
ta_out1_en	.\omsp_timerA.v	/^output              ta_out1_en;     \/\/ Timer A output 1 enable$/;"	p
ta_out1_en	.\openMSP430_fpga.v	/^wire               ta_out1_en;$/;"	n
ta_out1_mode0	.\omsp_timerA.v	/^wire ta_out1_mode0 = tacctl1[`TAOUT];                \/\/ Output$/;"	n
ta_out1_mode1	.\omsp_timerA.v	/^wire ta_out1_mode1 = equ1 ?  1'b1    : ta_out1;      \/\/ Set$/;"	n
ta_out1_mode2	.\omsp_timerA.v	/^wire ta_out1_mode2 = equ1 ? ~ta_out1 :               \/\/ Toggle\/Reset$/;"	n
ta_out1_mode3	.\omsp_timerA.v	/^wire ta_out1_mode3 = equ1 ?  1'b1    :               \/\/ Set\/Reset$/;"	n
ta_out1_mode4	.\omsp_timerA.v	/^wire ta_out1_mode4 = equ1 ? ~ta_out1 : ta_out1;      \/\/ Toggle$/;"	n
ta_out1_mode5	.\omsp_timerA.v	/^wire ta_out1_mode5 = equ1 ?  1'b0    : ta_out1;      \/\/ Reset$/;"	n
ta_out1_mode6	.\omsp_timerA.v	/^wire ta_out1_mode6 = equ1 ? ~ta_out1 :               \/\/ Toggle\/Set$/;"	n
ta_out1_mode7	.\omsp_timerA.v	/^wire ta_out1_mode7 = equ1 ?  1'b0    :               \/\/ Reset\/Set$/;"	n
ta_out1_nxt	.\omsp_timerA.v	/^wire ta_out1_nxt   = (tacctl1[`TAOUTMODx]==3'b000) ? ta_out1_mode0 :$/;"	n
ta_out2	.\omsp_timerA.v	/^output              ta_out2;        \/\/ Timer A output 2$/;"	p
ta_out2	.\omsp_timerA.v	/^reg  ta_out2;$/;"	r
ta_out2	.\openMSP430_fpga.v	/^wire               ta_out2;$/;"	n
ta_out2_en	.\omsp_timerA.v	/^output              ta_out2_en;     \/\/ Timer A output 2 enable$/;"	p
ta_out2_en	.\openMSP430_fpga.v	/^wire               ta_out2_en;$/;"	n
ta_out2_mode0	.\omsp_timerA.v	/^wire ta_out2_mode0 = tacctl2[`TAOUT];                \/\/ Output$/;"	n
ta_out2_mode1	.\omsp_timerA.v	/^wire ta_out2_mode1 = equ2 ?  1'b1    : ta_out2;      \/\/ Set$/;"	n
ta_out2_mode2	.\omsp_timerA.v	/^wire ta_out2_mode2 = equ2 ? ~ta_out2 :               \/\/ Toggle\/Reset$/;"	n
ta_out2_mode3	.\omsp_timerA.v	/^wire ta_out2_mode3 = equ2 ?  1'b1    :               \/\/ Set\/Reset$/;"	n
ta_out2_mode4	.\omsp_timerA.v	/^wire ta_out2_mode4 = equ2 ? ~ta_out2 : ta_out2;      \/\/ Toggle$/;"	n
ta_out2_mode5	.\omsp_timerA.v	/^wire ta_out2_mode5 = equ2 ?  1'b0    : ta_out2;      \/\/ Reset$/;"	n
ta_out2_mode6	.\omsp_timerA.v	/^wire ta_out2_mode6 = equ2 ? ~ta_out2 :               \/\/ Toggle\/Set$/;"	n
ta_out2_mode7	.\omsp_timerA.v	/^wire ta_out2_mode7 = equ2 ?  1'b0    :               \/\/ Reset\/Set$/;"	n
ta_out2_nxt	.\omsp_timerA.v	/^wire ta_out2_nxt   = (tacctl2[`TAOUTMODx]==3'b000) ? ta_out2_mode0 :$/;"	n
taccr0	.\omsp_timerA.v	/^reg  [15:0] taccr0;$/;"	r
taccr0_rd	.\omsp_timerA.v	/^wire [15:0] taccr0_rd  = taccr0          & {16{reg_rd[TACCR0]}};$/;"	n
taccr0_wr	.\omsp_timerA.v	/^wire        taccr0_wr = reg_wr[TACCR0];$/;"	n
taccr1	.\omsp_timerA.v	/^reg  [15:0] taccr1;$/;"	r
taccr1_rd	.\omsp_timerA.v	/^wire [15:0] taccr1_rd  = taccr1          & {16{reg_rd[TACCR1]}};$/;"	n
taccr1_wr	.\omsp_timerA.v	/^wire        taccr1_wr = reg_wr[TACCR1];$/;"	n
taccr2	.\omsp_timerA.v	/^reg  [15:0] taccr2;$/;"	r
taccr2_rd	.\omsp_timerA.v	/^wire [15:0] taccr2_rd  = taccr2          & {16{reg_rd[TACCR2]}};$/;"	n
taccr2_wr	.\omsp_timerA.v	/^wire        taccr2_wr = reg_wr[TACCR2];$/;"	n
tacctl0	.\omsp_timerA.v	/^reg  [15:0] tacctl0;$/;"	r
tacctl0_full	.\omsp_timerA.v	/^wire [15:0] tacctl0_full = tacctl0 | {5'h00, scci0, 6'h00, cci0_s, 3'h0};$/;"	n
tacctl0_rd	.\omsp_timerA.v	/^wire [15:0] tacctl0_rd = tacctl0_full    & {16{reg_rd[TACCTL0]}};$/;"	n
tacctl0_wr	.\omsp_timerA.v	/^wire        tacctl0_wr = reg_wr[TACCTL0];$/;"	n
tacctl1	.\omsp_timerA.v	/^reg  [15:0] tacctl1;$/;"	r
tacctl1_full	.\omsp_timerA.v	/^wire [15:0] tacctl1_full = tacctl1 | {5'h00, scci1, 6'h00, cci1_s, 3'h0};$/;"	n
tacctl1_rd	.\omsp_timerA.v	/^wire [15:0] tacctl1_rd = tacctl1_full    & {16{reg_rd[TACCTL1]}};$/;"	n
tacctl1_wr	.\omsp_timerA.v	/^wire        tacctl1_wr = reg_wr[TACCTL1];$/;"	n
tacctl2	.\omsp_timerA.v	/^reg  [15:0] tacctl2;$/;"	r
tacctl2_full	.\omsp_timerA.v	/^wire [15:0] tacctl2_full = tacctl2 | {5'h00, scci2, 6'h00, cci2_s, 3'h0};$/;"	n
tacctl2_rd	.\omsp_timerA.v	/^wire [15:0] tacctl2_rd = tacctl2_full    & {16{reg_rd[TACCTL2]}};$/;"	n
tacctl2_wr	.\omsp_timerA.v	/^wire        tacctl2_wr = reg_wr[TACCTL2];$/;"	n
taclk	.\omsp_timerA.v	/^input               taclk;          \/\/ TACLK external timer clock (SLOW)$/;"	p
taclk	.\openMSP430_fpga.v	/^wire               taclk;$/;"	n
taclk_dly	.\omsp_timerA.v	/^reg  taclk_dly;$/;"	r
taclk_en	.\omsp_timerA.v	/^wire taclk_en = taclk_s & ~taclk_dly;$/;"	n
taclk_s	.\omsp_timerA.v	/^wire taclk_s;$/;"	n
taclr	.\omsp_timerA.v	/^wire        taclr    = tactl_wr & per_din[`TACLR];$/;"	n
tactl	.\omsp_timerA.v	/^reg   [9:0] tactl;$/;"	r
tactl	.\omsp_timerA.v	/^wire [15:0] tactl_rd   = {6'h00, tactl}  & {16{reg_rd[TACTL]}};$/;"	n
tactl_rd	.\omsp_timerA.v	/^wire [15:0] tactl_rd   = {6'h00, tactl}  & {16{reg_rd[TACTL]}};$/;"	n
tactl_wr	.\omsp_timerA.v	/^wire        tactl_wr = reg_wr[TACTL];$/;"	n
taifg_clr	.\omsp_timerA.v	/^wire        taifg_clr;$/;"	n
taifg_set	.\omsp_timerA.v	/^wire        taifg_set;$/;"	n
taiv	.\omsp_timerA.v	/^wire [15:0] taiv_rd    = {12'h000, taiv} & {16{reg_rd[TAIV]}};$/;"	n
taiv	.\omsp_timerA.v	/^wire [3:0] taiv = (tacctl1[`TACCIFG] & tacctl1[`TACCIE]) ? 4'h2 :$/;"	n
taiv_rd	.\omsp_timerA.v	/^wire [15:0] taiv_rd    = {12'h000, taiv} & {16{reg_rd[TAIV]}};$/;"	n
tap0_is_active	.\altera_mf.v	/^    reg tap0_is_active;$/;"	r
tap_distance	.\altera_mf.v	/^    parameter tap_distance = 3;     \/\/ Specifies the distance between the$/;"	c
tap_phase	.\altera_mf.v	/^    input tap_phase, m, n;$/;"	p
tap_phase	.\altera_mf.v	/^    input tap_phase, ph_base;$/;"	p
tap_phase	.\altera_mf.v	/^    input tap_phase;$/;"	p
tap_phase	.\altera_mf.v	/^    integer tap_phase, m, n, phase;$/;"	r
tap_phase	.\altera_mf.v	/^    integer tap_phase, ph_base;$/;"	r
tap_phase	.\altera_mf.v	/^    integer tap_phase;$/;"	r
taps	.\altera_mf.v	/^    output [RAM_WIDTH-1:0] taps;    \/\/ Output from the regularly spaced taps$/;"	p
taps	.\altera_mf.v	/^    reg [RAM_WIDTH-1:0] taps;$/;"	r
taps_tmp	.\altera_mf.v	/^    reg [RAM_WIDTH-1:0] taps_tmp;$/;"	r
tar	.\omsp_timerA.v	/^reg  [15:0] tar;$/;"	r
tar_add	.\omsp_timerA.v	/^wire [15:0] tar_add  = tar_inc ? 16'h0001 :$/;"	n
tar_clk	.\omsp_timerA.v	/^wire        tar_clk;$/;"	n
tar_clr	.\omsp_timerA.v	/^wire        tar_clr;$/;"	n
tar_dec	.\omsp_timerA.v	/^wire        tar_dec;$/;"	n
tar_dir	.\omsp_timerA.v	/^reg tar_dir;$/;"	r
tar_inc	.\omsp_timerA.v	/^wire        tar_inc;$/;"	n
tar_nxt	.\omsp_timerA.v	/^wire [15:0] tar_nxt  = tar_clr ? 16'h0000 : (tar+tar_add);$/;"	n
tar_rd	.\omsp_timerA.v	/^wire [15:0] tar_rd     = tar             & {16{reg_rd[TAR]}};$/;"	n
tar_wr	.\omsp_timerA.v	/^wire        tar_wr = reg_wr[TAR];$/;"	n
tb_openMSP430_fpga	.\tb_openMSP430_fpga.v	/^module  tb_openMSP430_fpga;$/;"	m
tb_openMSP430_fpga	.\work\tb_open@m@s@p430_fpga\_primary.vhd	/^entity tb_openMSP430_fpga is$/;"	e
tck	.\altera_mf.v	/^    input     tck;  \/\/ tck signal from signal_gen$/;"	p
tck	.\altera_mf.v	/^    output    tck;$/;"	p
tck	.\altera_mf.v	/^    output   tck;  \/\/ tck signal from megafunction$/;"	p
tck	.\altera_mf.v	/^    reg    tck;$/;"	r
tck_i	.\altera_mf.v	/^    wire   tck_i;$/;"	n
tdi	.\altera_mf.v	/^    input     tdi;  \/\/ tdi signal from signal_gen$/;"	p
tdi	.\altera_mf.v	/^    input    tdi;$/;"	p
tdi	.\altera_mf.v	/^    output    tdi;$/;"	p
tdi	.\altera_mf.v	/^    output   tdi;  \/\/ tdi signal from megafunction$/;"	p
tdi	.\altera_mf.v	/^    reg    tdi;$/;"	r
tdi_i	.\altera_mf.v	/^    wire   tdi_i;$/;"	n
tdi_reg	.\altera_mf.v	/^    reg                                     tdi_reg;$/;"	r
tdo	.\altera_mf.v	/^    input     tdo;$/;"	p
tdo	.\altera_mf.v	/^    input    tdo;$/;"	p
tdo	.\altera_mf.v	/^    input   tdo;  \/\/ tdo signal into megafunction$/;"	p
tdo	.\altera_mf.v	/^    output    tdo;  \/\/ tdo signal to signal_gen$/;"	p
tdo	.\altera_mf.v	/^    output    tdo;$/;"	p
tdo_i	.\altera_mf.v	/^    wire   tdo_i;$/;"	n
tdo_reg	.\altera_mf.v	/^    reg       tdo_reg;$/;"	r
tdo_rom_reg	.\altera_mf.v	/^    reg       tdo_rom_reg;$/;"	r
temp	.\altera_mf.v	/^    reg temp;$/;"	r
tempLength	.\altera_mf.v	/^                reg [`DEFAULT_BIT_LENGTH - 1 : 0 ] tempLength;                    $/;"	r
tempLength_idx	.\altera_mf.v	/^                integer tempLength_idx;          $/;"	r
tempTime	.\altera_mf.v	/^                reg [`DEFAULT_BIT_LENGTH - 1 : 0 ] tempTime;$/;"	r
tempType	.\altera_mf.v	/^                reg [`TYPE_BIT_LENGTH - 1 : 0] tempType;        $/;"	r
temp_add	.\altera_mf.v	/^        reg [2*int_width_result - 1 :0] temp_add;$/;"	r
temp_mant_result	.\altera_mf.v	/^        inout  [(2 * width_man) + 1 : 0] temp_mant_result;$/;"	p
temp_mult	.\altera_mf.v	/^        reg [int_width_a + int_width_b -1 :0] temp_mult;$/;"	r
temp_mult	.\altera_mf.v	/^    reg [int_width_a + int_width_b - 1 : 0] temp_mult;$/;"	r
temp_mult_1	.\altera_mf.v	/^    reg [int_width_a + int_width_b - 1 : 0] temp_mult_1;$/;"	r
temp_mult_signed	.\altera_mf.v	/^        reg temp_mult_signed;$/;"	r
temp_mult_signed	.\altera_mf.v	/^    reg temp_mult_signed;$/;"	r
temp_mult_zero	.\altera_mf.v	/^        reg [int_width_a + int_width_b -1 :0] temp_mult_zero;$/;"	r
temp_mult_zero	.\altera_mf.v	/^        reg [int_width_a + int_width_multiply_b -1 :0] temp_mult_zero;$/;"	r
temp_mult_zero	.\altera_mf.v	/^    supply0 [int_width_a + int_width_b - 1 : 0] temp_mult_zero;$/;"	n
temp_offset	.\altera_mf.v	/^    integer temp_offset;$/;"	r
temp_result	.\altera_mf.v	/^    reg[WIDTH_MAN_EXP : 0] temp_result;$/;"	r
temp_sub	.\altera_mf.v	/^        reg [2*int_width_result - 1 :0] temp_sub;$/;"	r
temp_sum	.\altera_mf.v	/^    reg  [2*int_width_result - 1 :0] temp_sum;$/;"	r
temp_sum	.\altera_mf.v	/^    reg [int_width_result : 0] temp_sum;$/;"	r
temp_sum	.\altera_mf.v	/^    reg [width_out:0] temp_sum;$/;"	r
temp_sum_reg	.\altera_mf.v	/^    reg  [2*int_width_result - 1 : 0] temp_sum_reg;$/;"	r
temp_sum_wire	.\altera_mf.v	/^    wire [width_out:0] temp_sum_wire;$/;"	n
temp_value	.\altera_mf.v	/^    reg [(2*data_width) - 1 : 0] temp_value;$/;"	r
temp_wa	.\altera_mf.v	/^    reg [width_a-1:0] temp_wa;$/;"	r
temp_wa2	.\altera_mf.v	/^    reg [width_a-1:0] temp_wa2;$/;"	r
temp_wa2b	.\altera_mf.v	/^    reg [width_a-1:0] temp_wa2b;$/;"	r
temp_wb	.\altera_mf.v	/^    reg [width_b-1:0] temp_wb;$/;"	r
temp_wb2	.\altera_mf.v	/^    reg [width_b-1:0] temp_wb2;$/;"	r
template_periph_16b	.\template_periph_16b.v	/^module  template_periph_16b ($/;"	m
template_periph_16b	.\work\template_periph_16b\_primary.vhd	/^entity template_periph_16b is$/;"	e
template_periph_8b	.\template_periph_8b.v	/^module  template_periph_8b ($/;"	m
template_periph_8b	.\work\template_periph_8b\_primary.vhd	/^entity template_periph_8b is$/;"	e
terminate	.\print_task.v	/^task terminate;$/;"	t
terminationclock	.\altera_mf.v	/^    input    terminationclock;$/;"	p
terminationenable	.\altera_mf.v	/^    input    terminationenable;$/;"	p
test_bypass_lock_detect	.\altera_mf.v	/^    parameter test_bypass_lock_detect              = "off";$/;"	c
test_counter_c0_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c0_delay_chain_bits = 0;$/;"	c
test_counter_c1_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c1_delay_chain_bits = 0;$/;"	c
test_counter_c2_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c2_delay_chain_bits = 0;$/;"	c
test_counter_c3_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c3_delay_chain_bits = 0;$/;"	c
test_counter_c3_sclk_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c3_sclk_delay_chain_bits  = -1;$/;"	c
test_counter_c4_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c4_delay_chain_bits = 0;$/;"	c
test_counter_c4_sclk_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c4_sclk_delay_chain_bits  = -1;$/;"	c
test_counter_c5_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_c5_delay_chain_bits = 0;$/;"	c
test_counter_c5_lden_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c5_lden_delay_chain_bits  = -1;$/;"	c
test_counter_c6_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c6_delay_chain_bits = 0;$/;"	c
test_counter_c6_lden_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c6_lden_delay_chain_bits  = -1;$/;"	c
test_counter_c7_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c7_delay_chain_bits = 0;$/;"	c
test_counter_c8_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c8_delay_chain_bits = 0;$/;"	c
test_counter_c9_delay_chain_bits	.\altera_mf.v	/^    parameter test_counter_c9_delay_chain_bits = 0;$/;"	c
test_counter_m_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_m_delay_chain_bits = 0;$/;"	c
test_counter_n_delay_chain_bits	.\altera_mf.v	/^parameter test_counter_n_delay_chain_bits = 0;$/;"	c
test_feedback_comp_delay_chain_bits	.\altera_mf.v	/^    parameter test_feedback_comp_delay_chain_bits  = 0;$/;"	c
test_feedback_comp_delay_chain_bits	.\altera_mf.v	/^parameter test_feedback_comp_delay_chain_bits = 0;$/;"	c
test_input	.\altera_mf.v	/^	parameter test_input		= 5'd10;$/;"	c
test_input_comp_delay_chain_bits	.\altera_mf.v	/^    parameter test_input_comp_delay_chain_bits     = 0;$/;"	c
test_input_comp_delay_chain_bits	.\altera_mf.v	/^parameter test_input_comp_delay_chain_bits = 0;$/;"	c
test_mode_inclk	.\altera_mf.v	/^    wire test_mode_inclk;$/;"	n
test_volt_reg_output_mode_bits	.\altera_mf.v	/^parameter test_volt_reg_output_mode_bits = 0;$/;"	c
test_volt_reg_output_voltage_bits	.\altera_mf.v	/^parameter test_volt_reg_output_voltage_bits = 0;$/;"	c
test_volt_reg_test_mode	.\altera_mf.v	/^parameter test_volt_reg_test_mode = "false";$/;"	c
testbus_set	.\altera_mf.v	/^	parameter testbus_set		= 5'd2;$/;"	c
testbuses	.\altera_mf.v	/^        input   [(4*number_of_channels)-1:0]  testbuses;$/;"	p
testbuses	.\altera_mf.v	/^        input   [(number_of_channels)-1:0]  testbuses;$/;"	p
testbuses	.\altera_mf.v	/^        input   [7:0]  testbuses; \/\/ always 8 bits - muxing done in the 'B'$/;"	p
testbuses	.\altera_mf.v	/^  input [7*number_of_channels-1:0]  testbuses,$/;"	p
testdownout	.\altera_mf.v	/^    output testdownout;$/;"	p
testin	.\altera_mf.v	/^    input [3:0] testin;$/;"	p
testupout	.\altera_mf.v	/^    output testupout;$/;"	p
tf_done_reg	.\dma_pri.v	/^reg     tf_done_reg ;$/;"	r
time	.\altera_mf.v	/^function time time_delay;$/;"	f
time_delay	.\altera_mf.v	/^    input [31:0] time_delay;$/;"	p
time_idx	.\altera_mf.v	/^    integer   time_idx;       \/\/ decoding time index$/;"	r
time_idx_cur	.\altera_mf.v	/^    integer   time_idx_cur;   \/\/ reading\/outputing time index$/;"	r
time_idx_old	.\altera_mf.v	/^    integer   time_idx_old;   \/\/ previous decoding time index$/;"	r
tmp	.\altera_mf.v	/^        reg [8:1] tmp;$/;"	r
tmp	.\altera_mf.v	/^    reg [8:1] tmp; \/\/ to get the value of the current byte$/;"	r
tmp	.\altera_mf.v	/^    reg [8:1] tmp;$/;"	r
tmp	.\altera_mf.v	/^reg [8:1] tmp;$/;"	r
tmp_bit	.\altera_mf.v	/^    reg tmp_bit;$/;"	r
tmp_char	.\altera_mf.v	/^    reg [3 : 0] hex, tmp_char;$/;"	r
tmp_char	.\altera_mf.v	/^    reg [3:0] hex, tmp_char;$/;"	r
tmp_counter_high	.\altera_mf.v	/^    integer tmp_counter_high;$/;"	r
tmp_counter_low	.\altera_mf.v	/^    integer counter_l, tmp_counter_low;$/;"	r
tmp_cout	.\altera_mf.v	/^    reg tmp_cout;$/;"	r
tmp_new_data	.\altera_mf.v	/^    integer                tmp_new_data;$/;"	r
tmp_per0	.\altera_mf.v	/^time tmp_per0;$/;"	r
tmp_per1	.\altera_mf.v	/^time tmp_per1;$/;"	r
tmp_per2	.\altera_mf.v	/^time tmp_per2;$/;"	r
tmp_per_ext	.\altera_mf.v	/^time tmp_per_ext;$/;"	r
tmp_q	.\altera_mf.v	/^    reg [lpm_width-1:0] tmp_q;$/;"	r
tmp_reg	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] tmp_reg;$/;"	r
tmp_reg	.\altera_mf.v	/^    reg tmp_reg;$/;"	r
tmp_rem	.\altera_mf.v	/^    integer tmp_rem;$/;"	r
tmp_rem0	.\altera_mf.v	/^integer tmp_rem0;$/;"	r
tmp_rem1	.\altera_mf.v	/^integer tmp_rem1;$/;"	r
tmp_rem2	.\altera_mf.v	/^integer tmp_rem2;$/;"	r
tmp_rem_ext	.\altera_mf.v	/^integer tmp_rem_ext;$/;"	r
tmp_result	.\altera_mf.v	/^    reg [`max_precision-1:0] tmp_result;$/;"	r
tmp_scan_data	.\altera_mf.v	/^    reg [173:0] tmp_scan_data;$/;"	r
tmp_vco_per	.\altera_mf.v	/^    integer tmp_vco_per;$/;"	r
tmp_vco_per	.\altera_mf.v	/^    time tmp_vco_per;$/;"	r
tms	.\altera_mf.v	/^    input     tms;  \/\/ tms signal from signal_gen$/;"	p
tms	.\altera_mf.v	/^    input    tms;$/;"	p
tms	.\altera_mf.v	/^    output    tms;$/;"	p
tms	.\altera_mf.v	/^    output   tms;               \/\/ tms signal$/;"	p
tms	.\altera_mf.v	/^    reg    tms;$/;"	r
tms_i	.\altera_mf.v	/^    wire   tms_i;$/;"	n
tms_reg	.\altera_mf.v	/^    reg                                     tms_reg;$/;"	r
tolower	.\altera_mf.v	/^function [8:1] tolower;$/;"	f
total_pull_back	.\altera_mf.v	/^    integer total_pull_back;$/;"	r
trace	.\trace.vhd	/^ENTITY trace IS$/;"	e
trace_controller	.\trace_controller.vhd	/^ENTITY trace_controller IS $/;"	e
transceiver_init	.\altera_mf.v	/^        input   transceiver_init;$/;"	p
transfer	.\altera_mf.v	/^    reg transfer;$/;"	r
transfer_enable	.\altera_mf.v	/^    reg transfer_enable;$/;"	r
translate_string	.\altera_mf.v	/^    function [8*6:1] translate_string;$/;"	f
trigger0	.\openMSP430_fpga.v	/^wire               trigger0;$/;"	n
trigger1	.\openMSP430_fpga.v	/^wire               trigger1;$/;"	n
trigger2	.\openMSP430_fpga.v	/^wire               trigger2;$/;"	n
trigger_in	.\altera_mf.v	/^    input    trigger_in;$/;"	p
trigger_out	.\altera_mf.v	/^    output    trigger_out;$/;"	p
tristate_checkbox	.\altera_mf.v	/^    parameter    tristate_checkbox    =    0;$/;"	c
try_result	.\altera_mf.v	/^        reg [`max_precision-1:0] try_result;$/;"	r
tt	.\altera_mf.v	/^    integer off_addr, nn, aaaa, aaaa_pre, tt, cc, aah, aal, dd, sum ;$/;"	r
tt	.\altera_mf.v	/^    integer off_addr, nn, address, tt, cc, aah, aal, dd, sum ;$/;"	r
ttn_m_cntr	.\altera_mf.v	/^module ttn_m_cntr   ( clk,$/;"	m
ttn_m_cntr	.\work\ttn_m_cntr\_primary.vhd	/^entity ttn_m_cntr is$/;"	e
ttn_n_cntr	.\altera_mf.v	/^module ttn_n_cntr   ( clk,$/;"	m
ttn_n_cntr	.\work\ttn_n_cntr\_primary.vhd	/^entity ttn_n_cntr is$/;"	e
ttn_scale_cntr	.\altera_mf.v	/^module ttn_scale_cntr   ( clk,$/;"	m
ttn_scale_cntr	.\work\ttn_scale_cntr\_primary.vhd	/^entity ttn_scale_cntr is$/;"	e
two_character	.\altera_mf.v	/^    reg [15 : 0]                            two_character; $/;"	r
tx_active	.\omsp_dbg_uart.v	/^wire tx_active = (uart_state==TX_DATA1) | (uart_state==TX_DATA2);$/;"	n
tx_bps	.\tb_openMSP430_fpga.v	/^integer tx_bps;$/;"	r
tx_coreclock	.\altera_mf.v	/^    output tx_coreclock;$/;"	p
tx_coreclock_int	.\altera_mf.v	/^    wire tx_coreclock_int;$/;"	n
tx_data	.\tb_openMSP430_fpga.v	/^reg [7:0] tx_data;$/;"	r
tx_data	.\uart_tx.v	/^reg[7:0] tx_data;   \/\/待发送数据的寄存器$/;"	r
tx_data_reset	.\altera_mf.v	/^    input tx_data_reset;$/;"	p
tx_ddio_out	.\altera_mf.v	/^    reg [number_of_channels -1 :0] tx_ddio_out;$/;"	r
tx_ddio_out	.\altera_mf.v	/^    reg [number_of_channels-1 :0] tx_ddio_out;$/;"	r
tx_en	.\uart_tx.v	/^reg tx_en;  \/\/发送数据使能信号，高有效$/;"	r
tx_enable	.\altera_mf.v	/^    input tx_enable;$/;"	p
tx_enable	.\altera_mf.v	/^    tri1 tx_enable;$/;"	n
tx_fastclk	.\altera_mf.v	/^    input tx_fastclk;$/;"	p
tx_fastclk	.\altera_mf.v	/^    wire tx_fastclk;$/;"	n
tx_in	.\altera_mf.v	/^    input  [9 : 0] tx_in;$/;"	p
tx_in	.\altera_mf.v	/^    input  [REGISTER_WIDTH -1 : 0] tx_in;$/;"	p
tx_in	.\altera_mf.v	/^    input [REGISTER_WIDTH -1: 0] tx_in;$/;"	p
tx_in_2ary	.\altera_mf.v	/^    reg [number_of_channels-1:0] tx_in_2ary [deserialization_factor-1:0];$/;"	r
tx_in_chn	.\altera_mf.v	/^    reg [number_of_channels -1 :0] tx_in_chn;$/;"	r
tx_in_int	.\altera_mf.v	/^    wire [REGISTER_WIDTH -1 : 0] tx_in_int;$/;"	n
tx_in_int2	.\altera_mf.v	/^    wire [(REGISTER_WIDTH*2) -1 : 0] tx_in_int2;$/;"	n
tx_in_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] tx_in_reg;$/;"	r
tx_inclock	.\altera_mf.v	/^    input tx_inclock;$/;"	p
tx_locked	.\altera_mf.v	/^    input tx_locked;$/;"	p
tx_locked	.\altera_mf.v	/^    output tx_locked;$/;"	p
tx_locked_int	.\altera_mf.v	/^    wire tx_locked_int;$/;"	n
tx_out	.\altera_mf.v	/^    output [number_of_channels -1 :0] tx_out;$/;"	p
tx_out	.\altera_mf.v	/^    output [number_of_channels-1 :0] tx_out;$/;"	p
tx_out	.\altera_mf.v	/^    output tx_out;$/;"	p
tx_out_delay	.\altera_mf.v	/^    time tx_out_delay;$/;"	r
tx_out_neg	.\altera_mf.v	/^    reg tx_out_neg;$/;"	r
tx_out_reg	.\altera_mf.v	/^    reg tx_out_reg;$/;"	r
tx_out_stratix	.\altera_mf.v	/^    reg [number_of_channels-1 :0] tx_out_stratix;$/;"	r
tx_outclock	.\altera_mf.v	/^    output tx_outclock;$/;"	p
tx_outclock_tmp	.\altera_mf.v	/^    reg tx_outclock_tmp;$/;"	r
tx_parallel_load_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] tx_parallel_load_reg;$/;"	r
tx_parallel_load_reg	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] tx_parallel_load_reg;$/;"	r
tx_pll_enable	.\altera_mf.v	/^    input tx_pll_enable;$/;"	p
tx_pll_enable	.\altera_mf.v	/^    tri1 tx_pll_enable;$/;"	n
tx_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0]     tx_reg;$/;"	r
tx_reg2	.\altera_mf.v	/^    reg [(REGISTER_WIDTH*2) -1 : 0] tx_reg2;$/;"	r
tx_reg_2ary	.\altera_mf.v	/^    reg [number_of_channels-1:0] tx_reg_2ary [deserialization_factor-1:0];$/;"	r
tx_reg_clk	.\altera_mf.v	/^    wire tx_reg_clk;$/;"	n
tx_regclk	.\altera_mf.v	/^    input tx_regclk;$/;"	p
tx_shift_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0]     tx_shift_reg;$/;"	r
tx_shift_reg	.\altera_mf.v	/^    reg [REGISTER_WIDTH -1 : 0] tx_shift_reg;$/;"	r
tx_shift_reg	.\altera_mf.v	/^    reg [deserialization_factor -1 : 0] tx_shift_reg;$/;"	r
tx_shift_reg2	.\altera_mf.v	/^    reg [(REGISTER_WIDTH*2) -1 : 0] tx_shift_reg2;$/;"	r
tx_slowclk	.\altera_mf.v	/^    input tx_slowclk;$/;"	p
tx_slowclk	.\altera_mf.v	/^    wire tx_slowclk;$/;"	n
tx_slowclk_dly	.\altera_mf.v	/^    reg tx_slowclk_dly;$/;"	r
tx_syncclock	.\altera_mf.v	/^    input tx_syncclock;$/;"	p
tx_task	.\tb_openMSP430_fpga.v	/^task tx_task;$/;"	t
txd_start	.\omsp_dbg_uart.v	/^wire       txd_start    = dbg_rd_rdy | (xfer_done & (uart_state==TX_DATA1));$/;"	n
txdata	.\tb_openMSP430_fpga.v	/^    input [7:0] txdata;$/;"	p
type_idx	.\altera_mf.v	/^    integer   type_idx;       \/\/ decoding type index$/;"	r
type_idx_cur	.\altera_mf.v	/^    integer   type_idx_cur;   \/\/ reading\/outputing type index$/;"	r
type_idx_old	.\altera_mf.v	/^    integer   type_idx_old;   \/\/ previous decoding type index$/;"	r
uart_ctrl	.\uart_speed_select.v	/^reg[2:0] uart_ctrl; \/\/ uart波特率选择寄存器$/;"	r
uart_rx	.\uart_rx.v	/^module uart_rx($/;"	m
uart_rx	.\work\uart_rx\_primary.vhd	/^entity uart_rx is$/;"	e
uart_rxd	.\omsp_dbg_uart.v	/^    wire uart_rxd = dbg_uart_rxd;$/;"	n
uart_rxd	.\omsp_dbg_uart.v	/^    wire uart_rxd = ~uart_rxd_n;$/;"	n
uart_rxd	.\openMSP430_fpga.v	/^input  uart_rxd;$/;"	p
uart_rxd	.\openMSP430_fpga.v	/^wire               uart_rxd;$/;"	n
uart_rxd	.\tb_openMSP430_fpga.v	/^reg               uart_rxd;$/;"	r
uart_rxd_n	.\omsp_dbg_uart.v	/^    wire uart_rxd_n;$/;"	n
uart_speed_select	.\uart_speed_select.v	/^module uart_speed_select($/;"	m
uart_speed_select	.\work\uart_speed_select\_primary.vhd	/^entity uart_speed_select is$/;"	e
uart_state	.\omsp_dbg_uart.v	/^reg   [2:0] uart_state;$/;"	r
uart_state_nxt	.\omsp_dbg_uart.v	/^reg   [2:0] uart_state_nxt;$/;"	r
uart_top	.\uart_top.v	/^module uart_top($/;"	m
uart_top	.\work\uart_top\_primary.vhd	/^entity uart_top is$/;"	e
uart_tx	.\uart_tx.v	/^module uart_tx($/;"	m
uart_tx	.\work\uart_tx\_primary.vhd	/^entity uart_tx is$/;"	e
uart_txd	.\openMSP430_fpga.v	/^output uart_txd;$/;"	p
uart_txd	.\openMSP430_fpga.v	/^wire               uart_txd;$/;"	n
uart_txd	.\tb_openMSP430_fpga.v	/^wire               uart_txd;$/;"	n
underflow	.\altera_mf.v	/^    output underflow;$/;"	p
underflow_bit	.\altera_mf.v	/^    reg underflow_bit;$/;"	r
underflow_checking	.\altera_mf.v	/^    parameter underflow_checking      = "ON";$/;"	c
underflow_checking	.\altera_mf.v	/^    parameter underflow_checking = "ON";$/;"	c
underflow_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] underflow_pipe;$/;"	r
unsigned_sub1_overflow	.\altera_mf.v	/^    reg unsigned_sub1_overflow;$/;"	r
unsigned_sub1_overflow_mult_reg	.\altera_mf.v	/^    reg unsigned_sub1_overflow_mult_reg;$/;"	r
unsigned_sub1_overflow_pipe_reg	.\altera_mf.v	/^    reg [extra_latency : 0] unsigned_sub1_overflow_pipe_reg;$/;"	r
unsigned_sub1_overflow_reg	.\altera_mf.v	/^    reg unsigned_sub1_overflow_reg;$/;"	r
unsigned_sub1_overflow_wire	.\altera_mf.v	/^    wire unsigned_sub1_overflow_wire;$/;"	n
unsigned_sub3_overflow	.\altera_mf.v	/^    reg unsigned_sub3_overflow;$/;"	r
unsigned_sub3_overflow_mult_reg	.\altera_mf.v	/^    reg unsigned_sub3_overflow_mult_reg;$/;"	r
unsigned_sub3_overflow_pipe_reg	.\altera_mf.v	/^    reg [extra_latency : 0] unsigned_sub3_overflow_pipe_reg;$/;"	r
unsigned_sub3_overflow_reg	.\altera_mf.v	/^    reg unsigned_sub3_overflow_reg;$/;"	r
unsigned_sub3_overflow_wire	.\altera_mf.v	/^    wire unsigned_sub3_overflow_wire;$/;"	n
unused_clk_ext	.\altera_mf.v	/^    wire unused_clk_ext;$/;"	n
update_conf_latches	.\altera_mf.v	/^    wire update_conf_latches;$/;"	n
update_conf_latches_reg	.\altera_mf.v	/^    reg  update_conf_latches_reg;$/;"	r
update_phase	.\altera_mf.v	/^    reg update_phase;$/;"	r
updown	.\altera_mf.v	/^    input  updown;$/;"	p
updown	.\altera_mf.v	/^    tri1 updown;$/;"	n
us_unit_counter	.\altera_mf.v	/^    parameter    us_unit_counter    =    1;$/;"	c
use_coreclock_input	.\altera_mf.v	/^    parameter use_coreclock_input = "OFF";$/;"	c
use_dc_coupling	.\altera_mf.v	/^    parameter use_dc_coupling                      = "false";$/;"	c
use_dc_coupling	.\altera_mf.v	/^    parameter use_dc_coupling = "false";$/;"	c
use_dpa_calibration	.\altera_mf.v	/^    parameter use_dpa_calibration = ((ARRIAII_RX_STYLE == 1) && (enable_dpa_calibration == "ON"))$/;"	c
use_dpa_calibration	.\altera_mf.v	/^    parameter use_dpa_calibration = 0;$/;"	c
use_dpll_rawperror	.\altera_mf.v	/^    parameter use_dpll_rawperror = "OFF";$/;"	c
use_eab	.\altera_mf.v	/^    parameter use_eab                 = "ON";$/;"	c
use_eab	.\altera_mf.v	/^    parameter use_eab = "ON";$/;"	c
use_external_pll	.\altera_mf.v	/^    parameter use_external_pll = "OFF";$/;"	c
use_extra_ddio_register	.\altera_mf.v	/^    parameter use_extra_ddio_register = "YES";$/;"	c
use_extra_pll_clk	.\altera_mf.v	/^    parameter use_extra_pll_clk = "NO";$/;"	c
use_falling_clock_edge	.\altera_mf.v	/^    parameter use_falling_clock_edge = "FALSE";$/;"	c
use_low_latency_fifo	.\altera_mf.v	/^    reg use_low_latency_fifo;$/;"	r
use_new_coreclk_ckt	.\altera_mf.v	/^    parameter use_new_coreclk_ckt = "FALSE";$/;"	c
use_no_phase_shift	.\altera_mf.v	/^    parameter use_no_phase_shift = "ON";$/;"	c
use_rdfull_speed	.\altera_mf.v	/^    reg use_rdfull_speed;$/;"	r
use_self_generated_outclock	.\altera_mf.v	/^    parameter use_self_generated_outclock = "FALSE";$/;"	c
use_vco_bypass	.\altera_mf.v	/^    parameter use_vco_bypass = "false";$/;"	c
use_wrempty_speed	.\altera_mf.v	/^    reg use_wrempty_speed;$/;"	r
use_wys	.\altera_mf.v	/^    parameter use_wys = "ON";$/;"	c
usedw	.\altera_mf.v	/^    output [lpm_widthu-1:0] usedw;$/;"	p
usedw_in	.\altera_mf.v	/^    input [lpm_widthad-1:0] usedw_in;$/;"	p
user_version	.\omsp_sfr.v	/^wire  [4:0] user_version =  `USER_VERSION;$/;"	n
using_fbmimicbidir_port	.\altera_mf.v	/^parameter using_fbmimicbidir_port = "ON";$/;"	c
usr1	.\altera_mf.v	/^    input    usr1;$/;"	p
v_dr_scan	.\altera_mf.v	/^    task v_dr_scan;$/;"	t
v_ir_scan	.\altera_mf.v	/^    task v_ir_scan;$/;"	t
val	.\altera_mf.v	/^        input [(2 * width_man) + 1: 0] val;$/;"	p
val1	.\altera_mf.v	/^        input  [width_man : 0] val1;$/;"	p
valid_lock_cycles	.\altera_mf.v	/^parameter valid_lock_cycles = 5;$/;"	c
valid_lock_multiplier	.\altera_mf.v	/^    parameter valid_lock_multiplier                = 1;$/;"	c
valid_lock_multiplier	.\altera_mf.v	/^    parameter valid_lock_multiplier = 5;$/;"	c
valid_lock_multiplier	.\altera_mf.v	/^parameter   valid_lock_multiplier     = 1;$/;"	c
valid_lock_multiplier	.\altera_mf.v	/^parameter valid_lock_multiplier = 5;$/;"	c
valid_rreq	.\altera_mf.v	/^    wire valid_rreq;$/;"	n
valid_wreq	.\altera_mf.v	/^    reg valid_wreq;$/;"	r
value	.\altera_mf.v	/^        integer value; \/\/ temporary storage to store the exponential value$/;"	r
value	.\altera_mf.v	/^    input value;$/;"	p
value	.\altera_mf.v	/^    integer value;$/;"	r
value1	.\altera_mf.v	/^    integer value1;$/;"	r
value2	.\altera_mf.v	/^    integer value2;$/;"	r
value_idx	.\altera_mf.v	/^    integer   value_idx;      \/\/ decoding value index$/;"	r
value_idx_cur	.\altera_mf.v	/^    integer   value_idx_cur;  \/\/ reading\/outputing value index   $/;"	r
value_idx_old	.\altera_mf.v	/^    integer   value_idx_old;  \/\/ previous decoding value index   $/;"	r
var_family_arria10	.\altera_mf.v	/^    reg var_family_arria10;$/;"	r
var_family_arriaiigx	.\altera_mf.v	/^    reg var_family_arriaiigx;$/;"	r
var_family_arriaiigz	.\altera_mf.v	/^    reg var_family_arriaiigz;$/;"	r
var_family_arriav	.\altera_mf.v	/^    reg var_family_arriav;$/;"	r
var_family_arriavgz	.\altera_mf.v	/^    reg var_family_arriavgz;$/;"	r
var_family_base_cyclone	.\altera_mf.v	/^    reg var_family_base_cyclone;$/;"	r
var_family_base_cycloneii	.\altera_mf.v	/^    reg var_family_base_cycloneii;$/;"	r
var_family_base_stratix	.\altera_mf.v	/^    reg var_family_base_stratix;$/;"	r
var_family_base_stratixii	.\altera_mf.v	/^    reg var_family_base_stratixii;$/;"	r
var_family_cyclone	.\altera_mf.v	/^    reg var_family_cyclone;$/;"	r
var_family_cycloneii	.\altera_mf.v	/^    reg var_family_cycloneii;$/;"	r
var_family_cycloneiii	.\altera_mf.v	/^    reg var_family_cycloneiii;$/;"	r
var_family_cycloneive	.\altera_mf.v	/^    reg var_family_cycloneive;$/;"	r
var_family_cycloneivgx	.\altera_mf.v	/^    reg var_family_cycloneivgx;$/;"	r
var_family_cyclonev	.\altera_mf.v	/^    reg var_family_cyclonev;$/;"	r
var_family_hardcopyiii	.\altera_mf.v	/^    reg var_family_hardcopyiii;$/;"	r
var_family_hardcopyiv	.\altera_mf.v	/^    reg var_family_hardcopyiv;$/;"	r
var_family_has_altera_mult_add_flow	.\altera_mf.v	/^    reg var_family_has_altera_mult_add_flow;$/;"	r
var_family_has_inverted_output_ddio	.\altera_mf.v	/^    reg var_family_has_inverted_output_ddio;$/;"	r
var_family_has_stratix_style_pll	.\altera_mf.v	/^    reg var_family_has_stratix_style_pll;$/;"	r
var_family_has_stratixii_style_pll	.\altera_mf.v	/^    reg var_family_has_stratixii_style_pll;$/;"	r
var_family_has_stratixii_style_ram	.\altera_mf.v	/^    reg var_family_has_stratixii_style_ram;$/;"	r
var_family_has_stratixiii_style_ram	.\altera_mf.v	/^    reg var_family_has_stratixiii_style_ram;$/;"	r
var_family_is_altmult_add_eol	.\altera_mf.v	/^    reg var_family_is_altmult_add_eol;$/;"	r
var_family_max10	.\altera_mf.v	/^    reg var_family_max10;$/;"	r
var_family_maxii	.\altera_mf.v	/^    reg var_family_maxii;$/;"	r
var_family_maxv	.\altera_mf.v	/^    reg var_family_maxv;$/;"	r
var_family_stratix	.\altera_mf.v	/^    reg var_family_stratix;$/;"	r
var_family_stratix10	.\altera_mf.v	/^    reg var_family_stratix10;$/;"	r
var_family_stratix_hc	.\altera_mf.v	/^    reg var_family_stratix_hc;$/;"	r
var_family_stratixgx	.\altera_mf.v	/^    reg var_family_stratixgx;$/;"	r
var_family_stratixii	.\altera_mf.v	/^    reg var_family_stratixii;$/;"	r
var_family_stratixiigx	.\altera_mf.v	/^    reg var_family_stratixiigx;$/;"	r
var_family_stratixiii	.\altera_mf.v	/^    reg var_family_stratixiii;$/;"	r
var_family_stratixiv	.\altera_mf.v	/^    reg var_family_stratixiv;$/;"	r
var_family_stratixv	.\altera_mf.v	/^    reg var_family_stratixv;$/;"	r
vcc	.\altera_mf.v	/^    output    vcc;$/;"	p
vco_c0	.\altera_mf.v	/^    reg vco_c0;$/;"	r
vco_c0_last_value	.\altera_mf.v	/^    reg vco_c0_last_value;$/;"	r
vco_c1	.\altera_mf.v	/^    reg vco_c1;$/;"	r
vco_c1_last_value	.\altera_mf.v	/^    reg vco_c1_last_value;$/;"	r
vco_center	.\altera_mf.v	/^    parameter vco_center                           = 0;$/;"	c
vco_center	.\altera_mf.v	/^    parameter vco_center = 0;$/;"	c
vco_center	.\altera_mf.v	/^parameter   vco_center          = 0;$/;"	c
vco_cur	.\altera_mf.v	/^    integer vco_cur;$/;"	r
vco_divide_by	.\altera_mf.v	/^    parameter vco_divide_by = 0;$/;"	c
vco_divide_by	.\altera_mf.v	/^parameter vco_divide_by = 0;$/;"	c
vco_freq	.\altera_mf.v	/^        integer vco_freq;$/;"	r
vco_frequency_control	.\altera_mf.v	/^    parameter vco_frequency_control = "auto";$/;"	c
vco_frequency_control	.\altera_mf.v	/^parameter   vco_frequency_control = "AUTO";$/;"	c
vco_l0	.\altera_mf.v	/^    reg vco_l0;$/;"	r
vco_l0_last_value	.\altera_mf.v	/^    reg vco_l0_last_value;$/;"	r
vco_l1	.\altera_mf.v	/^    reg vco_l1;$/;"	r
vco_l1_last_value	.\altera_mf.v	/^    reg vco_l1_last_value;$/;"	r
vco_max	.\altera_mf.v	/^    parameter vco_max                              = 0;$/;"	c
vco_max	.\altera_mf.v	/^    parameter vco_max = 0;$/;"	c
vco_max	.\altera_mf.v	/^parameter   vco_max             = 0;$/;"	c
vco_min	.\altera_mf.v	/^    parameter vco_min                              = 0;$/;"	c
vco_min	.\altera_mf.v	/^    parameter vco_min = 0;$/;"	c
vco_min	.\altera_mf.v	/^parameter   vco_min             = 0;$/;"	c
vco_multiply_by	.\altera_mf.v	/^    parameter vco_multiply_by = 0;$/;"	c
vco_multiply_by	.\altera_mf.v	/^parameter vco_multiply_by = 0;$/;"	c
vco_old	.\altera_mf.v	/^    integer vco_old;$/;"	r
vco_out	.\altera_mf.v	/^    reg [7:0] vco_out;$/;"	r
vco_out_last_value	.\altera_mf.v	/^    reg [7:0] vco_out_last_value;$/;"	r
vco_over	.\altera_mf.v	/^    reg vco_over, vco_under;$/;"	r
vco_per	.\altera_mf.v	/^    integer vco_per;$/;"	r
vco_period	.\altera_mf.v	/^        integer vco_period;$/;"	r
vco_period_was_phase_adjusted	.\altera_mf.v	/^    reg vco_period_was_phase_adjusted;$/;"	r
vco_phase_shift_step	.\altera_mf.v	/^        input vco_phase_shift_step;$/;"	p
vco_phase_shift_step	.\altera_mf.v	/^        integer vco_phase_shift_step;$/;"	r
vco_phase_shift_step	.\altera_mf.v	/^    parameter vco_phase_shift_step = 0;$/;"	c
vco_phase_shift_step	.\altera_mf.v	/^parameter   vco_phase_shift_step = 0;$/;"	c
vco_post_scale	.\altera_mf.v	/^    parameter vco_post_scale = 1; \/\/ 1 .. 2$/;"	c
vco_post_scale	.\altera_mf.v	/^    parameter vco_post_scale = 1;$/;"	c
vco_post_scale	.\altera_mf.v	/^parameter   vco_post_scale      = 0;$/;"	c
vco_ps_step_value	.\altera_mf.v	/^        integer vco_ps_step_value;$/;"	r
vco_range_detector_high_bits	.\altera_mf.v	/^parameter vco_range_detector_high_bits = -1;$/;"	c
vco_range_detector_low_bits	.\altera_mf.v	/^parameter vco_range_detector_low_bits = -1;$/;"	c
vco_tap	.\altera_mf.v	/^    reg [7:0] vco_tap;$/;"	r
vco_tap_last_value	.\altera_mf.v	/^    reg [7:0] vco_tap_last_value;$/;"	r
vco_under	.\altera_mf.v	/^    reg vco_over, vco_under;$/;"	r
vco_val	.\altera_mf.v	/^    reg vco_val;$/;"	r
vco_val_bit_setting	.\altera_mf.v	/^    reg vco_val_bit_setting, vco_val_old_bit_setting;$/;"	r
vco_val_old_bit_setting	.\altera_mf.v	/^    reg vco_val_bit_setting, vco_val_old_bit_setting;$/;"	r
vcooverrange	.\altera_mf.v	/^    output vcooverrange;$/;"	p
vcooverrange	.\altera_mf.v	/^output        vcooverrange;$/;"	p
vcooverrange_wire	.\altera_mf.v	/^wire vcooverrange_wire;$/;"	n
vcounderrange	.\altera_mf.v	/^    output vcounderrange;$/;"	p
vcounderrange	.\altera_mf.v	/^output        vcounderrange;$/;"	p
vcounderrange_wire	.\altera_mf.v	/^wire vcounderrange_wire;$/;"	n
violation	.\altera_mf.v	/^reg violation;$/;"	r
virtual_ir_in	.\altera_mf.v	/^    output [sld_node_ir_width - 1 : 0] virtual_ir_in;      \/\/ parallel output to user design$/;"	p
virtual_ir_in	.\altera_mf.v	/^    reg [sld_node_ir_width - 1 : 0]     virtual_ir_in;     $/;"	r
virtual_ir_out	.\altera_mf.v	/^    input [sld_node_ir_width - 1 : 0] virtual_ir_out; \/\/ captures parallel input from$/;"	p
virtual_state_cdr	.\altera_mf.v	/^    output    virtual_state_cdr;$/;"	p
virtual_state_cdr	.\altera_mf.v	/^    output   virtual_state_cdr;  \/\/ virtual cdr state signal$/;"	p
virtual_state_cdr	.\altera_mf.v	/^    output   virtual_state_cdr; \/\/ cdr state signal of megafunction$/;"	p
virtual_state_cir	.\altera_mf.v	/^    output    virtual_state_cir;$/;"	p
virtual_state_cir	.\altera_mf.v	/^    output   virtual_state_cir;  \/\/ virtual cir state signal $/;"	p
virtual_state_cir	.\altera_mf.v	/^    output   virtual_state_cir; \/\/ cir state signal of megafunction$/;"	p
virtual_state_e1dr	.\altera_mf.v	/^    output    virtual_state_e1dr;$/;"	p
virtual_state_e1dr	.\altera_mf.v	/^    output   virtual_state_e1dr; \/\/ virtual e1dr state signal $/;"	p
virtual_state_e1dr	.\altera_mf.v	/^    output   virtual_state_e1dr;\/\/  e1dr state signal of megafunction$/;"	p
virtual_state_e2dr	.\altera_mf.v	/^    output    virtual_state_e2dr;$/;"	p
virtual_state_e2dr	.\altera_mf.v	/^    output   virtual_state_e2dr; \/\/ virtual e2dr state signal $/;"	p
virtual_state_e2dr	.\altera_mf.v	/^    output   virtual_state_e2dr;\/\/ e2dr state signal of megafunction$/;"	p
virtual_state_pdr	.\altera_mf.v	/^    output    virtual_state_pdr;$/;"	p
virtual_state_pdr	.\altera_mf.v	/^    output   virtual_state_pdr;  \/\/ virtula pdr state signal $/;"	p
virtual_state_pdr	.\altera_mf.v	/^    output   virtual_state_pdr; \/\/ pdr state signal of megafunction$/;"	p
virtual_state_sdr	.\altera_mf.v	/^    output    virtual_state_sdr;$/;"	p
virtual_state_sdr	.\altera_mf.v	/^    output   virtual_state_sdr;  \/\/ virtual sdr state signal$/;"	p
virtual_state_sdr	.\altera_mf.v	/^    output   virtual_state_sdr; \/\/ sdr state signal of megafunction$/;"	p
virtual_state_udr	.\altera_mf.v	/^    output    virtual_state_udr;$/;"	p
virtual_state_udr	.\altera_mf.v	/^    output   virtual_state_udr;  \/\/ virtual udr state signal$/;"	p
virtual_state_udr	.\altera_mf.v	/^    output   virtual_state_udr; \/\/ udr state signal of megafunction$/;"	p
virtual_state_uir	.\altera_mf.v	/^    output    virtual_state_uir;$/;"	p
virtual_state_uir	.\altera_mf.v	/^    output   virtual_state_uir;  \/\/ virtual uir state signal$/;"	p
virtual_state_uir	.\altera_mf.v	/^    output   virtual_state_uir; \/\/ uir state signal of megafunction$/;"	p
viterbi_butterfly	.\viterbi_butterfly.vhd	/^ENTITY viterbi_butterfly IS$/;"	e
viterbi_conv_top	.\viterbi_conv_top.vhd	/^ENTITY viterbi_conv_top IS$/;"	e
viterbi_dis	.\viterbi_dis.vhd	/^ENTITY viterbi_dis IS$/;"	e
viterbi_long	.\dma_tfbuffer.v	/^ output         [15:0]      viterbi_long;$/;"	p
viterbi_long	.\openMSP430_fpga.v	/^wire    [15:0]     viterbi_long;$/;"	n
viterbi_long3	.\dma_tfbuffer.v	/^reg  [15:0] viterbi_long3;$/;"	r
viterbi_long3_wr	.\dma_tfbuffer.v	/^wire        viterbi_long3_wr = reg_wr[VITERBI_LONG];$/;"	n
viterbi_long_rd	.\dma_tfbuffer.v	/^wire [15:0] viterbi_long_rd            = viterbi_long3  & {16{reg_rd[VITERBI_LONG]}};$/;"	n
viterbi_mmu	.\viterbi_mmu.vhd	/^ENTITY viterbi_mmu IS$/;"	e
viterbi_top	.\viterbi_top.vhd	/^ENTITY viterbi_top IS$/;"	e
vod_setting	.\altera_mf.v	/^    parameter vod_setting = 0;$/;"	c
w_q	.\altera_mf.v	/^    wire [lpm_width-1:0] w_q;$/;"	n
w_q_a	.\altera_mf.v	/^    wire [lpm_width-1:0] w_q_a;$/;"	n
w_q_l	.\altera_mf.v	/^    wire [lpm_width_r-1:0] w_q_l;$/;"	n
w_q_s	.\altera_mf.v	/^    wire [lpm_width-1:0] w_q_s;$/;"	n
w_rd_dbuw	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rd_dbuw;$/;"	n
w_rdempty	.\altera_mf.v	/^    wire w_rdempty;$/;"	n
w_rdempty_a	.\altera_mf.v	/^    wire w_rdempty_a;$/;"	n
w_rdempty_l	.\altera_mf.v	/^    wire w_rdempty_l;$/;"	n
w_rdempty_s	.\altera_mf.v	/^    wire w_rdempty_s;$/;"	n
w_rdfull	.\altera_mf.v	/^    wire w_rdfull;$/;"	n
w_rdfull_a	.\altera_mf.v	/^    wire w_rdfull_a;$/;"	n
w_rdfull_l	.\altera_mf.v	/^    wire w_rdfull_l;$/;"	n
w_rdfull_s	.\altera_mf.v	/^    wire w_rdfull_s;$/;"	n
w_rdptr_s	.\altera_mf.v	/^    wire [lpm_widthu:0] w_rdptr_s;$/;"	n
w_rdptrrg	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rdptrrg;$/;"	n
w_rdusedw	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rdusedw;$/;"	n
w_rdusedw_a	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rdusedw_a;$/;"	n
w_rdusedw_l	.\altera_mf.v	/^    wire [lpm_widthu_r-1:0] w_rdusedw_l;$/;"	n
w_rdusedw_s	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rdusedw_s;$/;"	n
w_rs_dbwp	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rs_dbwp;$/;"	n
w_rs_nbwp	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_rs_nbwp;$/;"	n
w_wr_dbuw	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wr_dbuw;$/;"	n
w_wrdelaycycle	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wrdelaycycle;$/;"	n
w_wrempty	.\altera_mf.v	/^    wire w_wrempty;$/;"	n
w_wrempty_a	.\altera_mf.v	/^    wire w_wrempty_a;$/;"	n
w_wrempty_l	.\altera_mf.v	/^    wire w_wrempty_l;$/;"	n
w_wrempty_s	.\altera_mf.v	/^    wire w_wrempty_s;$/;"	n
w_wrfull	.\altera_mf.v	/^    wire w_wrfull;$/;"	n
w_wrfull_a	.\altera_mf.v	/^    wire w_wrfull_a;$/;"	n
w_wrfull_l	.\altera_mf.v	/^    wire w_wrfull_l;$/;"	n
w_wrfull_s	.\altera_mf.v	/^    wire w_wrfull_s;$/;"	n
w_wrptr_r	.\altera_mf.v	/^    wire [lpm_widthu:0] w_wrptr_r;$/;"	n
w_wrptr_s	.\altera_mf.v	/^    wire [lpm_widthu:0] w_wrptr_s;$/;"	n
w_wrusedw	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wrusedw;$/;"	n
w_wrusedw_a	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wrusedw_a;$/;"	n
w_wrusedw_l	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wrusedw_l;$/;"	n
w_wrusedw_s	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_wrusedw_s;$/;"	n
w_ws_dbrp	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_ws_dbrp;$/;"	n
w_ws_nbrp	.\altera_mf.v	/^    wire [lpm_widthu-1:0] w_ws_nbrp;$/;"	n
wa_mult_x	.\altera_mf.v	/^    reg [width_a - 1: 0] wa_mult_x;$/;"	r
wa_mult_x_ii	.\altera_mf.v	/^    reg [width_a - 1: 0] wa_mult_x_ii;$/;"	r
wa_mult_x_iii	.\altera_mf.v	/^    reg [width_a - 1: 0] wa_mult_x_iii;$/;"	r
warning	.\print_task.v	/^task warning;$/;"	t
wdt_clk	.\omsp_watchdog.v	/^wire wdt_clk;$/;"	n
wdt_clk_cnt	.\omsp_watchdog.v	/^wire       wdt_clk_cnt = wdt_clk;$/;"	n
wdt_clk_cnt	.\omsp_watchdog.v	/^wire       wdt_clk_cnt;$/;"	n
wdt_evt_toggle	.\omsp_watchdog.v	/^reg        wdt_evt_toggle;$/;"	r
wdt_evt_toggle_sync	.\omsp_watchdog.v	/^wire       wdt_evt_toggle_sync;$/;"	n
wdt_evt_toggle_sync_dly	.\omsp_watchdog.v	/^reg        wdt_evt_toggle_sync_dly;$/;"	r
wdt_irq	.\omsp_frontend.v	/^input                wdt_irq;          \/\/ Watchdog-timer interrupt$/;"	p
wdt_irq	.\omsp_watchdog.v	/^output              wdt_irq;        \/\/ Watchdog-timer interrupt$/;"	p
wdt_irq	.\omsp_watchdog.v	/^wire    wdt_irq       = wdttmsel & wdtifg & wdtie;$/;"	n
wdt_irq	.\openMSP430.v	/^wire                 wdt_irq;$/;"	n
wdt_reset	.\omsp_clock_module.v	/^input               wdt_reset;        \/\/ Watchdog-timer reset$/;"	p
wdt_reset	.\omsp_watchdog.v	/^output              wdt_reset;      \/\/ Watchdog-timer reset$/;"	p
wdt_reset	.\omsp_watchdog.v	/^reg     wdt_reset;$/;"	r
wdt_reset	.\openMSP430.v	/^wire                 wdt_reset;$/;"	n
wdt_rst	.\omsp_watchdog.v	/^wire wdt_rst;$/;"	n
wdt_rst_noscan	.\omsp_watchdog.v	/^wire wdt_rst_noscan;$/;"	n
wdt_wkup	.\omsp_frontend.v	/^input                wdt_wkup;         \/\/ Watchdog Wakeup$/;"	p
wdt_wkup	.\omsp_watchdog.v	/^output              wdt_wkup;       \/\/ Watchdog Wakeup$/;"	p
wdt_wkup	.\omsp_watchdog.v	/^wire    wdt_wkup      =  1'b0;$/;"	n
wdt_wkup	.\omsp_watchdog.v	/^wire wdt_wkup;$/;"	n
wdt_wkup	.\openMSP430.v	/^wire                 wdt_wkup;$/;"	n
wdt_wkup_en	.\omsp_watchdog.v	/^reg  wdt_wkup_en;$/;"	r
wdt_wkup_pre	.\omsp_watchdog.v	/^wire wdt_wkup_pre;$/;"	n
wdtcnt	.\omsp_watchdog.v	/^reg  [15:0] wdtcnt;$/;"	r
wdtcnt	.\omsp_watchdog.v	/^reg [15:0] wdtcnt;$/;"	r
wdtcnt_clr	.\omsp_watchdog.v	/^wire        wdtcnt_clr  = (wdtctl_wr & per_din[3]) | wdtifg_evt;$/;"	n
wdtcnt_clr	.\omsp_watchdog.v	/^wire wdtcnt_clr = (wdtcnt_clr_sync ^ wdtcnt_clr_sync_dly) | wdtqn_edge;$/;"	n
wdtcnt_clr_detect	.\omsp_watchdog.v	/^wire       wdtcnt_clr_detect = (wdtctl_wr & per_din[3]);$/;"	n
wdtcnt_clr_sync	.\omsp_watchdog.v	/^wire wdtcnt_clr_sync;$/;"	n
wdtcnt_clr_sync_dly	.\omsp_watchdog.v	/^reg wdtcnt_clr_sync_dly;$/;"	r
wdtcnt_clr_toggle	.\omsp_watchdog.v	/^reg        wdtcnt_clr_toggle;$/;"	r
wdtcnt_en	.\omsp_watchdog.v	/^wire       wdtcnt_en   = wdtcnt_clr | wdtcnt_incr;$/;"	n
wdtcnt_incr	.\omsp_watchdog.v	/^wire        wdtcnt_incr = ~wdtctl[7] & clk_src_en & ~dbg_freeze;$/;"	n
wdtcnt_incr	.\omsp_watchdog.v	/^wire wdtcnt_incr;$/;"	n
wdtcnt_nxt	.\omsp_watchdog.v	/^wire [15:0] wdtcnt_nxt  = wdtcnt+16'h0001;$/;"	n
wdtctl	.\omsp_watchdog.v	/^reg  [7:0] wdtctl;$/;"	r
wdtctl	.\omsp_watchdog.v	/^wire [15:0] wdtctl_rd  = {8'h69, wdtctl | WDTCTL_RD_MASK} & {16{reg_rd[WDTCTL]}};$/;"	n
wdtctl_rd	.\omsp_watchdog.v	/^wire [15:0] wdtctl_rd  = {8'h69, wdtctl | WDTCTL_RD_MASK} & {16{reg_rd[WDTCTL]}};$/;"	n
wdtctl_wr	.\omsp_watchdog.v	/^wire       wdtctl_wr = reg_wr[WDTCTL];$/;"	n
wdtie	.\omsp_sfr.v	/^output              wdtie;        \/\/ Watchdog-timer interrupt enable$/;"	p
wdtie	.\omsp_sfr.v	/^reg        wdtie;$/;"	r
wdtie	.\omsp_sfr.v	/^wire       wdtie =  1'b0;$/;"	n
wdtie	.\omsp_watchdog.v	/^input               wdtie;          \/\/ Watchdog timer interrupt enable$/;"	p
wdtie	.\openMSP430.v	/^wire                 wdtie;$/;"	n
wdtifg	.\omsp_sfr.v	/^input               wdtifg;       \/\/ Watchdog-timer interrupt flag$/;"	p
wdtifg	.\omsp_watchdog.v	/^output              wdtifg;         \/\/ Watchdog-timer interrupt flag$/;"	p
wdtifg	.\omsp_watchdog.v	/^reg        wdtifg;$/;"	r
wdtifg	.\openMSP430.v	/^wire                 wdtifg;$/;"	n
wdtifg_clr	.\omsp_watchdog.v	/^wire       wdtifg_clr =  (wdtifg_irq_clr & wdttmsel) |  wdtifg_sw_clr;$/;"	n
wdtifg_clr	.\omsp_watchdog.v	/^wire wdtifg_clr;$/;"	n
wdtifg_clr_reg	.\omsp_watchdog.v	/^reg  wdtifg_clr_reg;$/;"	r
wdtifg_evt	.\omsp_watchdog.v	/^wire        wdtifg_evt;$/;"	n
wdtifg_evt	.\omsp_watchdog.v	/^wire       wdtifg_evt =  (wdt_evt_toggle_sync_dly ^ wdt_evt_toggle_sync) | wdtpw_error;$/;"	n
wdtifg_irq_clr	.\omsp_watchdog.v	/^input               wdtifg_irq_clr; \/\/ Clear Watchdog-timer interrupt flag$/;"	p
wdtifg_set	.\omsp_watchdog.v	/^wire       wdtifg_set =  wdtifg_evt                  |  wdtifg_sw_set;$/;"	n
wdtifg_sw_clr	.\omsp_sfr.v	/^output              wdtifg_sw_clr;\/\/ Watchdog-timer interrupt flag software clear$/;"	p
wdtifg_sw_clr	.\omsp_watchdog.v	/^input               wdtifg_sw_clr;  \/\/ Watchdog-timer interrupt flag software clear$/;"	p
wdtifg_sw_clr	.\openMSP430.v	/^wire                 wdtifg_sw_clr;$/;"	n
wdtifg_sw_set	.\omsp_sfr.v	/^output              wdtifg_sw_set;\/\/ Watchdog-timer interrupt flag software set$/;"	p
wdtifg_sw_set	.\omsp_watchdog.v	/^input               wdtifg_sw_set;  \/\/ Watchdog-timer interrupt flag software set$/;"	p
wdtifg_sw_set	.\openMSP430.v	/^wire                 wdtifg_sw_set;$/;"	n
wdtisx_s	.\omsp_watchdog.v	/^reg [1:0] wdtisx_s;$/;"	r
wdtisx_ss	.\omsp_watchdog.v	/^reg [1:0] wdtisx_ss;$/;"	r
wdtnmies	.\omsp_sfr.v	/^input               wdtnmies;     \/\/ Watchdog-timer NMI edge selection$/;"	p
wdtnmies	.\omsp_watchdog.v	/^output              wdtnmies;       \/\/ Watchdog-timer NMI edge selection$/;"	p
wdtnmies	.\omsp_watchdog.v	/^wire       wdtnmies    = wdtctl[6];$/;"	n
wdtnmies	.\openMSP430.v	/^wire                 wdtnmies;$/;"	n
wdtpw_error	.\omsp_watchdog.v	/^wire       wdtpw_error = wdtctl_wr & (per_din[15:8]!=8'h5a);$/;"	n
wdtqn	.\omsp_watchdog.v	/^reg        wdtqn;$/;"	r
wdtqn_edge	.\omsp_watchdog.v	/^wire wdtqn_edge;$/;"	n
wdtqn_edge_reg	.\omsp_watchdog.v	/^reg  wdtqn_edge_reg;$/;"	r
wdttmsel	.\omsp_watchdog.v	/^wire       wdttmsel    = wdtctl[4];$/;"	n
white_space_count	.\altera_mf.v	/^    integer white_space_count;$/;"	r
width	.\altera_mf.v	/^    input width;$/;"	p
width	.\altera_mf.v	/^    integer width;$/;"	r
width	.\altera_mf.v	/^    parameter width            = 1;             \/\/ data[], qa[] and qb[]$/;"	c
width	.\altera_mf.v	/^    parameter width  = 3;$/;"	c
width	.\altera_mf.v	/^    parameter width = 1;        \/\/ The width of the radical$/;"	c
width	.\altera_mf.v	/^    parameter width = 1;$/;"	c
width	.\altera_mf.v	/^    parameter width = 4;        \/\/ Required$/;"	c
width	.\altera_mf.v	/^    parameter width = 8;            \/\/ Specifies the width of the input pattern$/;"	c
width	.\altera_mf.v	/^parameter width = 1;  \/\/ required parameter$/;"	c
width	.\altera_mf.v	/^parameter width = 1; \/\/ required parameter$/;"	c
width_a	.\altera_mf.v	/^    parameter width_a                   = 2;$/;"	c
width_a	.\altera_mf.v	/^    parameter width_a               = 16;$/;"	c
width_a	.\altera_mf.v	/^    parameter width_a          = 1;$/;"	c
width_b	.\altera_mf.v	/^    parameter width_b                   = 1;$/;"	c
width_b	.\altera_mf.v	/^    parameter width_b                   = 2;$/;"	c
width_b	.\altera_mf.v	/^    parameter width_b               = 16;$/;"	c
width_byteena	.\altera_mf.v	/^    parameter width_byteena = 1;$/;"	c
width_byteena_a	.\altera_mf.v	/^    parameter width_byteena_a  = 1;$/;"	c
width_byteena_b	.\altera_mf.v	/^    parameter width_byteena_b           = 1;$/;"	c
width_c	.\altera_mf.v	/^	parameter width_c					= 22;$/;"	c
width_c	.\altera_mf.v	/^	parameter width_c				= 22;$/;"	c
width_chainin	.\altera_mf.v	/^    parameter width_chainin = 1;$/;"	c
width_clock	.\altera_mf.v	/^parameter   width_clock              = 6;$/;"	c
width_coef	.\altera_mf.v	/^  	parameter width_coef = 0;$/;"	c
width_eccstatus	.\altera_mf.v	/^    parameter width_eccstatus = 3;$/;"	c
width_exp	.\altera_mf.v	/^    parameter width_exp = 8;$/;"	c
width_found	.\altera_mf.v	/^    reg width_found;$/;"	r
width_in	.\altera_mf.v	/^    parameter width_in = 4;     \/\/ Required$/;"	c
width_man	.\altera_mf.v	/^    parameter width_man = 23;$/;"	c
width_msb	.\altera_mf.v	/^    parameter width_msb = 17;$/;"	c
width_out	.\altera_mf.v	/^    parameter width_out = 8;    \/\/ Required$/;"	c
width_phasecounterselect	.\altera_mf.v	/^parameter   width_phasecounterselect = 4;$/;"	c
width_result	.\altera_mf.v	/^    parameter width_result              = 5;$/;"	c
width_result	.\altera_mf.v	/^    parameter width_result          = 34;$/;"	c
width_saturate_sign	.\altera_mf.v	/^    parameter width_saturate_sign = 1;$/;"	c
width_upper_data	.\altera_mf.v	/^    parameter width_upper_data = 1;$/;"	c
widthad	.\altera_mf.v	/^    parameter widthad          = 1;             \/\/ rdaddress_a,rdaddress_b,wraddress$/;"	c
widthad	.\altera_mf.v	/^    parameter widthad = 1;$/;"	c
widthad_a	.\altera_mf.v	/^    parameter widthad_a        = 1;$/;"	c
widthad_b	.\altera_mf.v	/^    parameter widthad_b                 = 1;$/;"	c
widthr	.\altera_mf.v	/^    parameter widthr = 4;       \/\/ Required$/;"	c
wire_lock_state_mc_d	.\altera_mf.v	/^    wire [1:0] wire_lock_state_mc_d;$/;"	n
wire_lock_state_mc_ena	.\altera_mf.v	/^    wire [1:0] wire_lock_state_mc_ena;$/;"	n
wire_next_scount_num_dataa	.\altera_mf.v	/^        wire    [3:0]   wire_next_scount_num_dataa;$/;"	n
wire_next_scount_num_dataa	.\altera_mf.v	/^        wire    [COUNTER_WIDTH-1:0]   wire_next_scount_num_dataa;$/;"	n
wire_next_scount_num_datab	.\altera_mf.v	/^        wire    [3:0]   wire_next_scount_num_datab;$/;"	n
wire_next_scount_num_datab	.\altera_mf.v	/^        wire    [COUNTER_WIDTH-1:0]   wire_next_scount_num_datab;$/;"	n
wire_next_scount_num_result	.\altera_mf.v	/^        wire    [3:0]   wire_next_scount_num_result;$/;"	n
wire_next_scount_num_result	.\altera_mf.v	/^        wire    [COUNTER_WIDTH-1:0]   wire_next_scount_num_result;$/;"	n
wkup	.\omsp_frontend.v	/^input                wkup;             \/\/ System Wake-up (asynchronous)$/;"	p
wkup	.\openMSP430.v	/^input                wkup;                   \/\/ ASIC ONLY: System Wake-up (asynchronous and non-glitchy)$/;"	p
wkup	.\openMSP430_fpga.v	/^wire         [13:0] wkup;$/;"	n
wkup_clear	.\omsp_wakeup_cell.v	/^input          wkup_clear;     \/\/ Glitch free wakeup event clear$/;"	p
wkup_clk	.\omsp_wakeup_cell.v	/^   wire wkup_clk  =  wkup_event;$/;"	n
wkup_clk	.\omsp_wakeup_cell.v	/^   wire wkup_clk;$/;"	n
wkup_event	.\omsp_wakeup_cell.v	/^input          wkup_event;     \/\/ Glitch free asynchronous wakeup event$/;"	p
wkup_in	.\openMSP430_fpga.v	/^wire        [13:0] wkup_in;$/;"	n
wkup_out	.\omsp_wakeup_cell.v	/^output         wkup_out;       \/\/ Wakup signal (asynchronous)$/;"	p
wkup_out	.\omsp_wakeup_cell.v	/^reg    wkup_out;$/;"	r
wkup_rst	.\omsp_wakeup_cell.v	/^   wire wkup_rst  =  wkup_clear;$/;"	n
wkup_rst	.\omsp_wakeup_cell.v	/^   wire wkup_rst;$/;"	n
wrPtr	.\altera_mf.v	/^    reg [2 : 0] wrPtr [number_of_channels -1 : 0];$/;"	r
wrPtr	.\altera_mf.v	/^    reg [2 : 0] wrPtr;$/;"	r
wraddress	.\altera_mf.v	/^    input  [widthad-1:0] wraddress; \/\/ Write address input to the memory$/;"	p
wraddress	.\altera_mf.v	/^    input [widthad-1:0]    wraddress;$/;"	p
wraddress_aclr	.\altera_mf.v	/^    parameter wraddress_aclr = "ON";$/;"	c
wraddress_at_high	.\altera_mf.v	/^    reg [widthad-1:0] wraddress_at_high;$/;"	r
wraddress_at_low	.\altera_mf.v	/^    reg [widthad-1:0] wraddress_at_low;$/;"	r
wraddress_reg	.\altera_mf.v	/^    parameter wraddress_reg = "INCLOCK";$/;"	c
wraddress_tmp	.\altera_mf.v	/^    wire [widthad-1:0] wraddress_tmp;$/;"	n
wraddressstall	.\altera_mf.v	/^    input  wraddressstall;              \/\/ Address stall input for write port$/;"	p
wraddressstall	.\altera_mf.v	/^    tri0 wraddressstall;$/;"	n
wrclk	.\altera_mf.v	/^    input wrclk;$/;"	p
wrcontrol_aclr	.\altera_mf.v	/^    parameter wrcontrol_aclr = "ON";$/;"	c
wrcontrol_aclr_a	.\altera_mf.v	/^    parameter wrcontrol_aclr_a = "NONE";$/;"	c
wrcontrol_aclr_b	.\altera_mf.v	/^    parameter wrcontrol_aclr_b          = "NONE";$/;"	c
wrcontrol_reg	.\altera_mf.v	/^    parameter wrcontrol_reg = "INCLOCK";$/;"	c
wrcontrol_wraddress_reg_b	.\altera_mf.v	/^    parameter wrcontrol_wraddress_reg_b = "CLOCK1";$/;"	c
wrcontrol_wraddress_reg_b	.\altera_mf.v	/^   parameter wrcontrol_wraddress_reg_b = (operation_mode == "BIDIR_DUAL_PORT")? address_reg_b : "CLOCK1";$/;"	c
wrempty	.\altera_mf.v	/^    output wrempty;$/;"	p
wren	.\altera_mf.v	/^    input                  wren;$/;"	p
wren	.\altera_mf.v	/^    input  wren;                 \/\/ Write enable input$/;"	p
wren	.\altera_mf.v	/^    tri0                   wren;$/;"	n
wren	.\ram16x512.v	/^	input	  wren;$/;"	p
wren_a	.\altera_mf.v	/^	input  wren_a;$/;"	p
wren_a	.\altera_mf.v	/^    input  wren_a; \/\/ Port A write\/read enable input$/;"	p
wren_a	.\altera_mf.v	/^    tri0 wren_a;$/;"	n
wren_at_high	.\altera_mf.v	/^    reg wren_at_high;$/;"	r
wren_at_low	.\altera_mf.v	/^    reg wren_at_low;$/;"	r
wren_b	.\altera_mf.v	/^    input  wren_b; \/\/ Port B write enable input$/;"	p
wren_b	.\altera_mf.v	/^    input  wren_b;$/;"	p
wren_b	.\altera_mf.v	/^    tri0 wren_b;$/;"	n
wren_tmp	.\altera_mf.v	/^    wire wren_tmp;$/;"	n
wreq	.\altera_mf.v	/^    input wreq, rreq;$/;"	p
wrfull	.\altera_mf.v	/^    output wrfull;$/;"	p
write_aclr	.\altera_mf.v	/^    parameter write_aclr       = "ON";         \/\/ aclr affects wraddress?$/;"	c
write_aclr	.\altera_mf.v	/^    wire write_aclr;$/;"	n
write_aclr_synch	.\altera_mf.v	/^    parameter write_aclr_synch = "OFF";$/;"	c
write_at_low_clock	.\altera_mf.v	/^    reg write_at_low_clock; \/\/ initialize at initial block $/;"	r
write_flag	.\altera_mf.v	/^    reg write_flag;$/;"	r
write_id	.\altera_mf.v	/^    reg [lpm_widthu-1:0] write_id;$/;"	r
write_latency1	.\altera_mf.v	/^    reg [lpm_widthu-1:0] write_latency1; $/;"	r
write_latency2	.\altera_mf.v	/^    reg [lpm_widthu-1:0] write_latency2; $/;"	r
write_latency3	.\altera_mf.v	/^    reg [lpm_widthu-1:0] write_latency3; $/;"	r
write_reg	.\altera_mf.v	/^    parameter write_reg        = "UNREGISTERED";\/\/ clock used by wraddress & wren$/;"	c
write_scan_idx	.\altera_mf.v	/^                integer write_scan_idx;    $/;"	r
write_side_sync_reset	.\altera_mf.v	/^    reg [number_of_channels -1 : 0] write_side_sync_reset;$/;"	r
write_side_sync_reset	.\altera_mf.v	/^    reg write_side_sync_reset;$/;"	r
wrreq	.\altera_mf.v	/^    input  wrreq;$/;"	p
wrreq	.\altera_mf.v	/^    input wrreq;$/;"	p
wrsync_delaypipe	.\altera_mf.v	/^    parameter wrsync_delaypipe = 0;$/;"	c
wrt_count	.\altera_mf.v	/^    integer wrt_count;$/;"	r
wrusedw	.\altera_mf.v	/^    output [lpm_widthu-1:0] wrusedw;$/;"	p
x	.\altera_mf.v	/^    integer x;$/;"	r
x2	.\altera_mf.v	/^    integer x2;$/;"	r
x3	.\altera_mf.v	/^    integer x3;$/;"	r
x_on_bitslip	.\altera_mf.v	/^    parameter x_on_bitslip = "ON";$/;"	c
xfer_bit	.\omsp_dbg_uart.v	/^reg                      [3:0] xfer_bit;$/;"	r
xfer_bit_inc	.\omsp_dbg_uart.v	/^wire       xfer_bit_inc = (xfer_bit!=4'h0) & (xfer_cnt=={`DBG_UART_XFER_CNT_W{1'b0}});$/;"	n
xfer_buf	.\omsp_dbg_uart.v	/^reg  [19:0] xfer_buf;$/;"	r
xfer_buf_nxt	.\omsp_dbg_uart.v	/^wire [15:0] dbg_din    =  dbg_din_bw ? {8'h00,           xfer_buf_nxt[18:11]} :$/;"	n
xfer_buf_nxt	.\omsp_dbg_uart.v	/^wire [19:0] xfer_buf_nxt;$/;"	n
xfer_cnt	.\omsp_dbg_uart.v	/^reg [`DBG_UART_XFER_CNT_W-1:0] xfer_cnt;$/;"	r
xfer_done	.\omsp_dbg_uart.v	/^wire        xfer_done;$/;"	n
y	.\altera_mf.v	/^    integer y;$/;"	r
y	.\omsp_and_gate.v	/^output         y;              \/\/ AND gate output$/;"	p
zero	.\altera_mf.v	/^    output zero;$/;"	p
zero_acc_int	.\altera_mf.v	/^    wire zero_acc_int;$/;"	n
zero_acc_pipe_reg	.\altera_mf.v	/^    reg zero_acc_pipe_reg;$/;"	r
zero_acc_pipe_wire	.\altera_mf.v	/^    wire zero_acc_pipe_wire;$/;"	n
zero_acc_reg	.\altera_mf.v	/^    reg zero_acc_reg;$/;"	r
zero_acc_wire	.\altera_mf.v	/^    wire zero_acc_wire;$/;"	n
zero_bit	.\altera_mf.v	/^    reg zero_bit;$/;"	r
zero_chainout	.\altera_mf.v	/^    input zero_chainout;$/;"	p
zero_chainout_output_aclr	.\altera_mf.v	/^    parameter zero_chainout_output_aclr = "NONE";$/;"	c
zero_chainout_output_register	.\altera_mf.v	/^    parameter zero_chainout_output_register = "UNREGISTERED";$/;"	c
zero_dataa	.\altera_mf.v	/^    reg zero_dataa;$/;"	r
zero_datab	.\altera_mf.v	/^    reg zero_datab;$/;"	r
zero_loopback	.\altera_mf.v	/^    input zero_loopback;$/;"	p
zero_loopback_aclr	.\altera_mf.v	/^    parameter zero_loopback_aclr = "NONE";$/;"	c
zero_loopback_output_aclr	.\altera_mf.v	/^    parameter zero_loopback_output_aclr = "NONE";$/;"	c
zero_loopback_output_register	.\altera_mf.v	/^    parameter zero_loopback_output_register = "UNREGISTERED";$/;"	c
zero_loopback_pipeline_aclr	.\altera_mf.v	/^    parameter zero_loopback_pipeline_aclr = "NONE";$/;"	c
zero_loopback_pipeline_register	.\altera_mf.v	/^    parameter zero_loopback_pipeline_register = "UNREGISTERED";$/;"	c
zero_loopback_register	.\altera_mf.v	/^    parameter zero_loopback_register = "UNREGISTERED";$/;"	c
zero_mant_dataa	.\altera_mf.v	/^    reg zero_mant_dataa;$/;"	r
zero_mant_datab	.\altera_mf.v	/^    reg zero_mant_datab;$/;"	r
zero_pipe	.\altera_mf.v	/^    reg[LATENCY : 0] zero_pipe;$/;"	r
zero_pipe_wire_clk	.\altera_mf.v	/^    wire zero_pipe_wire_clk;$/;"	n
zero_pipe_wire_clr	.\altera_mf.v	/^    tri0 zero_pipe_wire_clr;$/;"	n
zero_pipe_wire_en	.\altera_mf.v	/^    tri1 zero_pipe_wire_en;$/;"	n
zero_wire_clk	.\altera_mf.v	/^    wire zero_wire_clk;$/;"	n
zero_wire_clr	.\altera_mf.v	/^    tri0 zero_wire_clr;$/;"	n
zero_wire_en	.\altera_mf.v	/^    tri1 zero_wire_en;$/;"	n
zeroacc_latent	.\altera_mf.v	/^    wire zeroacc_latent;$/;"	n
zerochainout_int	.\altera_mf.v	/^    tri0 zerochainout_int;$/;"	n
zerochainout_reg	.\altera_mf.v	/^    reg zerochainout_reg;$/;"	r
zerochainout_reg_wire_clk	.\altera_mf.v	/^    wire zerochainout_reg_wire_clk;$/;"	n
zerochainout_reg_wire_clr	.\altera_mf.v	/^    tri0 zerochainout_reg_wire_clr;$/;"	n
zerochainout_reg_wire_en	.\altera_mf.v	/^    tri1 zerochainout_reg_wire_en;$/;"	n
zerochainout_wire	.\altera_mf.v	/^    wire zerochainout_wire;$/;"	n
zeroloopback_int	.\altera_mf.v	/^    tri0 zeroloopback_int;$/;"	n
zeroloopback_out_reg	.\altera_mf.v	/^    reg zeroloopback_out_reg;$/;"	r
zeroloopback_out_wire	.\altera_mf.v	/^    wire zeroloopback_out_wire;$/;"	n
zeroloopback_out_wire_clk	.\altera_mf.v	/^    wire zeroloopback_out_wire_clk;$/;"	n
zeroloopback_out_wire_clr	.\altera_mf.v	/^    tri0 zeroloopback_out_wire_clr;$/;"	n
zeroloopback_out_wire_en	.\altera_mf.v	/^    tri1 zeroloopback_out_wire_en;$/;"	n
zeroloopback_pipe_reg	.\altera_mf.v	/^    reg zeroloopback_pipe_reg;$/;"	r
zeroloopback_pipe_wire	.\altera_mf.v	/^    wire zeroloopback_pipe_wire;$/;"	n
zeroloopback_pipe_wire_clk	.\altera_mf.v	/^    wire zeroloopback_pipe_wire_clk;$/;"	n
zeroloopback_pipe_wire_clr	.\altera_mf.v	/^    tri0 zeroloopback_pipe_wire_clr;$/;"	n
zeroloopback_pipe_wire_en	.\altera_mf.v	/^    tri1 zeroloopback_pipe_wire_en;$/;"	n
zeroloopback_reg	.\altera_mf.v	/^    reg zeroloopback_reg;$/;"	r
zeroloopback_reg_wire_clk	.\altera_mf.v	/^    wire zeroloopback_reg_wire_clk;$/;"	n
zeroloopback_reg_wire_clr	.\altera_mf.v	/^    tri0 zeroloopback_reg_wire_clr;$/;"	n
zeroloopback_reg_wire_en	.\altera_mf.v	/^    tri1 zeroloopback_reg_wire_en;$/;"	n
zeroloopback_wire	.\altera_mf.v	/^    wire zeroloopback_wire;$/;"	n
zeropad	.\altera_mf.v	/^    reg [(width_out - width_in) : 0] zeropad;$/;"	r
